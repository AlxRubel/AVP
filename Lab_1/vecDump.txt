
main.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <_ZNSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EEixEm.isra.0>:
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
       0:	48 8d 04 76          	lea    (%rsi,%rsi,2),%rax
       4:	48 8d 04 c7          	lea    (%rdi,%rax,8),%rax
      }
       8:	c3                   	ret    
       9:	90                   	nop
       a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000000010 <_ZNSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EEixEm.isra.0>:
	return *(this->_M_impl._M_start + __n);
      10:	48 8d 04 76          	lea    (%rsi,%rsi,2),%rax
      14:	48 8d 04 c7          	lea    (%rdi,%rax,8),%rax
      }
      18:	c3                   	ret    
      19:	90                   	nop
      1a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000000020 <_ZNSt6vectorIdSaIdEEixEm.isra.0>:
	return *(this->_M_impl._M_start + __n);
      20:	48 8d 04 f7          	lea    (%rdi,%rsi,8),%rax
      }
      24:	c3                   	ret    
      25:	90                   	nop
      26:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
      2d:	00 00 00 

0000000000000030 <_ZNSt6vectorIS_IdSaIdEESaIS1_EEixEm.isra.0>:
	return *(this->_M_impl._M_start + __n);
      30:	48 8d 04 76          	lea    (%rsi,%rsi,2),%rax
      34:	48 8d 04 c7          	lea    (%rdi,%rax,8),%rax
      }
      38:	c3                   	ret    
      39:	90                   	nop
      3a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000000040 <_ZNKSt6vectorIdSaIdEE4sizeEv.isra.0>:
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
      40:	48 89 f0             	mov    %rsi,%rax
      43:	48 29 f8             	sub    %rdi,%rax
      46:	48 c1 f8 03          	sar    $0x3,%rax
      4a:	c3                   	ret    
      4b:	90                   	nop
      4c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000000050 <_ZNKSt6vectorIS_IdSaIdEESaIS1_EE4sizeEv.isra.0>:
      50:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
      57:	aa aa aa 
      5a:	48 29 fe             	sub    %rdi,%rsi
      5d:	48 c1 fe 03          	sar    $0x3,%rsi
      61:	48 0f af c6          	imul   %rsi,%rax
      65:	c3                   	ret    
      66:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
      6d:	00 00 00 

0000000000000070 <_ZNKSt6vectorIdSaIdEEixEm.isra.0>:
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      const_reference
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
      70:	48 8d 04 f7          	lea    (%rdi,%rsi,8),%rax
      }
      74:	c3                   	ret    
      75:	90                   	nop
      76:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
      7d:	00 00 00 

0000000000000080 <_ZNKSt6vectorIS_IdSaIdEESaIS1_EEixEm.isra.0>:
	return *(this->_M_impl._M_start + __n);
      80:	48 8d 04 76          	lea    (%rsi,%rsi,2),%rax
      84:	48 8d 04 c7          	lea    (%rdi,%rax,8),%rax
      }
      88:	c3                   	ret    
      89:	90                   	nop
      8a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000000090 <_ZNKSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EEixEm.isra.0>:
	return *(this->_M_impl._M_start + __n);
      90:	48 8d 04 76          	lea    (%rsi,%rsi,2),%rax
      94:	48 8d 04 c7          	lea    (%rdi,%rax,8),%rax
      }
      98:	c3                   	ret    
      99:	90                   	nop
      9a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000000a0 <_ZNKSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EE4sizeEv.isra.0>:
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
      a0:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
      a7:	aa aa aa 
      aa:	48 29 fe             	sub    %rdi,%rsi
      ad:	48 c1 fe 03          	sar    $0x3,%rsi
      b1:	48 0f af c6          	imul   %rsi,%rax
      b5:	c3                   	ret    
      b6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
      bd:	00 00 00 

00000000000000c0 <_ZNKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EEixEm.isra.0>:
	return *(this->_M_impl._M_start + __n);
      c0:	48 8d 04 76          	lea    (%rsi,%rsi,2),%rax
      c4:	48 8d 04 c7          	lea    (%rdi,%rax,8),%rax
      }
      c8:	c3                   	ret    
      c9:	90                   	nop
      ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000000d0 <_ZNKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE4sizeEv.isra.0>:
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
      d0:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
      d7:	aa aa aa 
      da:	48 29 fe             	sub    %rdi,%rsi
      dd:	48 c1 fe 03          	sar    $0x3,%rsi
      e1:	48 0f af c6          	imul   %rsi,%rax
      e5:	c3                   	ret    
      e6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
      ed:	00 00 00 

00000000000000f0 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0>:
   *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/streambufs.html#io.streambuf.buffering
   *  for more on this subject.
  */
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
      f0:	55                   	push   %rbp
      f1:	53                   	push   %rbx
      f2:	48 83 ec 08          	sub    $0x8,%rsp
    { return flush(__os.put(__os.widen('\n'))); }
      f6:	48 8b 07             	mov    (%rdi),%rax
      f9:	48 8b 40 e8          	mov    -0x18(%rax),%rax
      fd:	48 8b ac 07 f0 00 00 	mov    0xf0(%rdi,%rax,1),%rbp
     104:	00 

  template<typename _Facet>
    inline const _Facet&
    __check_facet(const _Facet* __f)
    {
      if (!__f)
     105:	48 85 ed             	test   %rbp,%rbp
     108:	74 4f                	je     159 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0+0x69>
       *  @return  The converted character.
      */
      char_type
      widen(char __c) const
      {
	if (_M_widen_ok)
     10a:	80 7d 38 00          	cmpb   $0x0,0x38(%rbp)
     10e:	48 89 fb             	mov    %rdi,%rbx
     111:	74 1a                	je     12d <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0+0x3d>
	  return _M_widen[static_cast<unsigned char>(__c)];
     113:	0f be 75 43          	movsbl 0x43(%rbp),%esi
     117:	48 89 df             	mov    %rbx,%rdi
     11a:	e8 00 00 00 00       	call   11f <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0+0x2f>
     11f:	48 83 c4 08          	add    $0x8,%rsp
     123:	5b                   	pop    %rbx
     124:	48 89 c7             	mov    %rax,%rdi
     127:	5d                   	pop    %rbp
   *  This manipulator simply calls the stream's @c flush() member function.
  */
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }
     128:	e9 00 00 00 00       	jmp    12d <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0+0x3d>
	this->_M_widen_init();
     12d:	48 89 ef             	mov    %rbp,%rdi
     130:	e8 00 00 00 00       	call   135 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0+0x45>
	return this->do_widen(__c);
     135:	48 8b 45 00          	mov    0x0(%rbp),%rax
     139:	be 0a 00 00 00       	mov    $0xa,%esi
     13e:	48 8b 40 30          	mov    0x30(%rax),%rax
     142:	48 3d 00 00 00 00    	cmp    $0x0,%rax
     148:	74 cd                	je     117 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0+0x27>
     14a:	be 0a 00 00 00       	mov    $0xa,%esi
     14f:	48 89 ef             	mov    %rbp,%rdi
     152:	ff d0                	call   *%rax
     154:	0f be f0             	movsbl %al,%esi
     157:	eb be                	jmp    117 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0+0x27>
	__throw_bad_cast();
     159:	e8 00 00 00 00       	call   15e <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0+0x6e>
     15e:	66 90                	xchg   %ax,%ax

0000000000000160 <_Z7cmpTestRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_>:

using doubleMtrx = vector<vector<double>>;
using mtrxMtrx = vector<vector<doubleMtrx>>;

//_________________SERVICE__________________________________________________________________
bool cmpTest(const mtrxMtrx &mtrx_1, const mtrxMtrx &mtrx_2) {
     160:	41 57                	push   %r15
     162:	48 89 f1             	mov    %rsi,%rcx
     165:	41 56                	push   %r14
     167:	41 55                	push   %r13
     169:	41 54                	push   %r12
     16b:	55                   	push   %rbp
     16c:	53                   	push   %rbx
     16d:	48 83 ec 28          	sub    $0x28,%rsp
     171:	48 8b 77 08          	mov    0x8(%rdi),%rsi
     175:	48 8b 07             	mov    (%rdi),%rax
     178:	48 bf ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rdi
     17f:	aa aa aa 
     182:	48 89 f2             	mov    %rsi,%rdx
     185:	48 29 c2             	sub    %rax,%rdx
     188:	48 c1 fa 03          	sar    $0x3,%rdx
     18c:	48 0f af d7          	imul   %rdi,%rdx
    for (size_t i = 0; i < mtrx_1.size(); i++) {
     190:	48 39 c6             	cmp    %rax,%rsi
     193:	0f 84 d8 00 00 00    	je     271 <_Z7cmpTestRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x111>
     199:	4c 8b 48 08          	mov    0x8(%rax),%r9
     19d:	4c 8b 00             	mov    (%rax),%r8
     1a0:	49 89 d5             	mov    %rdx,%r13
     1a3:	45 31 e4             	xor    %r12d,%r12d
     1a6:	c5 fa 7e 15 00 00 00 	vmovq  0x0(%rip),%xmm2        # 1ae <_Z7cmpTestRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x4e>
     1ad:	00 
     1ae:	c5 fb 10 0d 00 00 00 	vmovsd 0x0(%rip),%xmm1        # 1b6 <_Z7cmpTestRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x56>
     1b5:	00 
     1b6:	4c 89 ca             	mov    %r9,%rdx
     1b9:	4c 29 c2             	sub    %r8,%rdx
     1bc:	48 c1 fa 03          	sar    $0x3,%rdx
     1c0:	48 0f af d7          	imul   %rdi,%rdx
     1c4:	31 ff                	xor    %edi,%edi
     1c6:	48 89 d5             	mov    %rdx,%rbp
     1c9:	4c 89 ea             	mov    %r13,%rdx
        for (size_t j = 0; j < mtrx_1[0].size(); j++) {
     1cc:	4d 39 c8             	cmp    %r9,%r8
     1cf:	0f 84 8b 00 00 00    	je     260 <_Z7cmpTestRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x100>
	return *(this->_M_impl._M_start + __n);
     1d5:	48 8b 31             	mov    (%rcx),%rsi
     1d8:	4c 89 64 24 18       	mov    %r12,0x18(%rsp)
     1dd:	45 31 f6             	xor    %r14d,%r14d
     1e0:	4d 89 c3             	mov    %r8,%r11
     1e3:	4c 8b 2c 38          	mov    (%rax,%rdi,1),%r13
     1e7:	4c 8b 14 3e          	mov    (%rsi,%rdi,1),%r10
     1eb:	31 f6                	xor    %esi,%esi
     1ed:	4d 8b 7c 35 00       	mov    0x0(%r13,%rsi,1),%r15
     1f2:	4d 8b 24 32          	mov    (%r10,%rsi,1),%r12
     1f6:	4c 89 74 24 08       	mov    %r14,0x8(%rsp)
     1fb:	31 db                	xor    %ebx,%ebx
     1fd:	4c 89 54 24 10       	mov    %r10,0x10(%rsp)
     202:	4d 8b 34 1f          	mov    (%r15,%rbx,1),%r14
     206:	4d 8b 14 1c          	mov    (%r12,%rbx,1),%r10
            for (size_t k = 0; k < 8; k++) {
                for (size_t m = 0; m < 8; m++) {
     20a:	45 31 c0             	xor    %r8d,%r8d
     20d:	0f 1f 00             	nopl   (%rax)
                    double num1 = mtrx_1[i][j][k][m];
                    double num2 = mtrx_2[i][j][k][m];

                    if (abs(num1 - num2) > 0.000000001) {
     210:	c4 81 7b 10 04 c6    	vmovsd (%r14,%r8,8),%xmm0
     216:	c4 81 7b 5c 04 c2    	vsubsd (%r10,%r8,8),%xmm0,%xmm0
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
     21c:	c5 f9 54 c2          	vandpd %xmm2,%xmm0,%xmm0
     220:	c5 f9 2f c1          	vcomisd %xmm1,%xmm0
     224:	0f 87 a6 00 00 00    	ja     2d0 <_Z7cmpTestRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x170>
                for (size_t m = 0; m < 8; m++) {
     22a:	49 83 c0 01          	add    $0x1,%r8
     22e:	49 83 f8 08          	cmp    $0x8,%r8
     232:	75 dc                	jne    210 <_Z7cmpTestRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0xb0>
            for (size_t k = 0; k < 8; k++) {
     234:	48 83 c3 18          	add    $0x18,%rbx
     238:	48 81 fb c0 00 00 00 	cmp    $0xc0,%rbx
     23f:	75 c1                	jne    202 <_Z7cmpTestRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0xa2>
        for (size_t j = 0; j < mtrx_1[0].size(); j++) {
     241:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
     246:	4c 8b 54 24 10       	mov    0x10(%rsp),%r10
     24b:	48 83 c6 18          	add    $0x18,%rsi
     24f:	49 83 c6 01          	add    $0x1,%r14
     253:	49 39 ee             	cmp    %rbp,%r14
     256:	72 95                	jb     1ed <_Z7cmpTestRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x8d>
     258:	4c 8b 64 24 18       	mov    0x18(%rsp),%r12
     25d:	4d 89 d8             	mov    %r11,%r8
    for (size_t i = 0; i < mtrx_1.size(); i++) {
     260:	49 83 c4 01          	add    $0x1,%r12
     264:	48 83 c7 18          	add    $0x18,%rdi
     268:	49 39 d4             	cmp    %rdx,%r12
     26b:	0f 82 5b ff ff ff    	jb     1cc <_Z7cmpTestRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x6c>
	__ostream_insert(__out, __s,
     271:	ba 20 00 00 00       	mov    $0x20,%edx
     276:	be 00 00 00 00       	mov    $0x0,%esi
     27b:	bf 00 00 00 00       	mov    $0x0,%edi
     280:	e8 00 00 00 00       	call   285 <_Z7cmpTestRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x125>
    { return flush(__os.put(__os.widen('\n'))); }
     285:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 28c <_Z7cmpTestRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x12c>
     28c:	48 8b 40 e8          	mov    -0x18(%rax),%rax
     290:	48 8b 98 00 00 00 00 	mov    0x0(%rax),%rbx
      if (!__f)
     297:	48 85 db             	test   %rbx,%rbx
     29a:	0f 84 e3 00 00 00    	je     383 <_Z7cmpTestRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x223>
	if (_M_widen_ok)
     2a0:	80 7b 38 00          	cmpb   $0x0,0x38(%rbx)
     2a4:	0f 84 ac 00 00 00    	je     356 <_Z7cmpTestRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x1f6>
     2aa:	0f be 73 43          	movsbl 0x43(%rbx),%esi
     2ae:	bf 00 00 00 00       	mov    $0x0,%edi
     2b3:	e8 00 00 00 00       	call   2b8 <_Z7cmpTestRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x158>
     2b8:	48 89 c7             	mov    %rax,%rdi
    { return __os.flush(); }
     2bb:	e8 00 00 00 00       	call   2c0 <_Z7cmpTestRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x160>
                }
            }
        }
    }
    cout << "Compare test: \033[1;32msuccess\033[0m" << endl;
    return true;
     2c0:	b8 01 00 00 00       	mov    $0x1,%eax
    { return flush(__os.put(__os.widen('\n'))); }
     2c5:	eb 56                	jmp    31d <_Z7cmpTestRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x1bd>
     2c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
     2ce:	00 00 
	__ostream_insert(__out, __s,
     2d0:	ba 1f 00 00 00       	mov    $0x1f,%edx
     2d5:	be 00 00 00 00       	mov    $0x0,%esi
     2da:	bf 00 00 00 00       	mov    $0x0,%edi
     2df:	e8 00 00 00 00       	call   2e4 <_Z7cmpTestRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x184>
    { return flush(__os.put(__os.widen('\n'))); }
     2e4:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 2eb <_Z7cmpTestRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x18b>
     2eb:	48 8b 40 e8          	mov    -0x18(%rax),%rax
     2ef:	48 8b 98 00 00 00 00 	mov    0x0(%rax),%rbx
     2f6:	48 85 db             	test   %rbx,%rbx
     2f9:	0f 84 84 00 00 00    	je     383 <_Z7cmpTestRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x223>
     2ff:	80 7b 38 00          	cmpb   $0x0,0x38(%rbx)
     303:	74 2b                	je     330 <_Z7cmpTestRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x1d0>
     305:	0f be 73 43          	movsbl 0x43(%rbx),%esi
     309:	bf 00 00 00 00       	mov    $0x0,%edi
     30e:	e8 00 00 00 00       	call   313 <_Z7cmpTestRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x1b3>
     313:	48 89 c7             	mov    %rax,%rdi
    { return __os.flush(); }
     316:	e8 00 00 00 00       	call   31b <_Z7cmpTestRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x1bb>
                        return false;
     31b:	31 c0                	xor    %eax,%eax
}
     31d:	48 83 c4 28          	add    $0x28,%rsp
     321:	5b                   	pop    %rbx
     322:	5d                   	pop    %rbp
     323:	41 5c                	pop    %r12
     325:	41 5d                	pop    %r13
     327:	41 5e                	pop    %r14
     329:	41 5f                	pop    %r15
     32b:	c3                   	ret    
     32c:	0f 1f 40 00          	nopl   0x0(%rax)
	this->_M_widen_init();
     330:	48 89 df             	mov    %rbx,%rdi
     333:	e8 00 00 00 00       	call   338 <_Z7cmpTestRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x1d8>
	return this->do_widen(__c);
     338:	48 8b 03             	mov    (%rbx),%rax
     33b:	be 0a 00 00 00       	mov    $0xa,%esi
     340:	48 8b 40 30          	mov    0x30(%rax),%rax
     344:	48 3d 00 00 00 00    	cmp    $0x0,%rax
     34a:	74 bd                	je     309 <_Z7cmpTestRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x1a9>
     34c:	48 89 df             	mov    %rbx,%rdi
     34f:	ff d0                	call   *%rax
    { return flush(__os.put(__os.widen('\n'))); }
     351:	0f be f0             	movsbl %al,%esi
     354:	eb b3                	jmp    309 <_Z7cmpTestRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x1a9>
	this->_M_widen_init();
     356:	48 89 df             	mov    %rbx,%rdi
     359:	e8 00 00 00 00       	call   35e <_Z7cmpTestRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x1fe>
	return this->do_widen(__c);
     35e:	48 8b 03             	mov    (%rbx),%rax
     361:	be 0a 00 00 00       	mov    $0xa,%esi
     366:	48 8b 40 30          	mov    0x30(%rax),%rax
     36a:	48 3d 00 00 00 00    	cmp    $0x0,%rax
     370:	0f 84 38 ff ff ff    	je     2ae <_Z7cmpTestRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x14e>
     376:	48 89 df             	mov    %rbx,%rdi
     379:	ff d0                	call   *%rax
     37b:	0f be f0             	movsbl %al,%esi
     37e:	e9 2b ff ff ff       	jmp    2ae <_Z7cmpTestRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x14e>
	__throw_bad_cast();
     383:	e8 00 00 00 00       	call   388 <_Z7cmpTestRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x228>
     388:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
     38f:	00 

0000000000000390 <_Z10opAddAs_dMRSt6vectorIS_IdSaIdEESaIS1_EERKS3_>:
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
     390:	48 b9 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rcx
     397:	aa aa aa 

    return res;
}
//__attribute__((optimize("no-tree-vectorize")))
__attribute__((target("avx")))
void opAddAs_dM(doubleMtrx & lhs, const doubleMtrx & rhs) {
     39a:	55                   	push   %rbp
     39b:	48 89 e5             	mov    %rsp,%rbp
     39e:	41 57                	push   %r15
     3a0:	41 56                	push   %r14
     3a2:	41 55                	push   %r13
     3a4:	41 54                	push   %r12
     3a6:	53                   	push   %rbx
     3a7:	48 83 e4 e0          	and    $0xffffffffffffffe0,%rsp
     3ab:	48 8b 57 08          	mov    0x8(%rdi),%rdx
     3af:	4c 8b 37             	mov    (%rdi),%r14
     3b2:	48 89 d0             	mov    %rdx,%rax
     3b5:	4c 29 f0             	sub    %r14,%rax
     3b8:	48 c1 f8 03          	sar    $0x3,%rax
     3bc:	48 0f af c1          	imul   %rcx,%rax
     3c0:	48 89 44 24 f8       	mov    %rax,-0x8(%rsp)
    for (size_t i = 0; i < lhs.size(); i++)
     3c5:	49 39 d6             	cmp    %rdx,%r14
     3c8:	0f 84 b7 00 00 00    	je     485 <_Z10opAddAs_dMRSt6vectorIS_IdSaIdEESaIS1_EERKS3_+0xf5>
	return *(this->_M_impl._M_start + __n);
     3ce:	4c 8b 3e             	mov    (%rsi),%r15
     3d1:	b8 01 00 00 00       	mov    $0x1,%eax
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
     3d6:	4d 8b 6f 08          	mov    0x8(%r15),%r13
     3da:	4d 8b 27             	mov    (%r15),%r12
     3dd:	4c 89 eb             	mov    %r13,%rbx
     3e0:	4c 29 e3             	sub    %r12,%rbx
     3e3:	48 89 de             	mov    %rbx,%rsi
     3e6:	48 c1 fe 03          	sar    $0x3,%rsi
     3ea:	4d 39 e5             	cmp    %r12,%r13
     3ed:	48 0f 45 c6          	cmovne %rsi,%rax
     3f1:	45 31 c0             	xor    %r8d,%r8d
     3f4:	49 89 c1             	mov    %rax,%r9
     3f7:	48 89 c7             	mov    %rax,%rdi
     3fa:	48 89 44 24 e8       	mov    %rax,-0x18(%rsp)
     3ff:	83 e0 03             	and    $0x3,%eax
     402:	48 89 44 24 f0       	mov    %rax,-0x10(%rsp)
     407:	48 83 e7 fc          	and    $0xfffffffffffffffc,%rdi
     40b:	49 c1 e9 02          	shr    $0x2,%r9
     40f:	48 89 7c 24 e0       	mov    %rdi,-0x20(%rsp)
     414:	49 c1 e1 05          	shl    $0x5,%r9
     418:	31 ff                	xor    %edi,%edi
     41a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        for (size_t j = 0; j < rhs[0].size(); j++)
     420:	4d 39 e5             	cmp    %r12,%r13
     423:	74 4b                	je     470 <_Z10opAddAs_dMRSt6vectorIS_IdSaIdEESaIS1_EERKS3_+0xe0>
	return *(this->_M_impl._M_start + __n);
     425:	49 8b 14 3f          	mov    (%r15,%rdi,1),%rdx
	return *(this->_M_impl._M_start + __n);
     429:	49 8b 04 3e          	mov    (%r14,%rdi,1),%rax
     42d:	48 83 fb 08          	cmp    $0x8,%rbx
     431:	0f 86 d9 00 00 00    	jbe    510 <_Z10opAddAs_dMRSt6vectorIS_IdSaIdEESaIS1_EERKS3_+0x180>
     437:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
     43b:	49 89 c2             	mov    %rax,%r10
     43e:	49 29 ca             	sub    %rcx,%r10
     441:	31 c9                	xor    %ecx,%ecx
     443:	49 83 fa 10          	cmp    $0x10,%r10
     447:	77 4f                	ja     498 <_Z10opAddAs_dMRSt6vectorIS_IdSaIdEESaIS1_EERKS3_+0x108>
     449:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            lhs[i][j] += rhs[i][j];
     450:	c5 fb 10 04 c8       	vmovsd (%rax,%rcx,8),%xmm0
     455:	c5 fb 58 04 ca       	vaddsd (%rdx,%rcx,8),%xmm0,%xmm0
     45a:	c5 fb 11 04 c8       	vmovsd %xmm0,(%rax,%rcx,8)
        for (size_t j = 0; j < rhs[0].size(); j++)
     45f:	48 83 c1 01          	add    $0x1,%rcx
     463:	48 39 f1             	cmp    %rsi,%rcx
     466:	72 e8                	jb     450 <_Z10opAddAs_dMRSt6vectorIS_IdSaIdEESaIS1_EERKS3_+0xc0>
     468:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
     46f:	00 
    for (size_t i = 0; i < lhs.size(); i++)
     470:	48 8b 44 24 f8       	mov    -0x8(%rsp),%rax
     475:	49 83 c0 01          	add    $0x1,%r8
     479:	48 83 c7 18          	add    $0x18,%rdi
     47d:	49 39 c0             	cmp    %rax,%r8
     480:	72 9e                	jb     420 <_Z10opAddAs_dMRSt6vectorIS_IdSaIdEESaIS1_EERKS3_+0x90>
     482:	c5 f8 77             	vzeroupper 
}
     485:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
     489:	5b                   	pop    %rbx
     48a:	41 5c                	pop    %r12
     48c:	41 5d                	pop    %r13
     48e:	41 5e                	pop    %r14
     490:	41 5f                	pop    %r15
     492:	5d                   	pop    %rbp
     493:	c3                   	ret    
     494:	0f 1f 40 00          	nopl   0x0(%rax)
     498:	48 83 fb 18          	cmp    $0x18,%rbx
     49c:	76 79                	jbe    517 <_Z10opAddAs_dMRSt6vectorIS_IdSaIdEESaIS1_EERKS3_+0x187>
     49e:	66 90                	xchg   %ax,%ax
            lhs[i][j] += rhs[i][j];
     4a0:	c5 fd 10 0c 0a       	vmovupd (%rdx,%rcx,1),%ymm1
     4a5:	c5 f5 58 04 08       	vaddpd (%rax,%rcx,1),%ymm1,%ymm0
     4aa:	c5 fd 11 04 08       	vmovupd %ymm0,(%rax,%rcx,1)
      size() const _GLIBCXX_NOEXCEPT
     4af:	48 83 c1 20          	add    $0x20,%rcx
     4b3:	4c 39 c9             	cmp    %r9,%rcx
     4b6:	75 e8                	jne    4a0 <_Z10opAddAs_dMRSt6vectorIS_IdSaIdEESaIS1_EERKS3_+0x110>
     4b8:	48 83 7c 24 f0 00    	cmpq   $0x0,-0x10(%rsp)
     4be:	74 b0                	je     470 <_Z10opAddAs_dMRSt6vectorIS_IdSaIdEESaIS1_EERKS3_+0xe0>
        for (size_t j = 0; j < rhs[0].size(); j++)
     4c0:	48 8b 4c 24 e0       	mov    -0x20(%rsp),%rcx
     4c5:	4c 8b 54 24 e8       	mov    -0x18(%rsp),%r10
     4ca:	49 29 ca             	sub    %rcx,%r10
     4cd:	49 83 fa 01          	cmp    $0x1,%r10
     4d1:	74 20                	je     4f3 <_Z10opAddAs_dMRSt6vectorIS_IdSaIdEESaIS1_EERKS3_+0x163>
     4d3:	4c 8d 1c c8          	lea    (%rax,%rcx,8),%r11
            lhs[i][j] += rhs[i][j];
     4d7:	c5 f9 10 14 ca       	vmovupd (%rdx,%rcx,8),%xmm2
     4dc:	c4 c1 69 58 03       	vaddpd (%r11),%xmm2,%xmm0
     4e1:	c4 c1 79 11 03       	vmovupd %xmm0,(%r11)
     4e6:	41 f6 c2 01          	test   $0x1,%r10b
     4ea:	74 84                	je     470 <_Z10opAddAs_dMRSt6vectorIS_IdSaIdEESaIS1_EERKS3_+0xe0>
     4ec:	49 83 e2 fe          	and    $0xfffffffffffffffe,%r10
     4f0:	4c 01 d1             	add    %r10,%rcx
	return *(this->_M_impl._M_start + __n);
     4f3:	48 8d 04 c8          	lea    (%rax,%rcx,8),%rax
     4f7:	c5 fb 10 00          	vmovsd (%rax),%xmm0
     4fb:	c5 fb 58 04 ca       	vaddsd (%rdx,%rcx,8),%xmm0,%xmm0
     500:	c5 fb 11 00          	vmovsd %xmm0,(%rax)
      size() const _GLIBCXX_NOEXCEPT
     504:	e9 67 ff ff ff       	jmp    470 <_Z10opAddAs_dMRSt6vectorIS_IdSaIdEESaIS1_EERKS3_+0xe0>
     509:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	return *(this->_M_impl._M_start + __n);
     510:	31 c9                	xor    %ecx,%ecx
     512:	e9 39 ff ff ff       	jmp    450 <_Z10opAddAs_dMRSt6vectorIS_IdSaIdEESaIS1_EERKS3_+0xc0>
        for (size_t j = 0; j < rhs[0].size(); j++)
     517:	31 c9                	xor    %ecx,%ecx
     519:	eb aa                	jmp    4c5 <_Z10opAddAs_dMRSt6vectorIS_IdSaIdEESaIS1_EERKS3_+0x135>
     51b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000000520 <_Z14opAddAs_dM_noVRSt6vectorIS_IdSaIdEESaIS1_EERKS3_>:

    return res;
}
//__attribute__((optimize("no-tree-vectorize")))
__attribute__((target("no-avx")))
void opAddAs_dM_noV(doubleMtrx & lhs, const doubleMtrx & rhs) {
     520:	55                   	push   %rbp
     521:	48 89 f2             	mov    %rsi,%rdx
     524:	53                   	push   %rbx
     525:	48 8b 1f             	mov    (%rdi),%rbx
    for (size_t i = 0; i < lhs.size(); i++)
     528:	48 8b 77 08          	mov    0x8(%rdi),%rsi
     52c:	48 89 df             	mov    %rbx,%rdi
     52f:	e8 1c fb ff ff       	call   50 <_ZNKSt6vectorIS_IdSaIdEESaIS1_EE4sizeEv.isra.0>
     534:	48 85 c0             	test   %rax,%rax
     537:	74 78                	je     5b1 <_Z14opAddAs_dM_noVRSt6vectorIS_IdSaIdEESaIS1_EERKS3_+0x91>
     539:	48 8b 2a             	mov    (%rdx),%rbp
        for (size_t j = 0; j < rhs[0].size(); j++)
     53c:	31 f6                	xor    %esi,%esi
     53e:	49 89 c3             	mov    %rax,%r11
     541:	48 89 ef             	mov    %rbp,%rdi
     544:	e8 37 fb ff ff       	call   80 <_ZNKSt6vectorIS_IdSaIdEESaIS1_EEixEm.isra.0>
     549:	48 8b 70 08          	mov    0x8(%rax),%rsi
     54d:	48 8b 38             	mov    (%rax),%rdi
     550:	e8 eb fa ff ff       	call   40 <_ZNKSt6vectorIdSaIdEE4sizeEv.isra.0>
     555:	49 89 c1             	mov    %rax,%r9
     558:	48 85 c0             	test   %rax,%rax
     55b:	74 54                	je     5b1 <_Z14opAddAs_dM_noVRSt6vectorIS_IdSaIdEESaIS1_EERKS3_+0x91>
    for (size_t i = 0; i < lhs.size(); i++)
     55d:	45 31 d2             	xor    %r10d,%r10d
            lhs[i][j] += rhs[i][j];
     560:	4c 89 d6             	mov    %r10,%rsi
     563:	48 89 ef             	mov    %rbp,%rdi
        for (size_t j = 0; j < rhs[0].size(); j++)
     566:	31 d2                	xor    %edx,%edx
            lhs[i][j] += rhs[i][j];
     568:	e8 13 fb ff ff       	call   80 <_ZNKSt6vectorIS_IdSaIdEESaIS1_EEixEm.isra.0>
     56d:	48 89 df             	mov    %rbx,%rdi
     570:	4c 8b 00             	mov    (%rax),%r8
     573:	e8 b8 fa ff ff       	call   30 <_ZNSt6vectorIS_IdSaIdEESaIS1_EEixEm.isra.0>
     578:	48 8b 08             	mov    (%rax),%rcx
     57b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
     580:	48 89 d6             	mov    %rdx,%rsi
     583:	4c 89 c7             	mov    %r8,%rdi
        for (size_t j = 0; j < rhs[0].size(); j++)
     586:	48 83 c2 01          	add    $0x1,%rdx
            lhs[i][j] += rhs[i][j];
     58a:	e8 e1 fa ff ff       	call   70 <_ZNKSt6vectorIdSaIdEEixEm.isra.0>
     58f:	48 89 cf             	mov    %rcx,%rdi
     592:	f2 0f 10 00          	movsd  (%rax),%xmm0
     596:	e8 85 fa ff ff       	call   20 <_ZNSt6vectorIdSaIdEEixEm.isra.0>
     59b:	f2 0f 58 00          	addsd  (%rax),%xmm0
     59f:	f2 0f 11 00          	movsd  %xmm0,(%rax)
        for (size_t j = 0; j < rhs[0].size(); j++)
     5a3:	49 39 d1             	cmp    %rdx,%r9
     5a6:	75 d8                	jne    580 <_Z14opAddAs_dM_noVRSt6vectorIS_IdSaIdEESaIS1_EERKS3_+0x60>
    for (size_t i = 0; i < lhs.size(); i++)
     5a8:	49 83 c2 01          	add    $0x1,%r10
     5ac:	4d 39 d3             	cmp    %r10,%r11
     5af:	75 af                	jne    560 <_Z14opAddAs_dM_noVRSt6vectorIS_IdSaIdEESaIS1_EERKS3_+0x40>
}
     5b1:	5b                   	pop    %rbx
     5b2:	5d                   	pop    %rbp
     5b3:	c3                   	ret    
     5b4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
     5bb:	00 00 00 00 
     5bf:	90                   	nop

00000000000005c0 <_Z14opAddAs_dM_mnlRSt6vectorIS_IdSaIdEESaIS1_EERKS3_>:
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
     5c0:	48 8b 17             	mov    (%rdi),%rdx

    return res;
}
//__attribute__((optimize("no-tree-vectorize")))
__attribute__((target("avx")))
void opAddAs_dM_mnl(doubleMtrx & lhs, const doubleMtrx & rhs) {
     5c3:	49 89 f0             	mov    %rsi,%r8
    for (size_t i = 0; i < lhs.size(); i++) {
     5c6:	48 3b 57 08          	cmp    0x8(%rdi),%rdx
     5ca:	0f 84 aa 00 00 00    	je     67a <_Z14opAddAs_dM_mnlRSt6vectorIS_IdSaIdEESaIS1_EERKS3_+0xba>
     5d0:	49 8b 08             	mov    (%r8),%rcx
     5d3:	31 f6                	xor    %esi,%esi
     5d5:	45 31 c9             	xor    %r9d,%r9d
     5d8:	49 ba ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%r10
     5df:	aa aa aa 
     5e2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        for (size_t j = 0; j < rhs[0].size(); j += 4) {
     5e8:	48 8b 01             	mov    (%rcx),%rax
     5eb:	48 39 41 08          	cmp    %rax,0x8(%rcx)
     5ef:	74 65                	je     656 <_Z14opAddAs_dM_mnlRSt6vectorIS_IdSaIdEESaIS1_EERKS3_+0x96>
	return *(this->_M_impl._M_start + __n);
     5f1:	48 8b 04 32          	mov    (%rdx,%rsi,1),%rax
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_loadu_pd (double const *__P)
{
  return *(__m256d_u *)__P;
     5f5:	48 8b 14 31          	mov    (%rcx,%rsi,1),%rdx
  return (__m256d) ((__v4df)__A + (__v4df)__B);
     5f9:	c5 fd 10 12          	vmovupd (%rdx),%ymm2
     5fd:	c5 ed 58 00          	vaddpd (%rax),%ymm2,%ymm0
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_storeu_pd (double *__P, __m256d __A)
{
  *(__m256d_u *)__P = __A;
     601:	c5 fd 11 00          	vmovupd %ymm0,(%rax)
	return *(this->_M_impl._M_start + __n);
     605:	49 8b 08             	mov    (%r8),%rcx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
     608:	48 8b 41 08          	mov    0x8(%rcx),%rax
     60c:	48 2b 01             	sub    (%rcx),%rax
     60f:	48 83 f8 20          	cmp    $0x20,%rax
     613:	76 3e                	jbe    653 <_Z14opAddAs_dM_mnlRSt6vectorIS_IdSaIdEESaIS1_EERKS3_+0x93>
     615:	ba 04 00 00 00       	mov    $0x4,%edx
     61a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	return *(this->_M_impl._M_start + __n);
     620:	48 8b 07             	mov    (%rdi),%rax
  return *(__m256d_u *)__P;
     623:	48 8b 0c 31          	mov    (%rcx,%rsi,1),%rcx
     627:	48 8b 04 30          	mov    (%rax,%rsi,1),%rax
  return (__m256d) ((__v4df)__A + (__v4df)__B);
     62b:	c5 fd 10 0c d1       	vmovupd (%rcx,%rdx,8),%ymm1
     630:	48 8d 04 d0          	lea    (%rax,%rdx,8),%rax
     634:	48 83 c2 04          	add    $0x4,%rdx
     638:	c5 f5 58 00          	vaddpd (%rax),%ymm1,%ymm0
  *(__m256d_u *)__P = __A;
     63c:	c5 fd 11 00          	vmovupd %ymm0,(%rax)
	return *(this->_M_impl._M_start + __n);
     640:	49 8b 08             	mov    (%r8),%rcx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
     643:	48 8b 41 08          	mov    0x8(%rcx),%rax
     647:	48 2b 01             	sub    (%rcx),%rax
     64a:	48 c1 f8 03          	sar    $0x3,%rax
     64e:	48 39 c2             	cmp    %rax,%rdx
     651:	72 cd                	jb     620 <_Z14opAddAs_dM_mnlRSt6vectorIS_IdSaIdEESaIS1_EERKS3_+0x60>
     653:	48 8b 17             	mov    (%rdi),%rdx
     656:	48 8b 47 08          	mov    0x8(%rdi),%rax
    for (size_t i = 0; i < lhs.size(); i++) {
     65a:	49 83 c1 01          	add    $0x1,%r9
     65e:	48 83 c6 18          	add    $0x18,%rsi
     662:	48 29 d0             	sub    %rdx,%rax
     665:	48 c1 f8 03          	sar    $0x3,%rax
     669:	49 0f af c2          	imul   %r10,%rax
     66d:	49 39 c1             	cmp    %rax,%r9
     670:	0f 82 72 ff ff ff    	jb     5e8 <_Z14opAddAs_dM_mnlRSt6vectorIS_IdSaIdEESaIS1_EERKS3_+0x28>
     676:	c5 f8 77             	vzeroupper 
            auto a = _mm256_loadu_pd(&rhs[i][j]);
            sum = _mm256_add_pd(sum, a);
            _mm256_storeu_pd(&lhs[i][j], sum);
        }
    }
}
     679:	c3                   	ret    
     67a:	c3                   	ret    
     67b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000000680 <_Z8randMtrxRSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE>:
void randMtrx(mtrxMtrx &mtrx) {
     680:	41 57                	push   %r15
     682:	41 56                	push   %r14
     684:	41 55                	push   %r13
     686:	41 54                	push   %r12
     688:	55                   	push   %rbp
     689:	53                   	push   %rbx
     68a:	48 89 fb             	mov    %rdi,%rbx
     68d:	48 81 ec 58 27 00 00 	sub    $0x2758,%rsp
	_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
	: allocator_type(__a), _M_p(__dat) { }
#else
	_GLIBCXX20_CONSTEXPR
	_Alloc_hider(pointer __dat, const _Alloc& __a)
	: allocator_type(__a), _M_p(__dat) { }
     694:	48 8d ac 24 d0 13 00 	lea    0x13d0(%rsp),%rbp
     69b:	00 
    /** The type of the generated random value. */
    typedef unsigned int result_type;

    // constructors, destructors and member functions

    random_device() { _M_init("default"); }
     69c:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
	  return __s1;
#if __cplusplus >= 202002L
	if (std::__is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
     6a1:	c7 84 24 d0 13 00 00 	movl   $0x61666564,0x13d0(%rsp)
     6a8:	64 65 66 61 
     6ac:	48 8d b4 24 c0 13 00 	lea    0x13c0(%rsp),%rsi
     6b3:	00 
     6b4:	48 89 ac 24 c0 13 00 	mov    %rbp,0x13c0(%rsp)
     6bb:	00 
     6bc:	c7 84 24 d3 13 00 00 	movl   $0x746c7561,0x13d3(%rsp)
     6c3:	61 75 6c 74 
      { _M_dataplus._M_p = __p; }

      _GLIBCXX20_CONSTEXPR
      void
      _M_length(size_type __length)
      { _M_string_length = __length; }
     6c7:	48 c7 84 24 c8 13 00 	movq   $0x7,0x13c8(%rsp)
     6ce:	00 07 00 00 00 
	__c1 = __c2;
     6d3:	c6 84 24 d7 13 00 00 	movb   $0x0,0x13d7(%rsp)
     6da:	00 
     6db:	e8 00 00 00 00       	call   6e0 <_Z8randMtrxRSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE+0x60>

      _GLIBCXX20_CONSTEXPR
      pointer
      _M_data() const
      { return _M_dataplus._M_p; }
     6e0:	48 8b bc 24 c0 13 00 	mov    0x13c0(%rsp),%rdi
     6e7:	00 

      _GLIBCXX20_CONSTEXPR
      void
      _M_dispose()
      {
	if (!_M_is_local())
     6e8:	48 39 ef             	cmp    %rbp,%rdi
     6eb:	74 11                	je     6fe <_Z8randMtrxRSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE+0x7e>
      }

      _GLIBCXX20_CONSTEXPR
      void
      _M_destroy(size_type __size) throw()
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
     6ed:	48 8b 84 24 d0 13 00 	mov    0x13d0(%rsp),%rax
     6f4:	00 
     6f5:	48 8d 70 01          	lea    0x1(%rax),%rsi
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
     6f9:	e8 00 00 00 00       	call   6fe <_Z8randMtrxRSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE+0x7e>
#endif
    }

    result_type
    operator()()
    { return this->_M_getval(); }
     6fe:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
     703:	e8 00 00 00 00       	call   708 <_Z8randMtrxRSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE+0x88>
    std::mt19937 generator{device()};
     708:	89 c1                	mov    %eax,%ecx
    seed(result_type __sd)
    {
      _M_x[0] = __detail::__mod<_UIntType,
	__detail::_Shift<_UIntType, __w>::__value>(__sd);

      for (size_t __i = 1; __i < state_size; ++__i)
     70a:	ba 01 00 00 00       	mov    $0x1,%edx
      _M_x[0] = __detail::__mod<_UIntType,
     70f:	48 89 8c 24 c0 13 00 	mov    %rcx,0x13c0(%rsp)
     716:	00 
	{
	  _UIntType __x = _M_x[__i - 1];
	  __x ^= __x >> (__w - 2);
     717:	48 89 c8             	mov    %rcx,%rax
     71a:	48 c1 e8 1e          	shr    $0x1e,%rax
     71e:	48 31 c8             	xor    %rcx,%rax
	  __x *= __f;
     721:	48 69 c0 65 89 07 6c 	imul   $0x6c078965,%rax,%rax
	    __res %= __m;
     728:	8d 0c 02             	lea    (%rdx,%rax,1),%ecx
	  __x += __detail::__mod<_UIntType, __n>(__i);
	  _M_x[__i] = __detail::__mod<_UIntType,
     72b:	48 89 8c d4 c0 13 00 	mov    %rcx,0x13c0(%rsp,%rdx,8)
     732:	00 
      for (size_t __i = 1; __i < state_size; ++__i)
     733:	48 83 c2 01          	add    $0x1,%rdx
     737:	48 81 fa 70 02 00 00 	cmp    $0x270,%rdx
     73e:	75 d7                	jne    717 <_Z8randMtrxRSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE+0x97>
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
     740:	48 8b 43 08          	mov    0x8(%rbx),%rax
     744:	48 8b 0b             	mov    (%rbx),%rcx
     747:	c5 e0 57 db          	vxorps %xmm3,%xmm3,%xmm3
	    __detail::_Shift<_UIntType, __w>::__value>(__x);
	}
      _M_p = state_size;
     74b:	48 c7 84 24 40 27 00 	movq   $0x270,0x2740(%rsp)
     752:	00 70 02 00 00 
     757:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    for (auto &i: mtrx)
     75c:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
     761:	48 39 c8             	cmp    %rcx,%rax
     764:	0f 84 b8 01 00 00    	je     922 <_Z8randMtrxRSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE+0x2a2>
     76a:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
     76f:	48 8b 48 08          	mov    0x8(%rax),%rcx
     773:	4c 8b 28             	mov    (%rax),%r13
     776:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
        for (auto &j: i)
     77b:	4c 39 e9             	cmp    %r13,%rcx
     77e:	0f 84 88 01 00 00    	je     90c <_Z8randMtrxRSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE+0x28c>
     784:	4d 8b 65 08          	mov    0x8(%r13),%r12
            for (auto &k: j)
     788:	49 8b 6d 00          	mov    0x0(%r13),%rbp
     78c:	d9 05 00 00 00 00    	flds   0x0(%rip)        # 792 <_Z8randMtrxRSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE+0x112>
     792:	4c 39 e5             	cmp    %r12,%rbp
     795:	0f 84 60 01 00 00    	je     8fb <_Z8randMtrxRSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE+0x27b>
     79b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
     7a0:	48 8b 55 00          	mov    0x0(%rbp),%rdx
     7a4:	48 8b 5d 08          	mov    0x8(%rbp),%rbx
                for (auto &l: k)
     7a8:	48 39 d3             	cmp    %rdx,%rbx
     7ab:	0f 84 39 01 00 00    	je     8ea <_Z8randMtrxRSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE+0x26a>
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
			    __s, __b, __t, __c, __l, __f>::
    operator()()
    {
      // Reload the vector - cost is O(n) amortized over n calls.
      if (_M_p >= state_size)
     7b1:	48 8b b4 24 40 27 00 	mov    0x2740(%rsp),%rsi
     7b8:	00 
     7b9:	c5 fb 10 15 00 00 00 	vmovsd 0x0(%rip),%xmm2        # 7c1 <_Z8randMtrxRSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE+0x141>
     7c0:	00 
     7c1:	49 89 d7             	mov    %rdx,%r15
     7c4:	0f 1f 40 00          	nopl   0x0(%rax)
	_M_gen_rand();

      // Calculate o(x(i)).
      result_type __z = _M_x[_M_p++];
     7c8:	48 89 f0             	mov    %rsi,%rax
     7cb:	41 be 02 00 00 00    	mov    $0x2,%r14d
			    - static_cast<long double>(__urng.min()) + 1.0L;
      const size_t __log2r = std::log(__r) / std::log(2.0L);
      const size_t __m = std::max<size_t>(1UL,
					  (__b + __log2r - 1UL) / __log2r);
      _RealType __ret;
      _RealType __sum = _RealType(0);
     7d1:	c5 f1 57 c9          	vxorpd %xmm1,%xmm1,%xmm1
      _RealType __tmp = _RealType(1);
     7d5:	c5 fb 11 54 24 08    	vmovsd %xmm2,0x8(%rsp)
      if (_M_p >= state_size)
     7db:	48 81 fe 6f 02 00 00 	cmp    $0x26f,%rsi
     7e2:	0f 87 90 00 00 00    	ja     878 <_Z8randMtrxRSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE+0x1f8>
      result_type __z = _M_x[_M_p++];
     7e8:	48 8d 70 01          	lea    0x1(%rax),%rsi
     7ec:	48 8b 84 c4 c0 13 00 	mov    0x13c0(%rsp,%rax,8),%rax
     7f3:	00 
     7f4:	48 89 b4 24 40 27 00 	mov    %rsi,0x2740(%rsp)
     7fb:	00 
      __z ^= (__z >> __u) & __d;
     7fc:	48 89 c7             	mov    %rax,%rdi
     7ff:	48 c1 ef 0b          	shr    $0xb,%rdi
     803:	89 ff                	mov    %edi,%edi
     805:	48 31 f8             	xor    %rdi,%rax
      __z ^= (__z << __s) & __b;
     808:	48 89 c7             	mov    %rax,%rdi
     80b:	48 c1 e7 07          	shl    $0x7,%rdi
     80f:	81 e7 80 56 2c 9d    	and    $0x9d2c5680,%edi
     815:	48 31 f8             	xor    %rdi,%rax
      __z ^= (__z << __t) & __c;
     818:	48 89 c7             	mov    %rax,%rdi
     81b:	48 c1 e7 0f          	shl    $0xf,%rdi
     81f:	81 e7 00 00 c6 ef    	and    $0xefc60000,%edi
     825:	48 31 f8             	xor    %rdi,%rax
      __z ^= (__z >> __l);
     828:	48 89 c7             	mov    %rax,%rdi
     82b:	48 c1 ef 12          	shr    $0x12,%rdi
      for (size_t __k = __m; __k != 0; --__k)
	{
	  __sum += _RealType(__urng() - __urng.min()) * __tmp;
     82f:	48 31 f8             	xor    %rdi,%rax
     832:	0f 88 08 01 00 00    	js     940 <_Z8randMtrxRSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE+0x2c0>
     838:	c4 e1 e3 2a c0       	vcvtsi2sd %rax,%xmm3,%xmm0
     83d:	c5 fb 59 44 24 08    	vmulsd 0x8(%rsp),%xmm0,%xmm0
	  __tmp *= __r;
     843:	d9 c0                	fld    %st(0)
     845:	dc 4c 24 08          	fmull  0x8(%rsp)
	  __sum += _RealType(__urng() - __urng.min()) * __tmp;
     849:	c5 f3 58 c8          	vaddsd %xmm0,%xmm1,%xmm1
	  __tmp *= __r;
     84d:	dd 5c 24 08          	fstpl  0x8(%rsp)
      for (size_t __k = __m; __k != 0; --__k)
     851:	41 83 fe 01          	cmp    $0x1,%r14d
     855:	74 69                	je     8c0 <_Z8randMtrxRSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE+0x240>
     857:	41 be 01 00 00 00    	mov    $0x1,%r14d
      result_type __z = _M_x[_M_p++];
     85d:	48 89 f0             	mov    %rsi,%rax
      if (_M_p >= state_size)
     860:	48 81 fe 6f 02 00 00 	cmp    $0x26f,%rsi
     867:	0f 86 7b ff ff ff    	jbe    7e8 <_Z8randMtrxRSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE+0x168>
     86d:	dd d8                	fstp   %st(0)
     86f:	eb 09                	jmp    87a <_Z8randMtrxRSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE+0x1fa>
     871:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
     878:	dd d8                	fstp   %st(0)
	_M_gen_rand();
     87a:	48 8d bc 24 c0 13 00 	lea    0x13c0(%rsp),%rdi
     881:	00 
     882:	c5 fb 11 4c 24 10    	vmovsd %xmm1,0x10(%rsp)
     888:	e8 00 00 00 00       	call   88d <_Z8randMtrxRSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE+0x20d>
      result_type __z = _M_x[_M_p++];
     88d:	48 8b 0d 00 00 00 00 	mov    0x0(%rip),%rcx        # 894 <_Z8randMtrxRSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE+0x214>
     894:	d9 05 00 00 00 00    	flds   0x0(%rip)        # 89a <_Z8randMtrxRSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE+0x21a>
     89a:	c5 e0 57 db          	vxorps %xmm3,%xmm3,%xmm3
     89e:	48 8b 84 24 40 27 00 	mov    0x2740(%rsp),%rax
     8a5:	00 
     8a6:	c5 fb 10 4c 24 10    	vmovsd 0x10(%rsp),%xmm1
     8ac:	c4 e1 f9 6e d1       	vmovq  %rcx,%xmm2
     8b1:	e9 32 ff ff ff       	jmp    7e8 <_Z8randMtrxRSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE+0x168>
     8b6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
     8bd:	00 00 00 
	}
      __ret = __sum / __tmp;
     8c0:	c5 f3 5e 4c 24 08    	vdivsd 0x8(%rsp),%xmm1,%xmm1
      if (__builtin_expect(__ret >= _RealType(1), 0))
     8c6:	c5 f9 2f ca          	vcomisd %xmm2,%xmm1
     8ca:	0f 83 90 00 00 00    	jae    960 <_Z8randMtrxRSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE+0x2e0>
	operator()(_UniformRandomNumberGenerator& __urng,
		   const param_type& __p)
	{
	  __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
	    __aurng(__urng);
	  return (__aurng() * (__p.b() - __p.a())) + __p.a();
     8d0:	c5 f9 57 c0          	vxorpd %xmm0,%xmm0,%xmm0
     8d4:	c5 f3 58 c8          	vaddsd %xmm0,%xmm1,%xmm1
                    l = distribution(generator);
     8d8:	c4 c1 7b 11 0f       	vmovsd %xmm1,(%r15)
                for (auto &l: k)
     8dd:	49 83 c7 08          	add    $0x8,%r15
     8e1:	4c 39 fb             	cmp    %r15,%rbx
     8e4:	0f 85 de fe ff ff    	jne    7c8 <_Z8randMtrxRSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE+0x148>
            for (auto &k: j)
     8ea:	48 83 c5 18          	add    $0x18,%rbp
     8ee:	49 39 ec             	cmp    %rbp,%r12
     8f1:	0f 85 a9 fe ff ff    	jne    7a0 <_Z8randMtrxRSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE+0x120>
     8f7:	dd d8                	fstp   %st(0)
     8f9:	eb 02                	jmp    8fd <_Z8randMtrxRSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE+0x27d>
     8fb:	dd d8                	fstp   %st(0)
        for (auto &j: i)
     8fd:	49 83 c5 18          	add    $0x18,%r13
     901:	4c 39 6c 24 18       	cmp    %r13,0x18(%rsp)
     906:	0f 85 78 fe ff ff    	jne    784 <_Z8randMtrxRSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE+0x104>
    for (auto &i: mtrx)
     90c:	48 83 44 24 20 18    	addq   $0x18,0x20(%rsp)
     912:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
     917:	48 39 44 24 28       	cmp    %rax,0x28(%rsp)
     91c:	0f 85 48 fe ff ff    	jne    76a <_Z8randMtrxRSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE+0xea>
    { _M_fini(); }
     922:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
     927:	e8 00 00 00 00       	call   92c <_Z8randMtrxRSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE+0x2ac>
}
     92c:	48 81 c4 58 27 00 00 	add    $0x2758,%rsp
     933:	5b                   	pop    %rbx
     934:	5d                   	pop    %rbp
     935:	41 5c                	pop    %r12
     937:	41 5d                	pop    %r13
     939:	41 5e                	pop    %r14
     93b:	41 5f                	pop    %r15
     93d:	c3                   	ret    
     93e:	66 90                	xchg   %ax,%ax
	  __sum += _RealType(__urng() - __urng.min()) * __tmp;
     940:	48 89 c7             	mov    %rax,%rdi
     943:	83 e0 01             	and    $0x1,%eax
     946:	48 d1 ef             	shr    %rdi
     949:	48 09 c7             	or     %rax,%rdi
     94c:	c4 e1 e3 2a c7       	vcvtsi2sd %rdi,%xmm3,%xmm0
     951:	c5 fb 58 c0          	vaddsd %xmm0,%xmm0,%xmm0
     955:	e9 e3 fe ff ff       	jmp    83d <_Z8randMtrxRSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE+0x1bd>
     95a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
     960:	c5 fb 10 0d 00 00 00 	vmovsd 0x0(%rip),%xmm1        # 968 <_Z8randMtrxRSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE+0x2e8>
     967:	00 
     968:	e9 6b ff ff ff       	jmp    8d8 <_Z8randMtrxRSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE+0x258>
      /**
       *  @brief  Destroy the string instance.
       */
      _GLIBCXX20_CONSTEXPR
      ~basic_string()
      { _M_dispose(); }
     96d:	48 89 c3             	mov    %rax,%rbx
     970:	e9 00 00 00 00       	jmp    975 <_Z8randMtrxRSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE+0x2f5>
     975:	48 89 c3             	mov    %rax,%rbx
     978:	e9 00 00 00 00       	jmp    97d <_Z8randMtrxRSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE+0x2fd>
     97d:	0f 1f 00             	nopl   (%rax)

0000000000000980 <_Z15opMltply_dM_noVRKSt6vectorIS_IdSaIdEESaIS1_EES5_>:
doubleMtrx opMltply_dM_noV(const doubleMtrx & lhs, const doubleMtrx & rhs) {
     980:	41 57                	push   %r15
     982:	41 56                	push   %r14
     984:	41 55                	push   %r13
     986:	41 54                	push   %r12
     988:	49 89 f4             	mov    %rsi,%r12
    doubleMtrx res (lhs.size(), vector<double>(rhs[0].size()));
     98b:	31 f6                	xor    %esi,%esi
doubleMtrx opMltply_dM_noV(const doubleMtrx & lhs, const doubleMtrx & rhs) {
     98d:	55                   	push   %rbp
     98e:	48 89 d5             	mov    %rdx,%rbp
     991:	53                   	push   %rbx
     992:	48 89 fb             	mov    %rdi,%rbx
     995:	48 83 ec 38          	sub    $0x38,%rsp
    doubleMtrx res (lhs.size(), vector<double>(rhs[0].size()));
     999:	48 8b 3a             	mov    (%rdx),%rdi
     99c:	48 8d 54 24 0e       	lea    0xe(%rsp),%rdx
     9a1:	e8 da f6 ff ff       	call   80 <_ZNKSt6vectorIS_IdSaIdEESaIS1_EEixEm.isra.0>
     9a6:	48 8b 70 08          	mov    0x8(%rax),%rsi
     9aa:	48 8b 38             	mov    (%rax),%rdi
     9ad:	e8 8e f6 ff ff       	call   40 <_ZNKSt6vectorIdSaIdEE4sizeEv.isra.0>
     9b2:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
     9b7:	48 89 c6             	mov    %rax,%rsi
     9ba:	e8 00 00 00 00       	call   9bf <_Z15opMltply_dM_noVRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x3f>
     9bf:	49 8b 74 24 08       	mov    0x8(%r12),%rsi
     9c4:	49 8b 3c 24          	mov    (%r12),%rdi
     9c8:	48 8d 4c 24 0f       	lea    0xf(%rsp),%rcx
     9cd:	48 8d 54 24 10       	lea    0x10(%rsp),%rdx
     9d2:	e8 79 f6 ff ff       	call   50 <_ZNKSt6vectorIS_IdSaIdEESaIS1_EE4sizeEv.isra.0>
     9d7:	48 89 df             	mov    %rbx,%rdi
     9da:	48 89 c6             	mov    %rax,%rsi
     9dd:	e8 00 00 00 00       	call   9e2 <_Z15opMltply_dM_noVRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x62>
     9e2:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
     9e7:	e8 00 00 00 00       	call   9ec <_Z15opMltply_dM_noVRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x6c>
    for (size_t i = 0; i < lhs.size(); i++) {
     9ec:	4d 8b 2c 24          	mov    (%r12),%r13
     9f0:	49 8b 74 24 08       	mov    0x8(%r12),%rsi
     9f5:	4c 89 ef             	mov    %r13,%rdi
     9f8:	e8 53 f6 ff ff       	call   50 <_ZNKSt6vectorIS_IdSaIdEESaIS1_EE4sizeEv.isra.0>
     9fd:	49 89 c0             	mov    %rax,%r8
     a00:	48 85 c0             	test   %rax,%rax
     a03:	0f 84 c6 00 00 00    	je     acf <_Z15opMltply_dM_noVRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x14f>
        for (size_t k = 0; k < lhs[0].size(); k++) {
     a09:	31 f6                	xor    %esi,%esi
    for (size_t i = 0; i < lhs.size(); i++) {
     a0b:	45 31 d2             	xor    %r10d,%r10d
        for (size_t k = 0; k < lhs[0].size(); k++) {
     a0e:	e8 6d f6 ff ff       	call   80 <_ZNKSt6vectorIS_IdSaIdEESaIS1_EEixEm.isra.0>
     a13:	48 8b 70 08          	mov    0x8(%rax),%rsi
     a17:	48 8b 38             	mov    (%rax),%rdi
     a1a:	e8 21 f6 ff ff       	call   40 <_ZNKSt6vectorIdSaIdEE4sizeEv.isra.0>
     a1f:	49 89 c4             	mov    %rax,%r12
     a22:	48 85 c0             	test   %rax,%rax
     a25:	0f 84 b6 00 00 00    	je     ae1 <_Z15opMltply_dM_noVRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x161>
     a2b:	4c 8b 5d 00          	mov    0x0(%rbp),%r11
     a2f:	90                   	nop
            for (size_t j = 0; j < rhs[0].size(); j++) {
     a30:	31 f6                	xor    %esi,%esi
     a32:	4c 89 df             	mov    %r11,%rdi
     a35:	e8 46 f6 ff ff       	call   80 <_ZNKSt6vectorIS_IdSaIdEESaIS1_EEixEm.isra.0>
     a3a:	48 8b 70 08          	mov    0x8(%rax),%rsi
     a3e:	48 8b 38             	mov    (%rax),%rdi
     a41:	e8 fa f5 ff ff       	call   40 <_ZNKSt6vectorIdSaIdEE4sizeEv.isra.0>
     a46:	49 89 c7             	mov    %rax,%r15
     a49:	48 85 c0             	test   %rax,%rax
     a4c:	74 74                	je     ac2 <_Z15opMltply_dM_noVRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x142>
     a4e:	4c 8b 33             	mov    (%rbx),%r14
        for (size_t k = 0; k < lhs[0].size(); k++) {
     a51:	31 ed                	xor    %ebp,%ebp
     a53:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
                res[i][j] += lhs[i][k] * rhs[k][j];
     a58:	4c 89 d6             	mov    %r10,%rsi
     a5b:	4c 89 ef             	mov    %r13,%rdi
     a5e:	e8 1d f6 ff ff       	call   80 <_ZNKSt6vectorIS_IdSaIdEESaIS1_EEixEm.isra.0>
     a63:	48 89 ee             	mov    %rbp,%rsi
     a66:	48 8b 38             	mov    (%rax),%rdi
     a69:	e8 02 f6 ff ff       	call   70 <_ZNKSt6vectorIdSaIdEEixEm.isra.0>
     a6e:	4c 89 df             	mov    %r11,%rdi
     a71:	48 89 c2             	mov    %rax,%rdx
     a74:	e8 07 f6 ff ff       	call   80 <_ZNKSt6vectorIS_IdSaIdEESaIS1_EEixEm.isra.0>
     a79:	4c 89 d6             	mov    %r10,%rsi
     a7c:	4c 89 f7             	mov    %r14,%rdi
     a7f:	4c 8b 08             	mov    (%rax),%r9
     a82:	e8 a9 f5 ff ff       	call   30 <_ZNSt6vectorIS_IdSaIdEESaIS1_EEixEm.isra.0>
            for (size_t j = 0; j < rhs[0].size(); j++) {
     a87:	31 f6                	xor    %esi,%esi
     a89:	48 8b 08             	mov    (%rax),%rcx
     a8c:	0f 1f 40 00          	nopl   0x0(%rax)
                res[i][j] += lhs[i][k] * rhs[k][j];
     a90:	4c 89 cf             	mov    %r9,%rdi
     a93:	f2 0f 10 02          	movsd  (%rdx),%xmm0
     a97:	e8 d4 f5 ff ff       	call   70 <_ZNKSt6vectorIdSaIdEEixEm.isra.0>
     a9c:	48 89 cf             	mov    %rcx,%rdi
     a9f:	f2 0f 59 00          	mulsd  (%rax),%xmm0
     aa3:	e8 78 f5 ff ff       	call   20 <_ZNSt6vectorIdSaIdEEixEm.isra.0>
            for (size_t j = 0; j < rhs[0].size(); j++) {
     aa8:	48 83 c6 01          	add    $0x1,%rsi
                res[i][j] += lhs[i][k] * rhs[k][j];
     aac:	f2 0f 58 00          	addsd  (%rax),%xmm0
     ab0:	f2 0f 11 00          	movsd  %xmm0,(%rax)
            for (size_t j = 0; j < rhs[0].size(); j++) {
     ab4:	49 39 f7             	cmp    %rsi,%r15
     ab7:	75 d7                	jne    a90 <_Z15opMltply_dM_noVRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x110>
        for (size_t k = 0; k < lhs[0].size(); k++) {
     ab9:	48 83 c5 01          	add    $0x1,%rbp
     abd:	49 39 ec             	cmp    %rbp,%r12
     ac0:	75 96                	jne    a58 <_Z15opMltply_dM_noVRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0xd8>
    for (size_t i = 0; i < lhs.size(); i++) {
     ac2:	49 83 c2 01          	add    $0x1,%r10
     ac6:	4d 39 d0             	cmp    %r10,%r8
     ac9:	0f 85 61 ff ff ff    	jne    a30 <_Z15opMltply_dM_noVRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0xb0>
}
     acf:	48 83 c4 38          	add    $0x38,%rsp
     ad3:	48 89 d8             	mov    %rbx,%rax
     ad6:	5b                   	pop    %rbx
     ad7:	5d                   	pop    %rbp
     ad8:	41 5c                	pop    %r12
     ada:	41 5d                	pop    %r13
     adc:	41 5e                	pop    %r14
     ade:	41 5f                	pop    %r15
     ae0:	c3                   	ret    
    for (size_t i = 0; i < lhs.size(); i++) {
     ae1:	49 83 c2 01          	add    $0x1,%r10
     ae5:	4d 39 d0             	cmp    %r10,%r8
     ae8:	74 e5                	je     acf <_Z15opMltply_dM_noVRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x14f>
     aea:	49 83 c2 01          	add    $0x1,%r10
     aee:	4d 39 d0             	cmp    %r10,%r8
     af1:	75 ee                	jne    ae1 <_Z15opMltply_dM_noVRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x161>
     af3:	eb da                	jmp    acf <_Z15opMltply_dM_noVRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x14f>
    doubleMtrx res (lhs.size(), vector<double>(rhs[0].size()));
     af5:	48 89 c3             	mov    %rax,%rbx
     af8:	e9 00 00 00 00       	jmp    afd <_Z15opMltply_dM_noVRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x17d>
     afd:	0f 1f 00             	nopl   (%rax)

0000000000000b00 <_Z15opMltply_dM_mnlRKSt6vectorIS_IdSaIdEESaIS1_EES5_>:
doubleMtrx opMltply_dM_mnl(const doubleMtrx & lhs, const doubleMtrx & rhs) {
     b00:	55                   	push   %rbp
     b01:	48 89 e5             	mov    %rsp,%rbp
     b04:	41 57                	push   %r15
     b06:	41 56                	push   %r14
     b08:	41 55                	push   %r13
     b0a:	49 89 d5             	mov    %rdx,%r13
     b0d:	41 54                	push   %r12
     b0f:	53                   	push   %rbx
     b10:	48 83 e4 e0          	and    $0xffffffffffffffe0,%rsp
     b14:	48 83 ec 40          	sub    $0x40,%rsp
	return *(this->_M_impl._M_start + __n);
     b18:	48 8b 02             	mov    (%rdx),%rax
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
     b1b:	4c 8b 78 08          	mov    0x8(%rax),%r15
     b1f:	4c 2b 38             	sub    (%rax),%r15

      // Called by constructors to check initial size.
      static _GLIBCXX20_CONSTEXPR size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
     b22:	48 b8 f8 ff ff ff ff 	movabs $0x7ffffffffffffff8,%rax
     b29:	ff ff 7f 
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
     b2c:	4c 89 fa             	mov    %r15,%rdx
     b2f:	48 c1 fa 03          	sar    $0x3,%rdx
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
     b33:	4c 39 f8             	cmp    %r15,%rax
     b36:	0f 82 18 02 00 00    	jb     d54 <_Z15opMltply_dM_mnlRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x254>
	: _M_start(), _M_finish(), _M_end_of_storage()
     b3c:	c5 f9 ef c0          	vpxor  %xmm0,%xmm0,%xmm0
     b40:	48 89 fb             	mov    %rdi,%rbx
     b43:	49 89 f4             	mov    %rsi,%r12
     b46:	c5 fa 7f 44 24 28    	vmovdqu %xmm0,0x28(%rsp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
     b4c:	48 85 d2             	test   %rdx,%rdx
     b4f:	0f 84 c3 01 00 00    	je     d18 <_Z15opMltply_dM_mnlRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x218>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
     b55:	4c 89 ff             	mov    %r15,%rdi
     b58:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
     b5d:	e8 00 00 00 00       	call   b62 <_Z15opMltply_dM_mnlRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x62>
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
     b62:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
	this->_M_impl._M_start = this->_M_allocate(__n);
     b67:	c4 e1 f9 6e e8       	vmovq  %rax,%xmm5
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
     b6c:	4e 8d 34 38          	lea    (%rax,%r15,1),%r14
     b70:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
	  if (__n > 0)
	    {
	      typename iterator_traits<_ForwardIterator>::value_type* __val
		= std::__addressof(*__first);
	      std::_Construct(__val);
	      ++__first;
     b75:	48 8d 78 08          	lea    0x8(%rax),%rdi
	this->_M_impl._M_start = this->_M_allocate(__n);
     b79:	c5 d1 6c c5          	vpunpcklqdq %xmm5,%xmm5,%xmm0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
     b7d:	4c 89 74 24 30       	mov    %r14,0x30(%rsp)
	  // Allow std::_Construct to be used in constant expressions.
	  std::construct_at(__p, std::forward<_Args>(__args)...);
	  return;
	}
#endif
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
     b82:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	this->_M_impl._M_start = this->_M_allocate(__n);
     b89:	c5 f9 7f 44 24 20    	vmovdqa %xmm0,0x20(%rsp)
     b8f:	48 83 fa 01          	cmp    $0x1,%rdx
     b93:	0f 84 a9 01 00 00    	je     d42 <_Z15opMltply_dM_mnlRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x242>
      for (; __first != __last; ++__first)
     b99:	49 39 fe             	cmp    %rdi,%r14
     b9c:	74 0b                	je     ba9 <_Z15opMltply_dM_mnlRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0xa9>
	*__first = __tmp;
     b9e:	49 8d 57 f8          	lea    -0x8(%r15),%rdx
     ba2:	31 f6                	xor    %esi,%esi
     ba4:	e8 00 00 00 00       	call   ba9 <_Z15opMltply_dM_mnlRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0xa9>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
     ba9:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
     bb0:	aa aa aa 
	this->_M_impl._M_finish =
     bb3:	4c 89 74 24 28       	mov    %r14,0x28(%rsp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
     bb8:	4d 8b 74 24 08       	mov    0x8(%r12),%r14
     bbd:	4d 2b 34 24          	sub    (%r12),%r14
     bc1:	4c 89 f2             	mov    %r14,%rdx
     bc4:	48 c1 fa 03          	sar    $0x3,%rdx
     bc8:	48 0f af d0          	imul   %rax,%rdx
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
     bcc:	48 b8 f8 ff ff ff ff 	movabs $0x7ffffffffffffff8,%rax
     bd3:	ff ff 7f 
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
     bd6:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
     bdb:	4c 39 f0             	cmp    %r14,%rax
     bde:	0f 82 66 01 00 00    	jb     d4a <_Z15opMltply_dM_mnlRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x24a>
	: _M_start(), _M_finish(), _M_end_of_storage()
     be4:	c5 f9 ef c0          	vpxor  %xmm0,%xmm0,%xmm0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
     be8:	48 83 7c 24 18 00    	cmpq   $0x0,0x18(%rsp)
	: _M_start(), _M_finish(), _M_end_of_storage()
     bee:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
     bf5:	00 
     bf6:	c5 fa 7f 03          	vmovdqu %xmm0,(%rbx)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
     bfa:	0f 84 3b 01 00 00    	je     d3b <_Z15opMltply_dM_mnlRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x23b>
     c00:	4c 89 f7             	mov    %r14,%rdi
     c03:	e8 00 00 00 00       	call   c08 <_Z15opMltply_dM_mnlRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x108>
     c08:	48 89 c7             	mov    %rax,%rdi
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
     c0b:	49 01 fe             	add    %rdi,%r14
	this->_M_impl._M_start = this->_M_allocate(__n);
     c0e:	c4 e1 f9 6e e7       	vmovq  %rdi,%xmm4
	{ return std::__do_uninit_fill_n(__first, __n, __x); }
     c13:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
     c18:	4c 89 73 10          	mov    %r14,0x10(%rbx)
	this->_M_impl._M_start = this->_M_allocate(__n);
     c1c:	c5 d9 6c c4          	vpunpcklqdq %xmm4,%xmm4,%xmm0
     c20:	4c 8d 74 24 20       	lea    0x20(%rsp),%r14
     c25:	c5 fa 7f 03          	vmovdqu %xmm0,(%rbx)
     c29:	4c 89 f2             	mov    %r14,%rdx
     c2c:	e8 00 00 00 00       	call   c31 <_Z15opMltply_dM_mnlRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x131>
	if (__p)
     c31:	48 83 7c 24 10 00    	cmpq   $0x0,0x10(%rsp)
	this->_M_impl._M_finish =
     c37:	48 89 43 08          	mov    %rax,0x8(%rbx)
	if (__p)
     c3b:	74 0d                	je     c4a <_Z15opMltply_dM_mnlRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x14a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
     c3d:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
     c42:	4c 89 fe             	mov    %r15,%rsi
     c45:	e8 00 00 00 00       	call   c4a <_Z15opMltply_dM_mnlRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x14a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
     c4a:	49 8b 14 24          	mov    (%r12),%rdx
    for (size_t i = 0; i < lhs.size(); i++) {
     c4e:	45 31 c0             	xor    %r8d,%r8d
     c51:	45 31 c9             	xor    %r9d,%r9d
     c54:	49 ba ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%r10
     c5b:	aa aa aa 
     c5e:	49 39 54 24 08       	cmp    %rdx,0x8(%r12)
     c63:	0f 84 9d 00 00 00    	je     d06 <_Z15opMltply_dM_mnlRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x206>
     c69:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
     c70:	48 8b 42 08          	mov    0x8(%rdx),%rax
     c74:	48 8b 0a             	mov    (%rdx),%rcx
        auto sum_r = _mm256_set1_pd(0.0);
     c77:	c5 e9 57 d2          	vxorpd %xmm2,%xmm2,%xmm2
        auto sum_l = _mm256_set1_pd(0.0);
     c7b:	c5 fd 28 ca          	vmovapd %ymm2,%ymm1
     c7f:	48 89 c6             	mov    %rax,%rsi
     c82:	48 29 ce             	sub    %rcx,%rsi
     c85:	48 c1 fe 03          	sar    $0x3,%rsi
        for (size_t k = 0; k < lhs[0].size(); k++) {
     c89:	48 39 c1             	cmp    %rax,%rcx
     c8c:	74 39                	je     cc7 <_Z15opMltply_dM_mnlRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x1c7>
	return *(this->_M_impl._M_start + __n);
     c8e:	4a 8b 3c 02          	mov    (%rdx,%r8,1),%rdi
        auto sum_r = _mm256_set1_pd(0.0);
     c92:	c5 e9 57 d2          	vxorpd %xmm2,%xmm2,%xmm2
     c96:	49 8b 55 00          	mov    0x0(%r13),%rdx
        for (size_t k = 0; k < lhs[0].size(); k++) {
     c9a:	31 c0                	xor    %eax,%eax
        auto sum_l = _mm256_set1_pd(0.0);
     c9c:	c5 fd 28 ca          	vmovapd %ymm2,%ymm1
     ca0:	48 8b 0a             	mov    (%rdx),%rcx

/* Create a vector with all elements equal to A.  */
extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_set1_pd (double __A)
{
  return __extension__ (__m256d){ __A, __A, __A, __A };
     ca3:	c4 e2 7d 19 04 c7    	vbroadcastsd (%rdi,%rax,8),%ymm0
        for (size_t k = 0; k < lhs[0].size(); k++) {
     ca9:	48 83 c0 01          	add    $0x1,%rax
     cad:	48 83 c2 18          	add    $0x18,%rdx
  return (__m256d) ((__v4df)__A * (__v4df)__B);
     cb1:	c5 fd 59 19          	vmulpd (%rcx),%ymm0,%ymm3
     cb5:	c5 fd 59 41 20       	vmulpd 0x20(%rcx),%ymm0,%ymm0
  return (__m256d) ((__v4df)__A + (__v4df)__B);
     cba:	c5 f5 58 cb          	vaddpd %ymm3,%ymm1,%ymm1
     cbe:	c5 ed 58 d0          	vaddpd %ymm0,%ymm2,%ymm2
     cc2:	48 39 f0             	cmp    %rsi,%rax
     cc5:	72 d9                	jb     ca0 <_Z15opMltply_dM_mnlRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x1a0>
	return *(this->_M_impl._M_start + __n);
     cc7:	48 8b 03             	mov    (%rbx),%rax
    for (size_t i = 0; i < lhs.size(); i++) {
     cca:	49 83 c1 01          	add    $0x1,%r9
     cce:	4a 8b 04 00          	mov    (%rax,%r8,1),%rax
  *(__m256d_u *)__P = __A;
     cd2:	c5 fd 11 08          	vmovupd %ymm1,(%rax)
     cd6:	48 8b 03             	mov    (%rbx),%rax
     cd9:	4a 8b 04 00          	mov    (%rax,%r8,1),%rax
     cdd:	49 83 c0 18          	add    $0x18,%r8
     ce1:	c5 fd 11 50 20       	vmovupd %ymm2,0x20(%rax)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
     ce6:	49 8b 14 24          	mov    (%r12),%rdx
     cea:	49 8b 44 24 08       	mov    0x8(%r12),%rax
     cef:	48 29 d0             	sub    %rdx,%rax
     cf2:	48 c1 f8 03          	sar    $0x3,%rax
     cf6:	49 0f af c2          	imul   %r10,%rax
     cfa:	49 39 c1             	cmp    %rax,%r9
     cfd:	0f 82 6d ff ff ff    	jb     c70 <_Z15opMltply_dM_mnlRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x170>
     d03:	c5 f8 77             	vzeroupper 
}
     d06:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
     d0a:	48 89 d8             	mov    %rbx,%rax
     d0d:	5b                   	pop    %rbx
     d0e:	41 5c                	pop    %r12
     d10:	41 5d                	pop    %r13
     d12:	41 5e                	pop    %r14
     d14:	41 5f                	pop    %r15
     d16:	5d                   	pop    %rbp
     d17:	c3                   	ret    
	this->_M_impl._M_start = this->_M_allocate(__n);
     d18:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
     d1f:	00 00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
     d21:	45 31 f6             	xor    %r14d,%r14d
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
     d24:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
     d2b:	00 00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
     d2d:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
     d34:	00 00 
     d36:	e9 6e fe ff ff       	jmp    ba9 <_Z15opMltply_dM_mnlRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0xa9>
     d3b:	31 ff                	xor    %edi,%edi
     d3d:	e9 c9 fe ff ff       	jmp    c0b <_Z15opMltply_dM_mnlRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x10b>
	return __first;
     d42:	49 89 fe             	mov    %rdi,%r14
     d45:	e9 5f fe ff ff       	jmp    ba9 <_Z15opMltply_dM_mnlRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0xa9>
	  __throw_length_error(
     d4a:	bf 00 00 00 00       	mov    $0x0,%edi
     d4f:	e8 00 00 00 00       	call   d54 <_Z15opMltply_dM_mnlRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x254>
     d54:	bf 00 00 00 00       	mov    $0x0,%edi
     d59:	e8 00 00 00 00       	call   d5e <_Z15opMltply_dM_mnlRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x25e>
      }
     d5e:	49 89 c4             	mov    %rax,%r12
     d61:	4c 8d 74 24 20       	lea    0x20(%rsp),%r14
     d66:	c5 f8 77             	vzeroupper 
     d69:	e9 00 00 00 00       	jmp    d6e <_Z15opMltply_dM_mnlRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x26e>
      { _M_fill_initialize(__n, __value); }
     d6e:	49 89 c4             	mov    %rax,%r12
     d71:	e9 00 00 00 00       	jmp    d76 <_Z15opMltply_dM_mnlRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x276>
     d76:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
     d7d:	00 00 00 

0000000000000d80 <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_>:
doubleMtrx opMltply_dM(const doubleMtrx & lhs, const doubleMtrx & rhs) {
     d80:	55                   	push   %rbp
     d81:	48 89 e5             	mov    %rsp,%rbp
     d84:	41 57                	push   %r15
     d86:	41 56                	push   %r14
     d88:	41 55                	push   %r13
     d8a:	41 54                	push   %r12
     d8c:	53                   	push   %rbx
     d8d:	48 83 e4 e0          	and    $0xffffffffffffffe0,%rsp
     d91:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
	return *(this->_M_impl._M_start + __n);
     d95:	48 8b 02             	mov    (%rdx),%rax
     d98:	48 89 74 24 58       	mov    %rsi,0x58(%rsp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
     d9d:	4c 8b 60 08          	mov    0x8(%rax),%r12
     da1:	4c 2b 20             	sub    (%rax),%r12
     da4:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
     da9:	48 b8 f8 ff ff ff ff 	movabs $0x7ffffffffffffff8,%rax
     db0:	ff ff 7f 
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
     db3:	4d 89 e7             	mov    %r12,%r15
     db6:	49 c1 ff 03          	sar    $0x3,%r15
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
     dba:	4c 39 e0             	cmp    %r12,%rax
     dbd:	0f 82 6f 03 00 00    	jb     1132 <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x3b2>
	: _M_start(), _M_finish(), _M_end_of_storage()
     dc3:	c5 f9 ef c0          	vpxor  %xmm0,%xmm0,%xmm0
     dc7:	49 89 fe             	mov    %rdi,%r14
     dca:	c5 fa 7f 44 24 68    	vmovdqu %xmm0,0x68(%rsp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
     dd0:	4d 85 ff             	test   %r15,%r15
     dd3:	0f 84 24 03 00 00    	je     10fd <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x37d>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
     dd9:	4c 89 e7             	mov    %r12,%rdi
     ddc:	e8 00 00 00 00       	call   de1 <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x61>
	this->_M_impl._M_start = this->_M_allocate(__n);
     de1:	c4 e1 f9 6e d0       	vmovq  %rax,%xmm2
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
     de6:	4e 8d 2c 20          	lea    (%rax,%r12,1),%r13
	      ++__first;
     dea:	48 8d 78 08          	lea    0x8(%rax),%rdi
     dee:	48 89 c3             	mov    %rax,%rbx
	this->_M_impl._M_start = this->_M_allocate(__n);
     df1:	c5 e9 6c c2          	vpunpcklqdq %xmm2,%xmm2,%xmm0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
     df5:	4c 89 6c 24 70       	mov    %r13,0x70(%rsp)
     dfa:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	this->_M_impl._M_start = this->_M_allocate(__n);
     e01:	c5 f9 7f 44 24 60    	vmovdqa %xmm0,0x60(%rsp)
      if (__n <= 0)
     e07:	49 83 ff 01          	cmp    $0x1,%r15
     e0b:	0f 84 0f 03 00 00    	je     1120 <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x3a0>
      for (; __first != __last; ++__first)
     e11:	49 39 fd             	cmp    %rdi,%r13
     e14:	74 0c                	je     e22 <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0xa2>
	*__first = __tmp;
     e16:	49 8d 54 24 f8       	lea    -0x8(%r12),%rdx
     e1b:	31 f6                	xor    %esi,%esi
     e1d:	e8 00 00 00 00       	call   e22 <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0xa2>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
     e22:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
	this->_M_impl._M_finish =
     e27:	4c 89 6c 24 68       	mov    %r13,0x68(%rsp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
     e2c:	4c 8b 68 08          	mov    0x8(%rax),%r13
     e30:	4c 2b 28             	sub    (%rax),%r13
     e33:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
     e3a:	aa aa aa 
     e3d:	4c 89 ea             	mov    %r13,%rdx
     e40:	48 c1 fa 03          	sar    $0x3,%rdx
     e44:	48 0f af d0          	imul   %rax,%rdx
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
     e48:	48 b8 f8 ff ff ff ff 	movabs $0x7ffffffffffffff8,%rax
     e4f:	ff ff 7f 
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
     e52:	49 89 d7             	mov    %rdx,%r15
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
     e55:	4c 39 e8             	cmp    %r13,%rax
     e58:	0f 82 ca 02 00 00    	jb     1128 <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x3a8>
	: _M_start(), _M_finish(), _M_end_of_storage()
     e5e:	c5 f9 ef c0          	vpxor  %xmm0,%xmm0,%xmm0
     e62:	49 c7 46 10 00 00 00 	movq   $0x0,0x10(%r14)
     e69:	00 
     e6a:	c4 c1 7a 7f 06       	vmovdqu %xmm0,(%r14)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
     e6f:	48 85 d2             	test   %rdx,%rdx
     e72:	0f 84 a1 02 00 00    	je     1119 <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x399>
     e78:	4c 89 ef             	mov    %r13,%rdi
     e7b:	e8 00 00 00 00       	call   e80 <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x100>
     e80:	48 89 c7             	mov    %rax,%rdi
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
     e83:	49 01 fd             	add    %rdi,%r13
	this->_M_impl._M_start = this->_M_allocate(__n);
     e86:	c4 e1 f9 6e df       	vmovq  %rdi,%xmm3
	{ return std::__do_uninit_fill_n(__first, __n, __x); }
     e8b:	4c 89 fe             	mov    %r15,%rsi
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
     e8e:	4d 89 6e 10          	mov    %r13,0x10(%r14)
	this->_M_impl._M_start = this->_M_allocate(__n);
     e92:	c5 e1 6c c3          	vpunpcklqdq %xmm3,%xmm3,%xmm0
     e96:	4c 8d 6c 24 60       	lea    0x60(%rsp),%r13
     e9b:	c4 c1 7a 7f 06       	vmovdqu %xmm0,(%r14)
     ea0:	4c 89 ea             	mov    %r13,%rdx
     ea3:	e8 00 00 00 00       	call   ea8 <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x128>
	this->_M_impl._M_finish =
     ea8:	49 89 46 08          	mov    %rax,0x8(%r14)
	if (__p)
     eac:	48 85 db             	test   %rbx,%rbx
     eaf:	74 0b                	je     ebc <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x13c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
     eb1:	4c 89 e6             	mov    %r12,%rsi
     eb4:	48 89 df             	mov    %rbx,%rdi
     eb7:	e8 00 00 00 00       	call   ebc <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x13c>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
     ebc:	48 b9 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rcx
     ec3:	aa aa aa 
     ec6:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
     ecb:	48 8b 50 08          	mov    0x8(%rax),%rdx
     ecf:	48 8b 18             	mov    (%rax),%rbx
     ed2:	48 89 d0             	mov    %rdx,%rax
     ed5:	48 89 5c 24 48       	mov    %rbx,0x48(%rsp)
     eda:	48 29 d8             	sub    %rbx,%rax
     edd:	48 c1 f8 03          	sar    $0x3,%rax
     ee1:	48 0f af c8          	imul   %rax,%rcx
    for (size_t i = 0; i < lhs.size(); i++) {
     ee5:	48 39 d3             	cmp    %rdx,%rbx
     ee8:	0f 84 ca 01 00 00    	je     10b8 <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x338>
     eee:	48 8b 53 08          	mov    0x8(%rbx),%rdx
     ef2:	4c 8b 1b             	mov    (%rbx),%r11
     ef5:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
     efa:	45 31 e4             	xor    %r12d,%r12d
     efd:	48 89 d0             	mov    %rdx,%rax
     f00:	4c 89 5c 24 20       	mov    %r11,0x20(%rsp)
     f05:	4c 29 d8             	sub    %r11,%rax
     f08:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
     f0d:	48 c1 f8 03          	sar    $0x3,%rax
     f11:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
     f16:	31 c0                	xor    %eax,%eax
     f18:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
     f1f:	00 
        for (size_t k = 0; k < lhs[0].size(); k++) {
     f20:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
     f25:	48 39 7c 24 20       	cmp    %rdi,0x20(%rsp)
     f2a:	0f 84 6f 01 00 00    	je     109f <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x31f>
	return *(this->_M_impl._M_start + __n);
     f30:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
     f35:	b9 01 00 00 00       	mov    $0x1,%ecx
     f3a:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
     f3f:	4c 8b 0b             	mov    (%rbx),%r9
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
     f42:	4d 8b 69 08          	mov    0x8(%r9),%r13
     f46:	49 8b 19             	mov    (%r9),%rbx
     f49:	4d 89 ea             	mov    %r13,%r10
     f4c:	48 89 5c 24 58       	mov    %rbx,0x58(%rsp)
     f51:	49 29 da             	sub    %rbx,%r10
     f54:	4c 89 d7             	mov    %r10,%rdi
     f57:	48 c1 ff 03          	sar    $0x3,%rdi
     f5b:	4d 85 d2             	test   %r10,%r10
     f5e:	48 0f 45 cf          	cmovne %rdi,%rcx
     f62:	45 31 c0             	xor    %r8d,%r8d
     f65:	48 89 ca             	mov    %rcx,%rdx
     f68:	48 89 cb             	mov    %rcx,%rbx
     f6b:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
     f70:	83 e1 03             	and    $0x3,%ecx
     f73:	48 83 e2 fc          	and    $0xfffffffffffffffc,%rdx
     f77:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
     f7c:	48 c1 eb 02          	shr    $0x2,%rbx
     f80:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
     f85:	48 c1 e3 05          	shl    $0x5,%rbx
     f89:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            for (size_t j = 0; j < rhs[0].size(); j++) {
     f90:	4c 39 6c 24 58       	cmp    %r13,0x58(%rsp)
     f95:	0f 84 e9 00 00 00    	je     1084 <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x304>
	return *(this->_M_impl._M_start + __n);
     f9b:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
     fa0:	4e 8d 1c c5 00 00 00 	lea    0x0(,%r8,8),%r11
     fa7:	00 
     fa8:	49 8b 11             	mov    (%r9),%rdx
     fab:	4e 8b 3c 20          	mov    (%rax,%r12,1),%r15
	return *(this->_M_impl._M_start + __n);
     faf:	49 8b 06             	mov    (%r14),%rax
	return *(this->_M_impl._M_start + __n);
     fb2:	4b 8d 0c 1f          	lea    (%r15,%r11,1),%rcx
	return *(this->_M_impl._M_start + __n);
     fb6:	4a 8b 04 20          	mov    (%rax,%r12,1),%rax
     fba:	49 83 fa 08          	cmp    $0x8,%r10
     fbe:	0f 86 0c 01 00 00    	jbe    10d0 <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x350>
     fc4:	4d 85 d2             	test   %r10,%r10
     fc7:	be 08 00 00 00       	mov    $0x8,%esi
     fcc:	4f 8d 5c 1f 08       	lea    0x8(%r15,%r11,1),%r11
     fd1:	49 0f 45 f2          	cmovne %r10,%rsi
     fd5:	48 01 c6             	add    %rax,%rsi
     fd8:	48 39 f1             	cmp    %rsi,%rcx
     fdb:	40 0f 93 c6          	setae  %sil
     fdf:	4c 39 d8             	cmp    %r11,%rax
     fe2:	41 0f 93 c3          	setae  %r11b
     fe6:	41 08 f3             	or     %sil,%r11b
     fe9:	0f 84 e1 00 00 00    	je     10d0 <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x350>
     fef:	4c 8d 5a 08          	lea    0x8(%rdx),%r11
     ff3:	48 89 c6             	mov    %rax,%rsi
     ff6:	4c 29 de             	sub    %r11,%rsi
     ff9:	48 83 fe 10          	cmp    $0x10,%rsi
     ffd:	0f 86 cd 00 00 00    	jbe    10d0 <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x350>
    1003:	49 83 fa 18          	cmp    $0x18,%r10
    1007:	0f 86 e9 00 00 00    	jbe    10f6 <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x376>
    100d:	c4 e2 7d 19 09       	vbroadcastsd (%rcx),%ymm1
    1012:	31 f6                	xor    %esi,%esi
    1014:	0f 1f 40 00          	nopl   0x0(%rax)
                res[i][j] += lhs[i][k] * rhs[k][j];
    1018:	c5 f5 59 04 32       	vmulpd (%rdx,%rsi,1),%ymm1,%ymm0
    101d:	c5 fd 58 04 30       	vaddpd (%rax,%rsi,1),%ymm0,%ymm0
    1022:	c5 fd 11 04 30       	vmovupd %ymm0,(%rax,%rsi,1)
      size() const _GLIBCXX_NOEXCEPT
    1027:	48 83 c6 20          	add    $0x20,%rsi
    102b:	48 39 f3             	cmp    %rsi,%rbx
    102e:	75 e8                	jne    1018 <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x298>
    1030:	48 83 7c 24 40 00    	cmpq   $0x0,0x40(%rsp)
    1036:	74 4c                	je     1084 <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x304>
            for (size_t j = 0; j < rhs[0].size(); j++) {
    1038:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
    103d:	4c 8b 5c 24 38       	mov    0x38(%rsp),%r11
    1042:	49 29 f3             	sub    %rsi,%r11
    1045:	49 83 fb 01          	cmp    $0x1,%r11
    1049:	74 24                	je     106f <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x2ef>
    104b:	4c 8d 3c f0          	lea    (%rax,%rsi,8),%r15
                res[i][j] += lhs[i][k] * rhs[k][j];
    104f:	c5 fb 12 01          	vmovddup (%rcx),%xmm0
    1053:	c5 f9 59 04 f2       	vmulpd (%rdx,%rsi,8),%xmm0,%xmm0
    1058:	c4 c1 79 58 07       	vaddpd (%r15),%xmm0,%xmm0
    105d:	c4 c1 79 11 07       	vmovupd %xmm0,(%r15)
    1062:	41 f6 c3 01          	test   $0x1,%r11b
    1066:	74 1c                	je     1084 <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x304>
    1068:	49 83 e3 fe          	and    $0xfffffffffffffffe,%r11
    106c:	4c 01 de             	add    %r11,%rsi
    106f:	c5 fb 10 04 f2       	vmovsd (%rdx,%rsi,8),%xmm0
	return *(this->_M_impl._M_start + __n);
    1074:	48 8d 04 f0          	lea    (%rax,%rsi,8),%rax
    1078:	c5 fb 59 01          	vmulsd (%rcx),%xmm0,%xmm0
    107c:	c5 fb 58 00          	vaddsd (%rax),%xmm0,%xmm0
    1080:	c5 fb 11 00          	vmovsd %xmm0,(%rax)
        for (size_t k = 0; k < lhs[0].size(); k++) {
    1084:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
    1089:	49 83 c0 01          	add    $0x1,%r8
    108d:	49 83 c1 18          	add    $0x18,%r9
    1091:	49 39 c0             	cmp    %rax,%r8
    1094:	0f 82 f6 fe ff ff    	jb     f90 <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x210>
    109a:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    for (size_t i = 0; i < lhs.size(); i++) {
    109f:	48 8b 5c 24 10       	mov    0x10(%rsp),%rbx
    10a4:	48 83 c0 01          	add    $0x1,%rax
    10a8:	49 83 c4 18          	add    $0x18,%r12
    10ac:	48 39 d8             	cmp    %rbx,%rax
    10af:	0f 82 6b fe ff ff    	jb     f20 <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x1a0>
    10b5:	c5 f8 77             	vzeroupper 
}
    10b8:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
    10bc:	4c 89 f0             	mov    %r14,%rax
    10bf:	5b                   	pop    %rbx
    10c0:	41 5c                	pop    %r12
    10c2:	41 5d                	pop    %r13
    10c4:	41 5e                	pop    %r14
    10c6:	41 5f                	pop    %r15
    10c8:	5d                   	pop    %rbp
    10c9:	c3                   	ret    
    10ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    10d0:	31 f6                	xor    %esi,%esi
    10d2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
                res[i][j] += lhs[i][k] * rhs[k][j];
    10d8:	c5 fb 10 01          	vmovsd (%rcx),%xmm0
    10dc:	c5 fb 59 04 f2       	vmulsd (%rdx,%rsi,8),%xmm0,%xmm0
    10e1:	c5 fb 58 04 f0       	vaddsd (%rax,%rsi,8),%xmm0,%xmm0
    10e6:	c5 fb 11 04 f0       	vmovsd %xmm0,(%rax,%rsi,8)
            for (size_t j = 0; j < rhs[0].size(); j++) {
    10eb:	48 83 c6 01          	add    $0x1,%rsi
    10ef:	48 39 fe             	cmp    %rdi,%rsi
    10f2:	72 e4                	jb     10d8 <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x358>
    10f4:	eb 8e                	jmp    1084 <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x304>
    10f6:	31 f6                	xor    %esi,%esi
    10f8:	e9 40 ff ff ff       	jmp    103d <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x2bd>
	this->_M_impl._M_start = this->_M_allocate(__n);
    10fd:	48 c7 44 24 60 00 00 	movq   $0x0,0x60(%rsp)
    1104:	00 00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    1106:	31 db                	xor    %ebx,%ebx
    1108:	45 31 ed             	xor    %r13d,%r13d
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    110b:	48 c7 44 24 70 00 00 	movq   $0x0,0x70(%rsp)
    1112:	00 00 
        __uninit_default_n(_ForwardIterator __first, _Size __n)
    1114:	e9 09 fd ff ff       	jmp    e22 <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0xa2>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    1119:	31 ff                	xor    %edi,%edi
    111b:	e9 63 fd ff ff       	jmp    e83 <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x103>
	return __first;
    1120:	49 89 fd             	mov    %rdi,%r13
    1123:	e9 fa fc ff ff       	jmp    e22 <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0xa2>
	  __throw_length_error(
    1128:	bf 00 00 00 00       	mov    $0x0,%edi
    112d:	e8 00 00 00 00       	call   1132 <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x3b2>
    1132:	bf 00 00 00 00       	mov    $0x0,%edi
    1137:	e8 00 00 00 00       	call   113c <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x3bc>
      }
    113c:	48 89 c3             	mov    %rax,%rbx
    113f:	4c 8d 6c 24 60       	lea    0x60(%rsp),%r13
    1144:	c5 f8 77             	vzeroupper 
    1147:	e9 00 00 00 00       	jmp    114c <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x3cc>
      { _M_fill_initialize(__n, __value); }
    114c:	48 89 c3             	mov    %rax,%rbx
    114f:	e9 00 00 00 00       	jmp    1154 <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_+0x3d4>
    1154:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    115b:	00 00 00 00 
    115f:	90                   	nop

0000000000001160 <_Z15opMltply_mM_noVRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_>:
mtrxMtrx opMltply_mM_noV(const mtrxMtrx & lhs, const mtrxMtrx & rhs) {
    1160:	41 57                	push   %r15
    1162:	49 89 ff             	mov    %rdi,%r15
    1165:	41 56                	push   %r14
    1167:	49 89 f6             	mov    %rsi,%r14
    mtrxMtrx res (lhs.size(), vector<doubleMtrx>(rhs[0].size(),doubleMtrx(8, vector<double>(8,0))));
    116a:	be 08 00 00 00       	mov    $0x8,%esi
mtrxMtrx opMltply_mM_noV(const mtrxMtrx & lhs, const mtrxMtrx & rhs) {
    116f:	41 55                	push   %r13
    1171:	49 89 d5             	mov    %rdx,%r13
    1174:	41 54                	push   %r12
    1176:	55                   	push   %rbp
    1177:	53                   	push   %rbx
    1178:	48 83 ec 78          	sub    $0x78,%rsp
    mtrxMtrx res (lhs.size(), vector<doubleMtrx>(rhs[0].size(),doubleMtrx(8, vector<double>(8,0))));
    117c:	48 8d 4c 24 04       	lea    0x4(%rsp),%rcx
    1181:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
    1186:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
    118d:	00 00 
    118f:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
    1194:	e8 00 00 00 00       	call   1199 <_Z15opMltply_mM_noVRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x39>
    1199:	48 8d 4c 24 05       	lea    0x5(%rsp),%rcx
    119e:	48 8d 54 24 10       	lea    0x10(%rsp),%rdx
    11a3:	be 08 00 00 00       	mov    $0x8,%esi
    11a8:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
    11ad:	e8 00 00 00 00       	call   11b2 <_Z15opMltply_mM_noVRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x52>
    11b2:	49 8b 7d 00          	mov    0x0(%r13),%rdi
    11b6:	31 f6                	xor    %esi,%esi
    11b8:	48 8d 4c 24 06       	lea    0x6(%rsp),%rcx
    11bd:	48 8d 54 24 30       	lea    0x30(%rsp),%rdx
    11c2:	e8 f9 ee ff ff       	call   c0 <_ZNKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EEixEm.isra.0>
    11c7:	48 8b 70 08          	mov    0x8(%rax),%rsi
    11cb:	48 8b 38             	mov    (%rax),%rdi
    11ce:	e8 cd ee ff ff       	call   a0 <_ZNKSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EE4sizeEv.isra.0>
    11d3:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
    11d8:	48 89 c6             	mov    %rax,%rsi
    11db:	e8 00 00 00 00       	call   11e0 <_Z15opMltply_mM_noVRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x80>
    11e0:	49 8b 76 08          	mov    0x8(%r14),%rsi
    11e4:	49 8b 3e             	mov    (%r14),%rdi
    11e7:	48 8d 4c 24 07       	lea    0x7(%rsp),%rcx
    11ec:	48 8d 54 24 50       	lea    0x50(%rsp),%rdx
    11f1:	e8 da ee ff ff       	call   d0 <_ZNKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE4sizeEv.isra.0>
    11f6:	4c 89 ff             	mov    %r15,%rdi
    11f9:	48 89 c6             	mov    %rax,%rsi
    11fc:	e8 00 00 00 00       	call   1201 <_Z15opMltply_mM_noVRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0xa1>
    1201:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
    for (size_t i = 0; i < lhs.size(); i++)
    1206:	45 31 e4             	xor    %r12d,%r12d
    mtrxMtrx res (lhs.size(), vector<doubleMtrx>(rhs[0].size(),doubleMtrx(8, vector<double>(8,0))));
    1209:	e8 00 00 00 00       	call   120e <_Z15opMltply_mM_noVRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0xae>
    120e:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
    1213:	e8 00 00 00 00       	call   1218 <_Z15opMltply_mM_noVRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0xb8>
    1218:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
    121d:	e8 00 00 00 00       	call   1222 <_Z15opMltply_mM_noVRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0xc2>
    for (size_t i = 0; i < lhs.size(); i++)
    1222:	49 8b 0e             	mov    (%r14),%rcx
    1225:	0f 1f 00             	nopl   (%rax)
    1228:	49 8b 76 08          	mov    0x8(%r14),%rsi
    122c:	48 89 cf             	mov    %rcx,%rdi
    122f:	e8 9c ee ff ff       	call   d0 <_ZNKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE4sizeEv.isra.0>
    1234:	49 39 c4             	cmp    %rax,%r12
    1237:	0f 83 d4 00 00 00    	jae    1311 <_Z15opMltply_mM_noVRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x1b1>
        for (size_t k = 0; k < lhs[0].size(); k++)  
    123d:	31 ed                	xor    %ebp,%ebp
    123f:	90                   	nop
    1240:	31 f6                	xor    %esi,%esi
    1242:	48 89 cf             	mov    %rcx,%rdi
    1245:	e8 76 ee ff ff       	call   c0 <_ZNKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EEixEm.isra.0>
    124a:	48 8b 70 08          	mov    0x8(%rax),%rsi
    124e:	48 8b 38             	mov    (%rax),%rdi
    1251:	e8 4a ee ff ff       	call   a0 <_ZNKSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EE4sizeEv.isra.0>
    1256:	48 39 c5             	cmp    %rax,%rbp
    1259:	0f 83 a9 00 00 00    	jae    1308 <_Z15opMltply_mM_noVRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x1a8>
            for (size_t j = 0; j < rhs[0].size(); j++)
    125f:	31 db                	xor    %ebx,%ebx
    1261:	eb 75                	jmp    12d8 <_Z15opMltply_mM_noVRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x178>
    1263:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
                opAddAs_dM_noV(res[i][j], opMltply_dM_noV(lhs[i][k], rhs[k][j]));
    1268:	48 89 d7             	mov    %rdx,%rdi
    126b:	48 89 ee             	mov    %rbp,%rsi
    126e:	e8 4d ee ff ff       	call   c0 <_ZNKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EEixEm.isra.0>
    1273:	48 89 de             	mov    %rbx,%rsi
    1276:	48 8b 38             	mov    (%rax),%rdi
    1279:	e8 12 ee ff ff       	call   90 <_ZNKSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EEixEm.isra.0>
    127e:	4c 89 e6             	mov    %r12,%rsi
    1281:	48 89 cf             	mov    %rcx,%rdi
    1284:	48 89 c2             	mov    %rax,%rdx
    1287:	e8 34 ee ff ff       	call   c0 <_ZNKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EEixEm.isra.0>
    128c:	48 89 ee             	mov    %rbp,%rsi
    128f:	48 8b 38             	mov    (%rax),%rdi
    1292:	e8 f9 ed ff ff       	call   90 <_ZNKSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EEixEm.isra.0>
    1297:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
    129c:	48 89 c6             	mov    %rax,%rsi
    129f:	e8 00 00 00 00       	call   12a4 <_Z15opMltply_mM_noVRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x144>
    12a4:	49 8b 3f             	mov    (%r15),%rdi
    12a7:	4c 89 e6             	mov    %r12,%rsi
    12aa:	e8 61 ed ff ff       	call   10 <_ZNSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EEixEm.isra.0>
    12af:	48 89 de             	mov    %rbx,%rsi
            for (size_t j = 0; j < rhs[0].size(); j++)
    12b2:	48 83 c3 01          	add    $0x1,%rbx
                opAddAs_dM_noV(res[i][j], opMltply_dM_noV(lhs[i][k], rhs[k][j]));
    12b6:	48 8b 38             	mov    (%rax),%rdi
    12b9:	e8 42 ed ff ff       	call   0 <_ZNSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EEixEm.isra.0>
    12be:	48 8d 74 24 50       	lea    0x50(%rsp),%rsi
    12c3:	48 89 c7             	mov    %rax,%rdi
    12c6:	e8 00 00 00 00       	call   12cb <_Z15opMltply_mM_noVRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x16b>
    12cb:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
    12d0:	e8 00 00 00 00       	call   12d5 <_Z15opMltply_mM_noVRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x175>
            for (size_t j = 0; j < rhs[0].size(); j++)
    12d5:	49 8b 0e             	mov    (%r14),%rcx
    12d8:	49 8b 55 00          	mov    0x0(%r13),%rdx
    12dc:	31 f6                	xor    %esi,%esi
    12de:	48 89 d7             	mov    %rdx,%rdi
    12e1:	e8 da ed ff ff       	call   c0 <_ZNKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EEixEm.isra.0>
    12e6:	48 8b 70 08          	mov    0x8(%rax),%rsi
    12ea:	48 8b 38             	mov    (%rax),%rdi
    12ed:	e8 ae ed ff ff       	call   a0 <_ZNKSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EE4sizeEv.isra.0>
    12f2:	48 39 c3             	cmp    %rax,%rbx
    12f5:	0f 82 6d ff ff ff    	jb     1268 <_Z15opMltply_mM_noVRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x108>
        for (size_t k = 0; k < lhs[0].size(); k++)  
    12fb:	48 83 c5 01          	add    $0x1,%rbp
    12ff:	e9 3c ff ff ff       	jmp    1240 <_Z15opMltply_mM_noVRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0xe0>
    1304:	0f 1f 40 00          	nopl   0x0(%rax)
    for (size_t i = 0; i < lhs.size(); i++)
    1308:	49 83 c4 01          	add    $0x1,%r12
    130c:	e9 17 ff ff ff       	jmp    1228 <_Z15opMltply_mM_noVRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0xc8>
}
    1311:	48 83 c4 78          	add    $0x78,%rsp
    1315:	4c 89 f8             	mov    %r15,%rax
    1318:	5b                   	pop    %rbx
    1319:	5d                   	pop    %rbp
    131a:	41 5c                	pop    %r12
    131c:	41 5d                	pop    %r13
    131e:	41 5e                	pop    %r14
    1320:	41 5f                	pop    %r15
    1322:	c3                   	ret    
    mtrxMtrx res (lhs.size(), vector<doubleMtrx>(rhs[0].size(),doubleMtrx(8, vector<double>(8,0))));
    1323:	48 89 c3             	mov    %rax,%rbx
    1326:	e9 00 00 00 00       	jmp    132b <_Z15opMltply_mM_noVRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x1cb>
}
    132b:	48 89 c3             	mov    %rax,%rbx
    132e:	e9 00 00 00 00       	jmp    1333 <_Z15opMltply_mM_noVRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x1d3>
    mtrxMtrx res (lhs.size(), vector<doubleMtrx>(rhs[0].size(),doubleMtrx(8, vector<double>(8,0))));
    1333:	48 89 c3             	mov    %rax,%rbx
    1336:	e9 00 00 00 00       	jmp    133b <_Z15opMltply_mM_noVRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x1db>
    133b:	48 89 c3             	mov    %rax,%rbx
    133e:	e9 00 00 00 00       	jmp    1343 <_Z15opMltply_mM_noVRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x1e3>
    1343:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    134a:	00 00 00 00 
    134e:	66 90                	xchg   %ax,%ax

0000000000001350 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_>:
mtrxMtrx opMltply_mM(const mtrxMtrx & lhs, const mtrxMtrx & rhs) {
    1350:	41 57                	push   %r15
    1352:	49 89 ff             	mov    %rdi,%r15
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    1355:	bf 40 00 00 00       	mov    $0x40,%edi
    135a:	41 56                	push   %r14
    135c:	41 55                	push   %r13
    135e:	41 54                	push   %r12
    1360:	55                   	push   %rbp
    1361:	53                   	push   %rbx
    1362:	48 89 d3             	mov    %rdx,%rbx
    1365:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
    136c:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    1371:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
    1376:	e8 00 00 00 00       	call   137b <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x2b>
	*__first = __tmp;
    137b:	c5 f9 ef c0          	vpxor  %xmm0,%xmm0,%xmm0
    137f:	bf c0 00 00 00       	mov    $0xc0,%edi
    1384:	48 89 c1             	mov    %rax,%rcx
    1387:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
	this->_M_impl._M_start = this->_M_allocate(__n);
    138c:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    1391:	48 8d 40 40          	lea    0x40(%rax),%rax
    1395:	c5 fa 7f 01          	vmovdqu %xmm0,(%rcx)
    1399:	c5 fa 7f 41 10       	vmovdqu %xmm0,0x10(%rcx)
    139e:	c5 fa 7f 41 20       	vmovdqu %xmm0,0x20(%rcx)
    13a3:	c5 fa 7f 41 30       	vmovdqu %xmm0,0x30(%rcx)
	: _M_start(), _M_finish(), _M_end_of_storage()
    13a8:	c5 f9 ef c0          	vpxor  %xmm0,%xmm0,%xmm0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    13ac:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
	this->_M_impl._M_finish =
    13b1:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
	: _M_start(), _M_finish(), _M_end_of_storage()
    13b6:	c5 fa 7f 44 24 68    	vmovdqu %xmm0,0x68(%rsp)
    13bc:	e8 00 00 00 00       	call   13c1 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x71>
	this->_M_impl._M_start = this->_M_allocate(__n);
    13c1:	c4 e1 f9 6e c8       	vmovq  %rax,%xmm1
	{ return std::__do_uninit_fill_n(__first, __n, __x); }
    13c6:	4c 8d 64 24 40       	lea    0x40(%rsp),%r12
    13cb:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    13d0:	48 89 c7             	mov    %rax,%rdi
	this->_M_impl._M_start = this->_M_allocate(__n);
    13d3:	c5 f1 6c c1          	vpunpcklqdq %xmm1,%xmm1,%xmm0
    13d7:	4c 89 e2             	mov    %r12,%rdx
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    13da:	48 8d 80 c0 00 00 00 	lea    0xc0(%rax),%rax
    13e1:	be 08 00 00 00       	mov    $0x8,%esi
    13e6:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
	this->_M_impl._M_start = this->_M_allocate(__n);
    13eb:	c5 f9 7f 44 24 60    	vmovdqa %xmm0,0x60(%rsp)
    13f1:	e8 00 00 00 00       	call   13f6 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0xa6>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    13f6:	48 ba ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rdx
    13fd:	aa aa aa 
    1400:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
	this->_M_impl._M_finish =
    1405:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
	return *(this->_M_impl._M_start + __n);
    140a:	48 8b 03             	mov    (%rbx),%rax
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    140d:	48 8b 48 08          	mov    0x8(%rax),%rcx
    1411:	48 2b 08             	sub    (%rax),%rcx
    1414:	48 89 c8             	mov    %rcx,%rax
    1417:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    141c:	48 c1 f8 03          	sar    $0x3,%rax
    1420:	48 0f af c2          	imul   %rdx,%rax
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    1424:	48 ba f8 ff ff ff ff 	movabs $0x7ffffffffffffff8,%rdx
    142b:	ff ff 7f 
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    142e:	49 89 c6             	mov    %rax,%r14
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    1431:	48 39 ca             	cmp    %rcx,%rdx
    1434:	0f 82 8b 03 00 00    	jb     17c5 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x475>
	: _M_start(), _M_finish(), _M_end_of_storage()
    143a:	c5 f9 ef c0          	vpxor  %xmm0,%xmm0,%xmm0
    143e:	c5 fa 7f 84 24 88 00 	vmovdqu %xmm0,0x88(%rsp)
    1445:	00 00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    1447:	48 85 c0             	test   %rax,%rax
    144a:	74 4d                	je     1499 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x149>
    144c:	48 8b 6c 24 20       	mov    0x20(%rsp),%rbp
    1451:	48 89 ef             	mov    %rbp,%rdi
    1454:	e8 00 00 00 00       	call   1459 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x109>
    1459:	48 89 c3             	mov    %rax,%rbx
	this->_M_impl._M_start = this->_M_allocate(__n);
    145c:	c4 e1 f9 6e d0       	vmovq  %rax,%xmm2
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    1461:	48 8d 04 28          	lea    (%rax,%rbp,1),%rax
    1465:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
    146c:	00 
	this->_M_impl._M_start = this->_M_allocate(__n);
    146d:	c5 e9 6c c2          	vpunpcklqdq %xmm2,%xmm2,%xmm0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    1471:	49 89 dd             	mov    %rbx,%r13
    1474:	48 8d 6c 24 60       	lea    0x60(%rsp),%rbp
	this->_M_impl._M_start = this->_M_allocate(__n);
    1479:	c5 f9 7f 84 24 80 00 	vmovdqa %xmm0,0x80(%rsp)
    1480:	00 00 
    1482:	48 89 ee             	mov    %rbp,%rsi
    1485:	4c 89 ef             	mov    %r13,%rdi
    1488:	e8 00 00 00 00       	call   148d <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x13d>
	  for (; __n > 0; --__n, (void) ++__cur)
    148d:	49 83 c5 18          	add    $0x18,%r13
    1491:	49 83 ee 01          	sub    $0x1,%r14
    1495:	75 eb                	jne    1482 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x132>
    1497:	eb 1d                	jmp    14b6 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x166>
    1499:	48 c7 84 24 80 00 00 	movq   $0x0,0x80(%rsp)
    14a0:	00 00 00 00 00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    14a5:	31 db                	xor    %ebx,%ebx
    14a7:	45 31 ed             	xor    %r13d,%r13d
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    14aa:	48 c7 84 24 90 00 00 	movq   $0x0,0x90(%rsp)
    14b1:	00 00 00 00 00 
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    14b6:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
	this->_M_impl._M_finish =
    14bb:	4c 89 ac 24 88 00 00 	mov    %r13,0x88(%rsp)
    14c2:	00 
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    14c3:	48 8b 41 08          	mov    0x8(%rcx),%rax
    14c7:	48 2b 01             	sub    (%rcx),%rax
    14ca:	48 89 c2             	mov    %rax,%rdx
    14cd:	48 89 c5             	mov    %rax,%rbp
    14d0:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
    14d7:	aa aa aa 
    14da:	48 c1 fa 03          	sar    $0x3,%rdx
    14de:	48 0f af d0          	imul   %rax,%rdx
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    14e2:	48 b8 f8 ff ff ff ff 	movabs $0x7ffffffffffffff8,%rax
    14e9:	ff ff 7f 
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    14ec:	49 89 d6             	mov    %rdx,%r14
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    14ef:	48 39 e8             	cmp    %rbp,%rax
    14f2:	0f 82 c3 02 00 00    	jb     17bb <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x46b>
	: _M_start(), _M_finish(), _M_end_of_storage()
    14f8:	c5 f9 ef c0          	vpxor  %xmm0,%xmm0,%xmm0
    14fc:	49 c7 47 10 00 00 00 	movq   $0x0,0x10(%r15)
    1503:	00 
    1504:	c4 c1 7a 7f 07       	vmovdqu %xmm0,(%r15)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    1509:	48 85 d2             	test   %rdx,%rdx
    150c:	0f 84 a2 02 00 00    	je     17b4 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x464>
    1512:	48 89 ef             	mov    %rbp,%rdi
    1515:	e8 00 00 00 00       	call   151a <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x1ca>
    151a:	48 89 c7             	mov    %rax,%rdi
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    151d:	48 01 fd             	add    %rdi,%rbp
	this->_M_impl._M_start = this->_M_allocate(__n);
    1520:	c4 e1 f9 6e df       	vmovq  %rdi,%xmm3
	{ return std::__do_uninit_fill_n(__first, __n, __x); }
    1525:	48 8d 84 24 80 00 00 	lea    0x80(%rsp),%rax
    152c:	00 
    152d:	4c 89 f6             	mov    %r14,%rsi
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    1530:	49 89 6f 10          	mov    %rbp,0x10(%r15)
	this->_M_impl._M_start = this->_M_allocate(__n);
    1534:	c5 e1 6c c3          	vpunpcklqdq %xmm3,%xmm3,%xmm0
    1538:	48 89 c2             	mov    %rax,%rdx
    153b:	c4 c1 7a 7f 07       	vmovdqu %xmm0,(%r15)
    1540:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    1545:	e8 00 00 00 00       	call   154a <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x1fa>
	this->_M_impl._M_finish =
    154a:	49 89 47 08          	mov    %rax,0x8(%r15)
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
    154e:	49 89 dc             	mov    %rbx,%r12
    1551:	4c 39 eb             	cmp    %r13,%rbx
    1554:	74 51                	je     15a7 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x257>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    1556:	49 8b 6c 24 08       	mov    0x8(%r12),%rbp
    155b:	4d 8b 34 24          	mov    (%r12),%r14
    155f:	4c 39 f5             	cmp    %r14,%rbp
    1562:	74 25                	je     1589 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x239>
    1564:	0f 1f 40 00          	nopl   0x0(%rax)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    1568:	49 8b 3e             	mov    (%r14),%rdi
	if (__p)
    156b:	48 85 ff             	test   %rdi,%rdi
    156e:	74 0c                	je     157c <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x22c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    1570:	49 8b 76 10          	mov    0x10(%r14),%rsi
    1574:	48 29 fe             	sub    %rdi,%rsi
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    1577:	e8 00 00 00 00       	call   157c <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x22c>
    157c:	49 83 c6 18          	add    $0x18,%r14
    1580:	4c 39 f5             	cmp    %r14,%rbp
    1583:	75 e3                	jne    1568 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x218>
    1585:	4d 8b 34 24          	mov    (%r12),%r14
	if (__p)
    1589:	4d 85 f6             	test   %r14,%r14
    158c:	74 10                	je     159e <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x24e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    158e:	49 8b 74 24 10       	mov    0x10(%r12),%rsi
    1593:	4c 89 f7             	mov    %r14,%rdi
    1596:	4c 29 f6             	sub    %r14,%rsi
    1599:	e8 00 00 00 00       	call   159e <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x24e>
    159e:	49 83 c4 18          	add    $0x18,%r12
    15a2:	4d 39 ec             	cmp    %r13,%r12
    15a5:	75 af                	jne    1556 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x206>
	if (__p)
    15a7:	48 85 db             	test   %rbx,%rbx
    15aa:	74 0d                	je     15b9 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x269>
    15ac:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    15b1:	48 89 df             	mov    %rbx,%rdi
    15b4:	e8 00 00 00 00       	call   15b9 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x269>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    15b9:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
    15be:	48 89 c3             	mov    %rax,%rbx
    15c1:	48 39 44 24 28       	cmp    %rax,0x28(%rsp)
    15c6:	74 1f                	je     15e7 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x297>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    15c8:	48 8b 3b             	mov    (%rbx),%rdi
	if (__p)
    15cb:	48 85 ff             	test   %rdi,%rdi
    15ce:	74 0c                	je     15dc <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x28c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    15d0:	48 8b 73 10          	mov    0x10(%rbx),%rsi
    15d4:	48 29 fe             	sub    %rdi,%rsi
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    15d7:	e8 00 00 00 00       	call   15dc <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x28c>
    15dc:	48 83 c3 18          	add    $0x18,%rbx
    15e0:	48 39 5c 24 28       	cmp    %rbx,0x28(%rsp)
    15e5:	75 e1                	jne    15c8 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x278>
    15e7:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
    15ec:	be c0 00 00 00       	mov    $0xc0,%esi
    15f1:	e8 00 00 00 00       	call   15f6 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x2a6>
    15f6:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
    15fb:	be 40 00 00 00       	mov    $0x40,%esi
    1600:	e8 00 00 00 00       	call   1605 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x2b5>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    1605:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    for (size_t i = 0; i < lhs.size(); i++)
    160a:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
    1611:	00 00 
    1613:	48 8b 08             	mov    (%rax),%rcx
    1616:	48 3b 48 08          	cmp    0x8(%rax),%rcx
    161a:	0f 84 7f 01 00 00    	je     179f <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x44f>
        for (size_t k = 0; k < lhs[0].size(); k++)  
    1620:	48 8b 01             	mov    (%rcx),%rax
    1623:	48 39 41 08          	cmp    %rax,0x8(%rcx)
    1627:	0f 84 3b 01 00 00    	je     1768 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x418>
    162d:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
    1634:	00 00 
    1636:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
    163b:	48 8d 04 40          	lea    (%rax,%rax,2),%rax
    163f:	48 c1 e0 03          	shl    $0x3,%rax
    1643:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    1648:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    164d:	48 8b 10             	mov    (%rax),%rdx
            for (size_t j = 0; j < rhs[0].size(); j++)
    1650:	48 8b 02             	mov    (%rdx),%rax
    1653:	48 39 42 08          	cmp    %rax,0x8(%rdx)
    1657:	0f 84 de 00 00 00    	je     173b <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x3eb>
    165d:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    1662:	31 ed                	xor    %ebp,%ebp
    1664:	4c 8d 2c 40          	lea    (%rax,%rax,2),%r13
    1668:	49 c1 e5 03          	shl    $0x3,%r13
    166c:	0f 1f 40 00          	nopl   0x0(%rax)
	return *(this->_M_impl._M_start + __n);
    1670:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
    1675:	4a 8b 04 2a          	mov    (%rdx,%r13,1),%rax
    1679:	48 8d 5c 6d 00       	lea    0x0(%rbp,%rbp,2),%rbx
                opAddAs_dM(res[i][j], opMltply_dM(lhs[i][k], rhs[k][j]));
    167e:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
    1683:	48 c1 e3 03          	shl    $0x3,%rbx
    1687:	4a 8b 34 31          	mov    (%rcx,%r14,1),%rsi
    168b:	48 01 d8             	add    %rbx,%rax
    168e:	48 89 c2             	mov    %rax,%rdx
    1691:	4c 89 e7             	mov    %r12,%rdi
    1694:	4c 01 ee             	add    %r13,%rsi
    1697:	e8 00 00 00 00       	call   169c <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x34c>
	return *(this->_M_impl._M_start + __n);
    169c:	49 8b 07             	mov    (%r15),%rax
    169f:	4c 89 e6             	mov    %r12,%rsi
    16a2:	4a 03 1c 30          	add    (%rax,%r14,1),%rbx
    16a6:	48 89 df             	mov    %rbx,%rdi
    16a9:	e8 00 00 00 00       	call   16ae <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x35e>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    16ae:	4c 8b a4 24 80 00 00 	mov    0x80(%rsp),%r12
    16b5:	00 
    16b6:	48 8b 9c 24 88 00 00 	mov    0x88(%rsp),%rbx
    16bd:	00 
    16be:	4d 89 e6             	mov    %r12,%r14
    16c1:	4c 39 e3             	cmp    %r12,%rbx
    16c4:	74 27                	je     16ed <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x39d>
    16c6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    16cd:	00 00 00 
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    16d0:	49 8b 3e             	mov    (%r14),%rdi
	if (__p)
    16d3:	48 85 ff             	test   %rdi,%rdi
    16d6:	74 0c                	je     16e4 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x394>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    16d8:	49 8b 76 10          	mov    0x10(%r14),%rsi
    16dc:	48 29 fe             	sub    %rdi,%rsi
    16df:	e8 00 00 00 00       	call   16e4 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x394>
    16e4:	49 83 c6 18          	add    $0x18,%r14
    16e8:	4c 39 f3             	cmp    %r14,%rbx
    16eb:	75 e3                	jne    16d0 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x380>
	if (__p)
    16ed:	4d 85 e4             	test   %r12,%r12
    16f0:	74 13                	je     1705 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x3b5>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    16f2:	48 8b b4 24 90 00 00 	mov    0x90(%rsp),%rsi
    16f9:	00 
    16fa:	4c 89 e7             	mov    %r12,%rdi
    16fd:	4c 29 e6             	sub    %r12,%rsi
    1700:	e8 00 00 00 00       	call   1705 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x3b5>
	return *(this->_M_impl._M_start + __n);
    1705:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
            for (size_t j = 0; j < rhs[0].size(); j++)
    170a:	48 83 c5 01          	add    $0x1,%rbp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    170e:	48 bb ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rbx
    1715:	aa aa aa 
	return *(this->_M_impl._M_start + __n);
    1718:	48 8b 10             	mov    (%rax),%rdx
    171b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    1720:	48 8b 08             	mov    (%rax),%rcx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    1723:	48 8b 42 08          	mov    0x8(%rdx),%rax
    1727:	48 2b 02             	sub    (%rdx),%rax
    172a:	48 c1 f8 03          	sar    $0x3,%rax
    172e:	48 0f af c3          	imul   %rbx,%rax
    1732:	48 39 c5             	cmp    %rax,%rbp
    1735:	0f 82 35 ff ff ff    	jb     1670 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x320>
    173b:	48 8b 41 08          	mov    0x8(%rcx),%rax
    173f:	48 2b 01             	sub    (%rcx),%rax
    1742:	48 bf ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rdi
    1749:	aa aa aa 
    174c:	48 c1 f8 03          	sar    $0x3,%rax
        for (size_t k = 0; k < lhs[0].size(); k++)  
    1750:	48 83 44 24 28 01    	addq   $0x1,0x28(%rsp)
    1756:	48 8b 5c 24 28       	mov    0x28(%rsp),%rbx
    175b:	48 0f af c7          	imul   %rdi,%rax
    175f:	48 39 c3             	cmp    %rax,%rbx
    1762:	0f 82 e8 fe ff ff    	jb     1650 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x300>
    1768:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    for (size_t i = 0; i < lhs.size(); i++)
    176d:	48 83 44 24 30 01    	addq   $0x1,0x30(%rsp)
    1773:	48 bb ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rbx
    177a:	aa aa aa 
    177d:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
    1782:	48 8b 40 08          	mov    0x8(%rax),%rax
    1786:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    178b:	48 29 c8             	sub    %rcx,%rax
    178e:	48 c1 f8 03          	sar    $0x3,%rax
    1792:	48 0f af c3          	imul   %rbx,%rax
    1796:	48 39 c2             	cmp    %rax,%rdx
    1799:	0f 82 81 fe ff ff    	jb     1620 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x2d0>
}
    179f:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
    17a6:	4c 89 f8             	mov    %r15,%rax
    17a9:	5b                   	pop    %rbx
    17aa:	5d                   	pop    %rbp
    17ab:	41 5c                	pop    %r12
    17ad:	41 5d                	pop    %r13
    17af:	41 5e                	pop    %r14
    17b1:	41 5f                	pop    %r15
    17b3:	c3                   	ret    
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    17b4:	31 ff                	xor    %edi,%edi
    17b6:	e9 62 fd ff ff       	jmp    151d <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x1cd>
	  __throw_length_error(
    17bb:	bf 00 00 00 00       	mov    $0x0,%edi
    17c0:	e8 00 00 00 00       	call   17c5 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x475>
    17c5:	bf 00 00 00 00       	mov    $0x0,%edi
    17ca:	e8 00 00 00 00       	call   17cf <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x47f>
      __catch(...)
    17cf:	48 89 c7             	mov    %rax,%rdi
    17d2:	e9 00 00 00 00       	jmp    17d7 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x487>
      { _M_fill_initialize(__n, __value); }
    17d7:	48 89 c3             	mov    %rax,%rbx
    17da:	e9 00 00 00 00       	jmp    17df <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x48f>
      }
    17df:	48 89 c3             	mov    %rax,%rbx
    17e2:	4c 8d 64 24 40       	lea    0x40(%rsp),%r12
    17e7:	c5 f8 77             	vzeroupper 
    17ea:	e9 00 00 00 00       	jmp    17ef <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x49f>
    mtrxMtrx res (lhs.size(), vector<doubleMtrx>(rhs[0].size(),doubleMtrx(8, vector<double>(8,0))));
    17ef:	48 89 c3             	mov    %rax,%rbx
    17f2:	48 8d 84 24 80 00 00 	lea    0x80(%rsp),%rax
    17f9:	00 
    17fa:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    17ff:	c5 f8 77             	vzeroupper 
    1802:	e9 00 00 00 00       	jmp    1807 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x4b7>
      { _M_fill_initialize(__n, __value); }
    1807:	48 89 c3             	mov    %rax,%rbx
    180a:	e9 00 00 00 00       	jmp    180f <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x4bf>
}
    180f:	48 89 c3             	mov    %rax,%rbx
    1812:	e9 00 00 00 00       	jmp    1817 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x4c7>
    mtrxMtrx res (lhs.size(), vector<doubleMtrx>(rhs[0].size(),doubleMtrx(8, vector<double>(8,0))));
    1817:	48 89 c3             	mov    %rax,%rbx
    181a:	48 8d 6c 24 60       	lea    0x60(%rsp),%rbp
    181f:	c5 f8 77             	vzeroupper 
    1822:	e9 00 00 00 00       	jmp    1827 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x4d7>
    1827:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    182e:	00 00 

0000000000001830 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_>:

 __attribute__((target("avx")))
// __attribute__((optimize("no-tree-vectorize")))
mtrxMtrx opMltply_mM_mnl(const mtrxMtrx & lhs, const mtrxMtrx & rhs) {
    1830:	41 57                	push   %r15
    1832:	49 89 ff             	mov    %rdi,%r15
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    1835:	bf 40 00 00 00       	mov    $0x40,%edi
    183a:	41 56                	push   %r14
    183c:	41 55                	push   %r13
    183e:	41 54                	push   %r12
    1840:	55                   	push   %rbp
    1841:	53                   	push   %rbx
    1842:	48 89 d3             	mov    %rdx,%rbx
    1845:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
    184c:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    1851:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
    1856:	e8 00 00 00 00       	call   185b <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x2b>
    185b:	c5 f9 ef c0          	vpxor  %xmm0,%xmm0,%xmm0
    185f:	bf c0 00 00 00       	mov    $0xc0,%edi
    1864:	48 89 c1             	mov    %rax,%rcx
    1867:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
	this->_M_impl._M_start = this->_M_allocate(__n);
    186c:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    1871:	48 8d 40 40          	lea    0x40(%rax),%rax
    1875:	c5 fa 7f 01          	vmovdqu %xmm0,(%rcx)
    1879:	c5 fa 7f 41 10       	vmovdqu %xmm0,0x10(%rcx)
    187e:	c5 fa 7f 41 20       	vmovdqu %xmm0,0x20(%rcx)
    1883:	c5 fa 7f 41 30       	vmovdqu %xmm0,0x30(%rcx)
	: _M_start(), _M_finish(), _M_end_of_storage()
    1888:	c5 f9 ef c0          	vpxor  %xmm0,%xmm0,%xmm0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    188c:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
	this->_M_impl._M_finish =
    1891:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
	: _M_start(), _M_finish(), _M_end_of_storage()
    1896:	c5 fa 7f 44 24 68    	vmovdqu %xmm0,0x68(%rsp)
    189c:	e8 00 00 00 00       	call   18a1 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x71>
	this->_M_impl._M_start = this->_M_allocate(__n);
    18a1:	c4 e1 f9 6e c8       	vmovq  %rax,%xmm1
	{ return std::__do_uninit_fill_n(__first, __n, __x); }
    18a6:	4c 8d 64 24 40       	lea    0x40(%rsp),%r12
    18ab:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    18b0:	48 89 c7             	mov    %rax,%rdi
	this->_M_impl._M_start = this->_M_allocate(__n);
    18b3:	c5 f1 6c c1          	vpunpcklqdq %xmm1,%xmm1,%xmm0
    18b7:	4c 89 e2             	mov    %r12,%rdx
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    18ba:	48 8d 80 c0 00 00 00 	lea    0xc0(%rax),%rax
    18c1:	be 08 00 00 00       	mov    $0x8,%esi
    18c6:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
	this->_M_impl._M_start = this->_M_allocate(__n);
    18cb:	c5 f9 7f 44 24 60    	vmovdqa %xmm0,0x60(%rsp)
    18d1:	e8 00 00 00 00       	call   18d6 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0xa6>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    18d6:	48 ba ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rdx
    18dd:	aa aa aa 
    18e0:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
	this->_M_impl._M_finish =
    18e5:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
	return *(this->_M_impl._M_start + __n);
    18ea:	48 8b 03             	mov    (%rbx),%rax
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    18ed:	48 8b 48 08          	mov    0x8(%rax),%rcx
    18f1:	48 2b 08             	sub    (%rax),%rcx
    18f4:	48 89 c8             	mov    %rcx,%rax
    18f7:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    18fc:	48 c1 f8 03          	sar    $0x3,%rax
    1900:	48 0f af c2          	imul   %rdx,%rax
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    1904:	48 ba f8 ff ff ff ff 	movabs $0x7ffffffffffffff8,%rdx
    190b:	ff ff 7f 
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    190e:	49 89 c6             	mov    %rax,%r14
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    1911:	48 39 ca             	cmp    %rcx,%rdx
    1914:	0f 82 8b 03 00 00    	jb     1ca5 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x475>
	: _M_start(), _M_finish(), _M_end_of_storage()
    191a:	c5 f9 ef c0          	vpxor  %xmm0,%xmm0,%xmm0
    191e:	c5 fa 7f 84 24 88 00 	vmovdqu %xmm0,0x88(%rsp)
    1925:	00 00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    1927:	48 85 c0             	test   %rax,%rax
    192a:	74 4d                	je     1979 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x149>
    192c:	48 8b 6c 24 20       	mov    0x20(%rsp),%rbp
    1931:	48 89 ef             	mov    %rbp,%rdi
    1934:	e8 00 00 00 00       	call   1939 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x109>
    1939:	48 89 c3             	mov    %rax,%rbx
	this->_M_impl._M_start = this->_M_allocate(__n);
    193c:	c4 e1 f9 6e d0       	vmovq  %rax,%xmm2
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    1941:	48 8d 04 28          	lea    (%rax,%rbp,1),%rax
    1945:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
    194c:	00 
	this->_M_impl._M_start = this->_M_allocate(__n);
    194d:	c5 e9 6c c2          	vpunpcklqdq %xmm2,%xmm2,%xmm0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    1951:	49 89 dd             	mov    %rbx,%r13
    1954:	48 8d 6c 24 60       	lea    0x60(%rsp),%rbp
	this->_M_impl._M_start = this->_M_allocate(__n);
    1959:	c5 f9 7f 84 24 80 00 	vmovdqa %xmm0,0x80(%rsp)
    1960:	00 00 
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
    1962:	48 89 ee             	mov    %rbp,%rsi
    1965:	4c 89 ef             	mov    %r13,%rdi
    1968:	e8 00 00 00 00       	call   196d <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x13d>
	  for (; __n > 0; --__n, (void) ++__cur)
    196d:	49 83 c5 18          	add    $0x18,%r13
    1971:	49 83 ee 01          	sub    $0x1,%r14
    1975:	75 eb                	jne    1962 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x132>
    1977:	eb 1d                	jmp    1996 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x166>
    1979:	48 c7 84 24 80 00 00 	movq   $0x0,0x80(%rsp)
    1980:	00 00 00 00 00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    1985:	31 db                	xor    %ebx,%ebx
    1987:	45 31 ed             	xor    %r13d,%r13d
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    198a:	48 c7 84 24 90 00 00 	movq   $0x0,0x90(%rsp)
    1991:	00 00 00 00 00 
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    1996:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
	this->_M_impl._M_finish =
    199b:	4c 89 ac 24 88 00 00 	mov    %r13,0x88(%rsp)
    19a2:	00 
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    19a3:	48 8b 41 08          	mov    0x8(%rcx),%rax
    19a7:	48 2b 01             	sub    (%rcx),%rax
    19aa:	48 89 c2             	mov    %rax,%rdx
    19ad:	48 89 c5             	mov    %rax,%rbp
    19b0:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
    19b7:	aa aa aa 
    19ba:	48 c1 fa 03          	sar    $0x3,%rdx
    19be:	48 0f af d0          	imul   %rax,%rdx
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    19c2:	48 b8 f8 ff ff ff ff 	movabs $0x7ffffffffffffff8,%rax
    19c9:	ff ff 7f 
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    19cc:	49 89 d6             	mov    %rdx,%r14
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    19cf:	48 39 e8             	cmp    %rbp,%rax
    19d2:	0f 82 c3 02 00 00    	jb     1c9b <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x46b>
	: _M_start(), _M_finish(), _M_end_of_storage()
    19d8:	c5 f9 ef c0          	vpxor  %xmm0,%xmm0,%xmm0
    19dc:	49 c7 47 10 00 00 00 	movq   $0x0,0x10(%r15)
    19e3:	00 
    19e4:	c4 c1 7a 7f 07       	vmovdqu %xmm0,(%r15)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    19e9:	48 85 d2             	test   %rdx,%rdx
    19ec:	0f 84 a2 02 00 00    	je     1c94 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x464>
    19f2:	48 89 ef             	mov    %rbp,%rdi
    19f5:	e8 00 00 00 00       	call   19fa <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x1ca>
    19fa:	48 89 c7             	mov    %rax,%rdi
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    19fd:	48 01 fd             	add    %rdi,%rbp
	this->_M_impl._M_start = this->_M_allocate(__n);
    1a00:	c4 e1 f9 6e df       	vmovq  %rdi,%xmm3
	{ return std::__do_uninit_fill_n(__first, __n, __x); }
    1a05:	48 8d 84 24 80 00 00 	lea    0x80(%rsp),%rax
    1a0c:	00 
    1a0d:	4c 89 f6             	mov    %r14,%rsi
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    1a10:	49 89 6f 10          	mov    %rbp,0x10(%r15)
	this->_M_impl._M_start = this->_M_allocate(__n);
    1a14:	c5 e1 6c c3          	vpunpcklqdq %xmm3,%xmm3,%xmm0
    1a18:	48 89 c2             	mov    %rax,%rdx
    1a1b:	c4 c1 7a 7f 07       	vmovdqu %xmm0,(%r15)
    1a20:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    1a25:	e8 00 00 00 00       	call   1a2a <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x1fa>
	this->_M_impl._M_finish =
    1a2a:	49 89 47 08          	mov    %rax,0x8(%r15)
	  for (; __first != __last; ++__first)
    1a2e:	49 89 dc             	mov    %rbx,%r12
    1a31:	4c 39 eb             	cmp    %r13,%rbx
    1a34:	74 51                	je     1a87 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x257>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    1a36:	49 8b 6c 24 08       	mov    0x8(%r12),%rbp
    1a3b:	4d 8b 34 24          	mov    (%r12),%r14
    1a3f:	4c 39 f5             	cmp    %r14,%rbp
    1a42:	74 25                	je     1a69 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x239>
    1a44:	0f 1f 40 00          	nopl   0x0(%rax)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    1a48:	49 8b 3e             	mov    (%r14),%rdi
	if (__p)
    1a4b:	48 85 ff             	test   %rdi,%rdi
    1a4e:	74 0c                	je     1a5c <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x22c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    1a50:	49 8b 76 10          	mov    0x10(%r14),%rsi
    1a54:	48 29 fe             	sub    %rdi,%rsi
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    1a57:	e8 00 00 00 00       	call   1a5c <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x22c>
    1a5c:	49 83 c6 18          	add    $0x18,%r14
    1a60:	4c 39 f5             	cmp    %r14,%rbp
    1a63:	75 e3                	jne    1a48 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x218>
    1a65:	4d 8b 34 24          	mov    (%r12),%r14
	if (__p)
    1a69:	4d 85 f6             	test   %r14,%r14
    1a6c:	74 10                	je     1a7e <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x24e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    1a6e:	49 8b 74 24 10       	mov    0x10(%r12),%rsi
    1a73:	4c 89 f7             	mov    %r14,%rdi
    1a76:	4c 29 f6             	sub    %r14,%rsi
    1a79:	e8 00 00 00 00       	call   1a7e <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x24e>
    1a7e:	49 83 c4 18          	add    $0x18,%r12
    1a82:	4d 39 ec             	cmp    %r13,%r12
    1a85:	75 af                	jne    1a36 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x206>
	if (__p)
    1a87:	48 85 db             	test   %rbx,%rbx
    1a8a:	74 0d                	je     1a99 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x269>
    1a8c:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    1a91:	48 89 df             	mov    %rbx,%rdi
    1a94:	e8 00 00 00 00       	call   1a99 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x269>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    1a99:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
    1a9e:	48 89 c3             	mov    %rax,%rbx
    1aa1:	48 39 44 24 28       	cmp    %rax,0x28(%rsp)
    1aa6:	74 1f                	je     1ac7 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x297>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    1aa8:	48 8b 3b             	mov    (%rbx),%rdi
	if (__p)
    1aab:	48 85 ff             	test   %rdi,%rdi
    1aae:	74 0c                	je     1abc <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x28c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    1ab0:	48 8b 73 10          	mov    0x10(%rbx),%rsi
    1ab4:	48 29 fe             	sub    %rdi,%rsi
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    1ab7:	e8 00 00 00 00       	call   1abc <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x28c>
    1abc:	48 83 c3 18          	add    $0x18,%rbx
    1ac0:	48 39 5c 24 28       	cmp    %rbx,0x28(%rsp)
    1ac5:	75 e1                	jne    1aa8 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x278>
    1ac7:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
    1acc:	be c0 00 00 00       	mov    $0xc0,%esi
    1ad1:	e8 00 00 00 00       	call   1ad6 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x2a6>
    1ad6:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
    1adb:	be 40 00 00 00       	mov    $0x40,%esi
    1ae0:	e8 00 00 00 00       	call   1ae5 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x2b5>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    1ae5:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    mtrxMtrx res (lhs.size(), vector<doubleMtrx>(rhs[0].size(),doubleMtrx(8, vector<double>(8,0))));

    for (size_t i = 0; i < lhs.size(); i++)
    1aea:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
    1af1:	00 00 
    1af3:	48 8b 08             	mov    (%rax),%rcx
    1af6:	48 3b 48 08          	cmp    0x8(%rax),%rcx
    1afa:	0f 84 7f 01 00 00    	je     1c7f <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x44f>
        for (size_t k = 0; k < lhs[0].size(); k++)  
    1b00:	48 8b 01             	mov    (%rcx),%rax
    1b03:	48 39 41 08          	cmp    %rax,0x8(%rcx)
    1b07:	0f 84 3b 01 00 00    	je     1c48 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x418>
    1b0d:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
    1b14:	00 00 
    1b16:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
    1b1b:	48 8d 04 40          	lea    (%rax,%rax,2),%rax
    1b1f:	48 c1 e0 03          	shl    $0x3,%rax
    1b23:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    1b28:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    1b2d:	48 8b 10             	mov    (%rax),%rdx
            for (size_t j = 0; j < rhs[0].size(); j++)
    1b30:	48 8b 02             	mov    (%rdx),%rax
    1b33:	48 39 42 08          	cmp    %rax,0x8(%rdx)
    1b37:	0f 84 de 00 00 00    	je     1c1b <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x3eb>
    1b3d:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    1b42:	31 ed                	xor    %ebp,%ebp
    1b44:	4c 8d 2c 40          	lea    (%rax,%rax,2),%r13
    1b48:	49 c1 e5 03          	shl    $0x3,%r13
    1b4c:	0f 1f 40 00          	nopl   0x0(%rax)
	return *(this->_M_impl._M_start + __n);
    1b50:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
    1b55:	4a 8b 04 2a          	mov    (%rdx,%r13,1),%rax
    1b59:	48 8d 5c 6d 00       	lea    0x0(%rbp,%rbp,2),%rbx
                opAddAs_dM_mnl(res[i][j], opMltply_dM_mnl(lhs[i][k], rhs[k][j]));
    1b5e:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
    1b63:	48 c1 e3 03          	shl    $0x3,%rbx
    1b67:	4a 8b 34 31          	mov    (%rcx,%r14,1),%rsi
    1b6b:	48 01 d8             	add    %rbx,%rax
    1b6e:	48 89 c2             	mov    %rax,%rdx
    1b71:	4c 89 e7             	mov    %r12,%rdi
    1b74:	4c 01 ee             	add    %r13,%rsi
    1b77:	e8 00 00 00 00       	call   1b7c <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x34c>
	return *(this->_M_impl._M_start + __n);
    1b7c:	49 8b 07             	mov    (%r15),%rax
    1b7f:	4c 89 e6             	mov    %r12,%rsi
    1b82:	4a 03 1c 30          	add    (%rax,%r14,1),%rbx
    1b86:	48 89 df             	mov    %rbx,%rdi
    1b89:	e8 00 00 00 00       	call   1b8e <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x35e>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    1b8e:	4c 8b a4 24 80 00 00 	mov    0x80(%rsp),%r12
    1b95:	00 
    1b96:	48 8b 9c 24 88 00 00 	mov    0x88(%rsp),%rbx
    1b9d:	00 
    1b9e:	4d 89 e6             	mov    %r12,%r14
    1ba1:	4c 39 e3             	cmp    %r12,%rbx
    1ba4:	74 27                	je     1bcd <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x39d>
    1ba6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1bad:	00 00 00 
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    1bb0:	49 8b 3e             	mov    (%r14),%rdi
	if (__p)
    1bb3:	48 85 ff             	test   %rdi,%rdi
    1bb6:	74 0c                	je     1bc4 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x394>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    1bb8:	49 8b 76 10          	mov    0x10(%r14),%rsi
    1bbc:	48 29 fe             	sub    %rdi,%rsi
    1bbf:	e8 00 00 00 00       	call   1bc4 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x394>
    1bc4:	49 83 c6 18          	add    $0x18,%r14
    1bc8:	4c 39 f3             	cmp    %r14,%rbx
    1bcb:	75 e3                	jne    1bb0 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x380>
	if (__p)
    1bcd:	4d 85 e4             	test   %r12,%r12
    1bd0:	74 13                	je     1be5 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x3b5>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    1bd2:	48 8b b4 24 90 00 00 	mov    0x90(%rsp),%rsi
    1bd9:	00 
    1bda:	4c 89 e7             	mov    %r12,%rdi
    1bdd:	4c 29 e6             	sub    %r12,%rsi
    1be0:	e8 00 00 00 00       	call   1be5 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x3b5>
	return *(this->_M_impl._M_start + __n);
    1be5:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
            for (size_t j = 0; j < rhs[0].size(); j++)
    1bea:	48 83 c5 01          	add    $0x1,%rbp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    1bee:	48 bb ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rbx
    1bf5:	aa aa aa 
	return *(this->_M_impl._M_start + __n);
    1bf8:	48 8b 10             	mov    (%rax),%rdx
    1bfb:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    1c00:	48 8b 08             	mov    (%rax),%rcx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    1c03:	48 8b 42 08          	mov    0x8(%rdx),%rax
    1c07:	48 2b 02             	sub    (%rdx),%rax
    1c0a:	48 c1 f8 03          	sar    $0x3,%rax
    1c0e:	48 0f af c3          	imul   %rbx,%rax
    1c12:	48 39 c5             	cmp    %rax,%rbp
    1c15:	0f 82 35 ff ff ff    	jb     1b50 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x320>
    1c1b:	48 8b 41 08          	mov    0x8(%rcx),%rax
    1c1f:	48 2b 01             	sub    (%rcx),%rax
    1c22:	48 bf ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rdi
    1c29:	aa aa aa 
    1c2c:	48 c1 f8 03          	sar    $0x3,%rax
        for (size_t k = 0; k < lhs[0].size(); k++)  
    1c30:	48 83 44 24 28 01    	addq   $0x1,0x28(%rsp)
    1c36:	48 8b 5c 24 28       	mov    0x28(%rsp),%rbx
    1c3b:	48 0f af c7          	imul   %rdi,%rax
    1c3f:	48 39 c3             	cmp    %rax,%rbx
    1c42:	0f 82 e8 fe ff ff    	jb     1b30 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x300>
    1c48:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    for (size_t i = 0; i < lhs.size(); i++)
    1c4d:	48 83 44 24 30 01    	addq   $0x1,0x30(%rsp)
    1c53:	48 bb ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rbx
    1c5a:	aa aa aa 
    1c5d:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
    1c62:	48 8b 40 08          	mov    0x8(%rax),%rax
    1c66:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    1c6b:	48 29 c8             	sub    %rcx,%rax
    1c6e:	48 c1 f8 03          	sar    $0x3,%rax
    1c72:	48 0f af c3          	imul   %rbx,%rax
    1c76:	48 39 c2             	cmp    %rax,%rdx
    1c79:	0f 82 81 fe ff ff    	jb     1b00 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x2d0>

    return res;
}
    1c7f:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
    1c86:	4c 89 f8             	mov    %r15,%rax
    1c89:	5b                   	pop    %rbx
    1c8a:	5d                   	pop    %rbp
    1c8b:	41 5c                	pop    %r12
    1c8d:	41 5d                	pop    %r13
    1c8f:	41 5e                	pop    %r14
    1c91:	41 5f                	pop    %r15
    1c93:	c3                   	ret    
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    1c94:	31 ff                	xor    %edi,%edi
    1c96:	e9 62 fd ff ff       	jmp    19fd <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x1cd>
	  __throw_length_error(
    1c9b:	bf 00 00 00 00       	mov    $0x0,%edi
    1ca0:	e8 00 00 00 00       	call   1ca5 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x475>
    1ca5:	bf 00 00 00 00       	mov    $0x0,%edi
    1caa:	e8 00 00 00 00       	call   1caf <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x47f>
      __catch(...)
    1caf:	48 89 c7             	mov    %rax,%rdi
    1cb2:	e9 00 00 00 00       	jmp    1cb7 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x487>
      { _M_fill_initialize(__n, __value); }
    1cb7:	48 89 c3             	mov    %rax,%rbx
    1cba:	e9 00 00 00 00       	jmp    1cbf <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x48f>
      }
    1cbf:	48 89 c3             	mov    %rax,%rbx
    1cc2:	4c 8d 64 24 40       	lea    0x40(%rsp),%r12
    1cc7:	c5 f8 77             	vzeroupper 
    1cca:	e9 00 00 00 00       	jmp    1ccf <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x49f>
    mtrxMtrx res (lhs.size(), vector<doubleMtrx>(rhs[0].size(),doubleMtrx(8, vector<double>(8,0))));
    1ccf:	48 89 c3             	mov    %rax,%rbx
    1cd2:	48 8d 84 24 80 00 00 	lea    0x80(%rsp),%rax
    1cd9:	00 
    1cda:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    1cdf:	c5 f8 77             	vzeroupper 
    1ce2:	e9 00 00 00 00       	jmp    1ce7 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x4b7>
      { _M_fill_initialize(__n, __value); }
    1ce7:	48 89 c3             	mov    %rax,%rbx
    1cea:	e9 00 00 00 00       	jmp    1cef <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x4bf>
}
    1cef:	48 89 c3             	mov    %rax,%rbx
    1cf2:	e9 00 00 00 00       	jmp    1cf7 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x4c7>
    mtrxMtrx res (lhs.size(), vector<doubleMtrx>(rhs[0].size(),doubleMtrx(8, vector<double>(8,0))));
    1cf7:	48 89 c3             	mov    %rax,%rbx
    1cfa:	48 8d 6c 24 60       	lea    0x60(%rsp),%rbp
    1cff:	c5 f8 77             	vzeroupper 
    1d02:	e9 00 00 00 00       	jmp    1d07 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x4d7>

Disassembly of section .text._ZNKSt5ctypeIcE8do_widenEc:

0000000000000000 <_ZNKSt5ctypeIcE8do_widenEc>:
       *
       *  @param __c  The char to convert.
       *  @return  The converted character.
      */
      virtual char_type
      do_widen(char __c) const
   0:	89 f0                	mov    %esi,%eax
      { return __c; }
   2:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIdSaIdEEC2EmRKS0_:

0000000000000000 <_ZNSt6vectorIdSaIdEEC1EmRKS0_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
   0:	41 55                	push   %r13
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   2:	48 89 f0             	mov    %rsi,%rax
      vector(size_type __n, const allocator_type& __a = allocator_type())
   5:	41 54                	push   %r12
   7:	55                   	push   %rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 08          	sub    $0x8,%rsp
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   d:	48 c1 e8 3c          	shr    $0x3c,%rax
  11:	0f 85 b3 00 00 00    	jne    ca <_ZNSt6vectorIdSaIdEEC1EmRKS0_+0xca>
	: _M_start(), _M_finish(), _M_end_of_storage()
  17:	c5 f9 ef c0          	vpxor  %xmm0,%xmm0,%xmm0
  1b:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
  22:	00 
  23:	48 89 fb             	mov    %rdi,%rbx
  26:	48 89 f5             	mov    %rsi,%rbp
  29:	c5 fa 7f 07          	vmovdqu %xmm0,(%rdi)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  2d:	48 85 f6             	test   %rsi,%rsi
  30:	74 5e                	je     90 <_ZNSt6vectorIdSaIdEEC1EmRKS0_+0x90>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
  32:	4c 8d 2c f5 00 00 00 	lea    0x0(,%rsi,8),%r13
  39:	00 
  3a:	4c 89 ef             	mov    %r13,%rdi
  3d:	e8 00 00 00 00       	call   42 <_ZNSt6vectorIdSaIdEEC1EmRKS0_+0x42>
	this->_M_impl._M_start = this->_M_allocate(__n);
  42:	c4 e1 f9 6e c8       	vmovq  %rax,%xmm1
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  47:	4e 8d 24 28          	lea    (%rax,%r13,1),%r12
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
  4b:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	      ++__first;
  52:	48 8d 78 08          	lea    0x8(%rax),%rdi
	this->_M_impl._M_start = this->_M_allocate(__n);
  56:	c5 f1 6c c1          	vpunpcklqdq %xmm1,%xmm1,%xmm0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  5a:	4c 89 63 10          	mov    %r12,0x10(%rbx)
	this->_M_impl._M_start = this->_M_allocate(__n);
  5e:	c5 fa 7f 03          	vmovdqu %xmm0,(%rbx)
      if (__n <= 0)
  62:	48 83 fd 01          	cmp    $0x1,%rbp
  66:	74 50                	je     b8 <_ZNSt6vectorIdSaIdEEC1EmRKS0_+0xb8>
      for (; __first != __last; ++__first)
  68:	49 39 fc             	cmp    %rdi,%r12
  6b:	74 0b                	je     78 <_ZNSt6vectorIdSaIdEEC1EmRKS0_+0x78>
	*__first = __tmp;
  6d:	49 8d 55 f8          	lea    -0x8(%r13),%rdx
  71:	31 f6                	xor    %esi,%esi
  73:	e8 00 00 00 00       	call   78 <_ZNSt6vectorIdSaIdEEC1EmRKS0_+0x78>
	this->_M_impl._M_finish =
  78:	4c 89 63 08          	mov    %r12,0x8(%rbx)
      { _M_default_initialize(__n); }
  7c:	48 83 c4 08          	add    $0x8,%rsp
  80:	5b                   	pop    %rbx
  81:	5d                   	pop    %rbp
  82:	41 5c                	pop    %r12
  84:	41 5d                	pop    %r13
  86:	c3                   	ret    
  87:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  8e:	00 00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  90:	45 31 e4             	xor    %r12d,%r12d
	this->_M_impl._M_start = this->_M_allocate(__n);
  93:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  9a:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
  a1:	00 
	this->_M_impl._M_finish =
  a2:	4c 89 63 08          	mov    %r12,0x8(%rbx)
      { _M_default_initialize(__n); }
  a6:	48 83 c4 08          	add    $0x8,%rsp
  aa:	5b                   	pop    %rbx
  ab:	5d                   	pop    %rbp
  ac:	41 5c                	pop    %r12
  ae:	41 5d                	pop    %r13
  b0:	c3                   	ret    
  b1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	return __first;
  b8:	49 89 fc             	mov    %rdi,%r12
	this->_M_impl._M_finish =
  bb:	4c 89 63 08          	mov    %r12,0x8(%rbx)
      { _M_default_initialize(__n); }
  bf:	48 83 c4 08          	add    $0x8,%rsp
  c3:	5b                   	pop    %rbx
  c4:	5d                   	pop    %rbp
  c5:	41 5c                	pop    %r12
  c7:	41 5d                	pop    %r13
  c9:	c3                   	ret    
	  __throw_length_error(
  ca:	bf 00 00 00 00       	mov    $0x0,%edi
  cf:	e8 00 00 00 00       	call   d4 <_ZNKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE4sizeEv.isra.0+0x4>

Disassembly of section .text._ZNSt6vectorIdSaIdEED2Ev:

0000000000000000 <_ZNSt6vectorIdSaIdEED1Ev>:
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   0:	48 8b 07             	mov    (%rdi),%rax
	if (__p)
   3:	48 85 c0             	test   %rax,%rax
   6:	74 18                	je     20 <_ZNSt6vectorIdSaIdEED1Ev+0x20>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   8:	48 8b 77 10          	mov    0x10(%rdi),%rsi
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   c:	48 89 c7             	mov    %rax,%rdi
   f:	48 29 c6             	sub    %rax,%rsi
  12:	e9 00 00 00 00       	jmp    17 <_ZNSt6vectorIdSaIdEED1Ev+0x17>
  17:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  1e:	00 00 
      }
  20:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIS_IdSaIdEESaIS1_EED2Ev:

0000000000000000 <_ZNSt6vectorIS_IdSaIdEESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   0:	41 54                	push   %r12
   2:	49 89 fc             	mov    %rdi,%r12
   5:	55                   	push   %rbp
   6:	53                   	push   %rbx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   7:	48 8b 6f 08          	mov    0x8(%rdi),%rbp
   b:	48 8b 1f             	mov    (%rdi),%rbx
	  for (; __first != __last; ++__first)
   e:	48 39 dd             	cmp    %rbx,%rbp
  11:	74 26                	je     39 <_ZNSt6vectorIS_IdSaIdEESaIS1_EED1Ev+0x39>
  13:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
  18:	48 8b 3b             	mov    (%rbx),%rdi
	if (__p)
  1b:	48 85 ff             	test   %rdi,%rdi
  1e:	74 0c                	je     2c <_ZNSt6vectorIS_IdSaIdEESaIS1_EED1Ev+0x2c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
  20:	48 8b 73 10          	mov    0x10(%rbx),%rsi
  24:	48 29 fe             	sub    %rdi,%rsi
  27:	e8 00 00 00 00       	call   2c <_ZNSt6vectorIS_IdSaIdEESaIS1_EED1Ev+0x2c>
  2c:	48 83 c3 18          	add    $0x18,%rbx
  30:	48 39 dd             	cmp    %rbx,%rbp
  33:	75 e3                	jne    18 <_ZNSt6vectorIS_IdSaIdEESaIS1_EED1Ev+0x18>
  35:	49 8b 1c 24          	mov    (%r12),%rbx
	if (__p)
  39:	48 85 db             	test   %rbx,%rbx
  3c:	74 1a                	je     58 <_ZNSt6vectorIS_IdSaIdEESaIS1_EED1Ev+0x58>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
  3e:	49 8b 74 24 10       	mov    0x10(%r12),%rsi
  43:	48 89 df             	mov    %rbx,%rdi
  46:	48 29 de             	sub    %rbx,%rsi
      }
  49:	5b                   	pop    %rbx
  4a:	5d                   	pop    %rbp
  4b:	41 5c                	pop    %r12
  4d:	e9 00 00 00 00       	jmp    52 <_ZNSt6vectorIS_IdSaIdEESaIS1_EED1Ev+0x52>
  52:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  58:	5b                   	pop    %rbx
  59:	5d                   	pop    %rbp
  5a:	41 5c                	pop    %r12
  5c:	c3                   	ret    

Disassembly of section .text._ZNSt12_Vector_baseISt6vectorIdSaIdEESaIS2_EED2Ev:

0000000000000000 <_ZNSt12_Vector_baseISt6vectorIdSaIdEESaIS2_EED1Ev>:
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   0:	48 8b 07             	mov    (%rdi),%rax
	if (__p)
   3:	48 85 c0             	test   %rax,%rax
   6:	74 18                	je     20 <_ZNSt12_Vector_baseISt6vectorIdSaIdEESaIS2_EED1Ev+0x20>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   8:	48 8b 77 10          	mov    0x10(%rdi),%rsi
   c:	48 89 c7             	mov    %rax,%rdi
   f:	48 29 c6             	sub    %rax,%rsi
  12:	e9 00 00 00 00       	jmp    17 <_ZNSt12_Vector_baseISt6vectorIdSaIdEESaIS2_EED1Ev+0x17>
  17:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  1e:	00 00 
      }
  20:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIdSaIdEEC2EmRKdRKS0_:

0000000000000000 <_ZNSt6vectorIdSaIdEEC1EmRKdRKS0_>:
      vector(size_type __n, const value_type& __value,
   0:	55                   	push   %rbp
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   1:	48 89 f0             	mov    %rsi,%rax
      vector(size_type __n, const value_type& __value,
   4:	48 89 e5             	mov    %rsp,%rbp
   7:	41 55                	push   %r13
   9:	41 54                	push   %r12
   b:	53                   	push   %rbx
   c:	48 83 e4 e0          	and    $0xffffffffffffffe0,%rsp
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
  10:	48 c1 e8 3c          	shr    $0x3c,%rax
  14:	0f 85 f1 00 00 00    	jne    10b <_ZNSt6vectorIdSaIdEEC1EmRKdRKS0_+0x10b>
	: _M_start(), _M_finish(), _M_end_of_storage()
  1a:	c5 f9 ef c0          	vpxor  %xmm0,%xmm0,%xmm0
  1e:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
  25:	00 
  26:	49 89 fc             	mov    %rdi,%r12
  29:	c5 fa 7f 07          	vmovdqu %xmm0,(%rdi)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  2d:	48 85 f6             	test   %rsi,%rsi
  30:	0f 84 9a 00 00 00    	je     d0 <_ZNSt6vectorIdSaIdEEC1EmRKdRKS0_+0xd0>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
  36:	48 8d 1c f5 00 00 00 	lea    0x0(,%rsi,8),%rbx
  3d:	00 
  3e:	49 89 d5             	mov    %rdx,%r13
  41:	48 89 df             	mov    %rbx,%rdi
  44:	e8 00 00 00 00       	call   49 <_ZNSt6vectorIdSaIdEEC1EmRKdRKS0_+0x49>
  49:	48 8d 73 f8          	lea    -0x8(%rbx),%rsi
  4d:	c4 c1 7b 10 45 00    	vmovsd 0x0(%r13),%xmm0
  53:	48 89 f7             	mov    %rsi,%rdi
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  56:	48 8d 0c 18          	lea    (%rax,%rbx,1),%rcx
	this->_M_impl._M_start = this->_M_allocate(__n);
  5a:	49 89 04 24          	mov    %rax,(%r12)
  5e:	48 89 c2             	mov    %rax,%rdx
  61:	48 c1 ef 03          	shr    $0x3,%rdi
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  65:	49 89 4c 24 10       	mov    %rcx,0x10(%r12)
      for (; __first != __last; ++__first)
  6a:	48 83 c7 01          	add    $0x1,%rdi
  6e:	48 83 fe 10          	cmp    $0x10,%rsi
  72:	76 3c                	jbe    b0 <_ZNSt6vectorIdSaIdEEC1EmRKdRKS0_+0xb0>
  74:	48 89 fe             	mov    %rdi,%rsi
  77:	c5 fb 12 c8          	vmovddup %xmm0,%xmm1
  7b:	48 c1 ee 02          	shr    $0x2,%rsi
  7f:	c4 e3 75 18 c9 01    	vinsertf128 $0x1,%xmm1,%ymm1,%ymm1
  85:	48 c1 e6 05          	shl    $0x5,%rsi
  89:	48 01 c6             	add    %rax,%rsi
  8c:	0f 1f 40 00          	nopl   0x0(%rax)
	*__first = __tmp;
  90:	c5 fd 11 0a          	vmovupd %ymm1,(%rdx)
      for (; __first != __last; ++__first)
  94:	48 83 c2 20          	add    $0x20,%rdx
  98:	48 39 f2             	cmp    %rsi,%rdx
  9b:	75 f3                	jne    90 <_ZNSt6vectorIdSaIdEEC1EmRKdRKS0_+0x90>
  9d:	48 89 fa             	mov    %rdi,%rdx
  a0:	48 83 e2 fc          	and    $0xfffffffffffffffc,%rdx
  a4:	83 e7 03             	and    $0x3,%edi
  a7:	48 8d 04 d0          	lea    (%rax,%rdx,8),%rax
  ab:	74 4b                	je     f8 <_ZNSt6vectorIdSaIdEEC1EmRKdRKS0_+0xf8>
  ad:	c5 f8 77             	vzeroupper 
	*__first = __tmp;
  b0:	c5 fb 11 00          	vmovsd %xmm0,(%rax)
      for (; __first != __last; ++__first)
  b4:	48 83 c0 08          	add    $0x8,%rax
  b8:	48 39 c1             	cmp    %rax,%rcx
  bb:	75 f3                	jne    b0 <_ZNSt6vectorIdSaIdEEC1EmRKdRKS0_+0xb0>
	this->_M_impl._M_finish =
  bd:	49 89 4c 24 08       	mov    %rcx,0x8(%r12)
      { _M_fill_initialize(__n, __value); }
  c2:	48 8d 65 e8          	lea    -0x18(%rbp),%rsp
  c6:	5b                   	pop    %rbx
  c7:	41 5c                	pop    %r12
  c9:	41 5d                	pop    %r13
  cb:	5d                   	pop    %rbp
  cc:	c3                   	ret    
  cd:	0f 1f 00             	nopl   (%rax)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  d0:	31 c9                	xor    %ecx,%ecx
	this->_M_impl._M_start = this->_M_allocate(__n);
  d2:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  d9:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
  e0:	00 
	this->_M_impl._M_finish =
  e1:	49 89 4c 24 08       	mov    %rcx,0x8(%r12)
      { _M_fill_initialize(__n, __value); }
  e6:	48 8d 65 e8          	lea    -0x18(%rbp),%rsp
  ea:	5b                   	pop    %rbx
  eb:	41 5c                	pop    %r12
  ed:	41 5d                	pop    %r13
  ef:	5d                   	pop    %rbp
  f0:	c3                   	ret    
  f1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  f8:	c5 f8 77             	vzeroupper 
	this->_M_impl._M_finish =
  fb:	49 89 4c 24 08       	mov    %rcx,0x8(%r12)
      { _M_fill_initialize(__n, __value); }
 100:	48 8d 65 e8          	lea    -0x18(%rbp),%rsp
 104:	5b                   	pop    %rbx
 105:	41 5c                	pop    %r12
 107:	41 5d                	pop    %r13
 109:	5d                   	pop    %rbp
 10a:	c3                   	ret    
	  __throw_length_error(
 10b:	bf 00 00 00 00       	mov    $0x0,%edi
 110:	e8 00 00 00 00       	call   115 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0+0x25>

Disassembly of section .text._ZNSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EED2Ev:

0000000000000000 <_ZNSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   0:	41 56                	push   %r14
   2:	49 89 fe             	mov    %rdi,%r14
   5:	41 55                	push   %r13
   7:	41 54                	push   %r12
   9:	55                   	push   %rbp
   a:	53                   	push   %rbx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b:	4c 8b 6f 08          	mov    0x8(%rdi),%r13
   f:	4c 8b 27             	mov    (%rdi),%r12
  12:	4d 39 e5             	cmp    %r12,%r13
  15:	74 5b                	je     72 <_ZNSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EED1Ev+0x72>
  17:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  1e:	00 00 
  20:	49 8b 6c 24 08       	mov    0x8(%r12),%rbp
  25:	49 8b 1c 24          	mov    (%r12),%rbx
  29:	48 39 dd             	cmp    %rbx,%rbp
  2c:	74 23                	je     51 <_ZNSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EED1Ev+0x51>
  2e:	66 90                	xchg   %ax,%ax
		      _M_impl._M_end_of_storage - _M_impl._M_start);
  30:	48 8b 3b             	mov    (%rbx),%rdi
	if (__p)
  33:	48 85 ff             	test   %rdi,%rdi
  36:	74 0c                	je     44 <_ZNSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EED1Ev+0x44>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
  38:	48 8b 73 10          	mov    0x10(%rbx),%rsi
  3c:	48 29 fe             	sub    %rdi,%rsi
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
  3f:	e8 00 00 00 00       	call   44 <_ZNSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EED1Ev+0x44>
  44:	48 83 c3 18          	add    $0x18,%rbx
  48:	48 39 dd             	cmp    %rbx,%rbp
  4b:	75 e3                	jne    30 <_ZNSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EED1Ev+0x30>
  4d:	49 8b 1c 24          	mov    (%r12),%rbx
	if (__p)
  51:	48 85 db             	test   %rbx,%rbx
  54:	74 10                	je     66 <_ZNSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EED1Ev+0x66>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
  56:	49 8b 74 24 10       	mov    0x10(%r12),%rsi
  5b:	48 89 df             	mov    %rbx,%rdi
  5e:	48 29 de             	sub    %rbx,%rsi
  61:	e8 00 00 00 00       	call   66 <_ZNSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EED1Ev+0x66>
  66:	49 83 c4 18          	add    $0x18,%r12
  6a:	4d 39 e5             	cmp    %r12,%r13
  6d:	75 b1                	jne    20 <_ZNSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EED1Ev+0x20>
  6f:	4d 8b 26             	mov    (%r14),%r12
	if (__p)
  72:	4d 85 e4             	test   %r12,%r12
  75:	74 17                	je     8e <_ZNSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EED1Ev+0x8e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
  77:	49 8b 76 10          	mov    0x10(%r14),%rsi
      }
  7b:	5b                   	pop    %rbx
  7c:	4c 89 e7             	mov    %r12,%rdi
  7f:	5d                   	pop    %rbp
		      _M_impl._M_end_of_storage - _M_impl._M_start);
  80:	4c 29 e6             	sub    %r12,%rsi
      }
  83:	41 5c                	pop    %r12
  85:	41 5d                	pop    %r13
  87:	41 5e                	pop    %r14
  89:	e9 00 00 00 00       	jmp    8e <_ZNSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EED1Ev+0x8e>
  8e:	5b                   	pop    %rbx
  8f:	5d                   	pop    %rbp
  90:	41 5c                	pop    %r12
  92:	41 5d                	pop    %r13
  94:	41 5e                	pop    %r14
  96:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EED2Ev:

0000000000000000 <_ZNSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   0:	41 57                	push   %r15
   2:	41 56                	push   %r14
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	55                   	push   %rbp
   9:	53                   	push   %rbx
   a:	48 83 ec 18          	sub    $0x18,%rsp
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   e:	4c 8b 77 08          	mov    0x8(%rdi),%r14
  12:	4c 8b 2f             	mov    (%rdi),%r13
      ~vector() _GLIBCXX_NOEXCEPT
  15:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  1a:	4d 39 ee             	cmp    %r13,%r14
  1d:	0f 84 8c 00 00 00    	je     af <_ZNSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EED1Ev+0xaf>
  23:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  28:	4d 8b 65 08          	mov    0x8(%r13),%r12
  2c:	49 8b 6d 00          	mov    0x0(%r13),%rbp
  30:	49 39 ec             	cmp    %rbp,%r12
  33:	74 55                	je     8a <_ZNSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EED1Ev+0x8a>
  35:	0f 1f 00             	nopl   (%rax)
  38:	48 8b 5d 08          	mov    0x8(%rbp),%rbx
  3c:	4c 8b 7d 00          	mov    0x0(%rbp),%r15
  40:	4c 39 fb             	cmp    %r15,%rbx
  43:	74 24                	je     69 <_ZNSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EED1Ev+0x69>
  45:	0f 1f 00             	nopl   (%rax)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
  48:	49 8b 3f             	mov    (%r15),%rdi
	if (__p)
  4b:	48 85 ff             	test   %rdi,%rdi
  4e:	74 0c                	je     5c <_ZNSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EED1Ev+0x5c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
  50:	49 8b 77 10          	mov    0x10(%r15),%rsi
  54:	48 29 fe             	sub    %rdi,%rsi
  57:	e8 00 00 00 00       	call   5c <_ZNSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EED1Ev+0x5c>
  5c:	49 83 c7 18          	add    $0x18,%r15
  60:	4c 39 fb             	cmp    %r15,%rbx
  63:	75 e3                	jne    48 <_ZNSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EED1Ev+0x48>
  65:	4c 8b 7d 00          	mov    0x0(%rbp),%r15
	if (__p)
  69:	4d 85 ff             	test   %r15,%r15
  6c:	74 0f                	je     7d <_ZNSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EED1Ev+0x7d>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
  6e:	48 8b 75 10          	mov    0x10(%rbp),%rsi
  72:	4c 89 ff             	mov    %r15,%rdi
  75:	4c 29 fe             	sub    %r15,%rsi
  78:	e8 00 00 00 00       	call   7d <_ZNSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EED1Ev+0x7d>
  7d:	48 83 c5 18          	add    $0x18,%rbp
  81:	49 39 ec             	cmp    %rbp,%r12
  84:	75 b2                	jne    38 <_ZNSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EED1Ev+0x38>
  86:	49 8b 6d 00          	mov    0x0(%r13),%rbp
	if (__p)
  8a:	48 85 ed             	test   %rbp,%rbp
  8d:	74 0f                	je     9e <_ZNSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EED1Ev+0x9e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
  8f:	49 8b 75 10          	mov    0x10(%r13),%rsi
  93:	48 89 ef             	mov    %rbp,%rdi
  96:	48 29 ee             	sub    %rbp,%rsi
  99:	e8 00 00 00 00       	call   9e <_ZNSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EED1Ev+0x9e>
  9e:	49 83 c5 18          	add    $0x18,%r13
  a2:	4d 39 ee             	cmp    %r13,%r14
  a5:	75 81                	jne    28 <_ZNSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EED1Ev+0x28>
  a7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  ac:	4c 8b 28             	mov    (%rax),%r13
	if (__p)
  af:	4d 85 ed             	test   %r13,%r13
  b2:	74 22                	je     d6 <_ZNSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EED1Ev+0xd6>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
  b4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  b9:	4c 89 ef             	mov    %r13,%rdi
  bc:	48 8b 70 10          	mov    0x10(%rax),%rsi
      }
  c0:	48 83 c4 18          	add    $0x18,%rsp
  c4:	5b                   	pop    %rbx
  c5:	5d                   	pop    %rbp
		      _M_impl._M_end_of_storage - _M_impl._M_start);
  c6:	4c 29 ee             	sub    %r13,%rsi
      }
  c9:	41 5c                	pop    %r12
  cb:	41 5d                	pop    %r13
  cd:	41 5e                	pop    %r14
  cf:	41 5f                	pop    %r15
  d1:	e9 00 00 00 00       	jmp    d6 <_ZNSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EED1Ev+0xd6>
  d6:	48 83 c4 18          	add    $0x18,%rsp
  da:	5b                   	pop    %rbx
  db:	5d                   	pop    %rbp
  dc:	41 5c                	pop    %r12
  de:	41 5d                	pop    %r13
  e0:	41 5e                	pop    %r14
  e2:	41 5f                	pop    %r15
  e4:	c3                   	ret    

Disassembly of section .text._ZNSt12_Vector_baseISt6vectorIS0_IS0_IdSaIdEESaIS2_EESaIS4_EESaIS6_EED2Ev:

0000000000000000 <_ZNSt12_Vector_baseISt6vectorIS0_IS0_IdSaIdEESaIS2_EESaIS4_EESaIS6_EED1Ev>:
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   0:	48 8b 07             	mov    (%rdi),%rax
	if (__p)
   3:	48 85 c0             	test   %rax,%rax
   6:	74 18                	je     20 <_ZNSt12_Vector_baseISt6vectorIS0_IS0_IdSaIdEESaIS2_EESaIS4_EESaIS6_EED1Ev+0x20>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   8:	48 8b 77 10          	mov    0x10(%rdi),%rsi
   c:	48 89 c7             	mov    %rax,%rdi
   f:	48 29 c6             	sub    %rax,%rsi
  12:	e9 00 00 00 00       	jmp    17 <_ZNSt12_Vector_baseISt6vectorIS0_IS0_IdSaIdEESaIS2_EESaIS4_EESaIS6_EED1Ev+0x17>
  17:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  1e:	00 00 
      }
  20:	c3                   	ret    

Disassembly of section .text._ZNSt12_Vector_baseIdSaIdEED2Ev:

0000000000000000 <_ZNSt12_Vector_baseIdSaIdEED1Ev>:
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   0:	48 8b 07             	mov    (%rdi),%rax
	if (__p)
   3:	48 85 c0             	test   %rax,%rax
   6:	74 18                	je     20 <_ZNSt12_Vector_baseIdSaIdEED1Ev+0x20>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   8:	48 8b 77 10          	mov    0x10(%rdi),%rsi
   c:	48 89 c7             	mov    %rax,%rdi
   f:	48 29 c6             	sub    %rax,%rsi
  12:	e9 00 00 00 00       	jmp    17 <_ZNSt12_Vector_baseIdSaIdEED1Ev+0x17>
  17:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  1e:	00 00 
      }
  20:	c3                   	ret    

Disassembly of section .text._ZNSt12_Vector_baseISt6vectorIS0_IdSaIdEESaIS2_EESaIS4_EED2Ev:

0000000000000000 <_ZNSt12_Vector_baseISt6vectorIS0_IdSaIdEESaIS2_EESaIS4_EED1Ev>:
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   0:	48 8b 07             	mov    (%rdi),%rax
	if (__p)
   3:	48 85 c0             	test   %rax,%rax
   6:	74 18                	je     20 <_ZNSt12_Vector_baseISt6vectorIS0_IdSaIdEESaIS2_EESaIS4_EED1Ev+0x20>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   8:	48 8b 77 10          	mov    0x10(%rdi),%rsi
   c:	48 89 c7             	mov    %rax,%rdi
   f:	48 29 c6             	sub    %rax,%rsi
  12:	e9 00 00 00 00       	jmp    17 <_ZNSt12_Vector_baseISt6vectorIS0_IdSaIdEESaIS2_EESaIS4_EED1Ev+0x17>
  17:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  1e:	00 00 
      }
  20:	c3                   	ret    

Disassembly of section .text._ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE11_M_gen_randEv:

0000000000000000 <_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE11_M_gen_randEv>:
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
   0:	48 89 f9             	mov    %rdi,%rcx
   3:	48 89 f8             	mov    %rdi,%rax
   6:	c5 c1 ef ff          	vpxor  %xmm7,%xmm7,%xmm7
		       ^ ((__y & 0x01) ? __a : 0));
   a:	be df b0 08 99       	mov    $0x9908b0df,%esi
   f:	48 8d 97 10 07 00 00 	lea    0x710(%rdi),%rdx
	  _UIntType __y = ((_M_x[__k] & __upper_mask)
  16:	48 c7 c7 00 00 00 80 	mov    $0xffffffff80000000,%rdi
		       ^ ((__y & 0x01) ? __a : 0));
  1d:	c4 e1 f9 6e d6       	vmovq  %rsi,%xmm2
	  _UIntType __y = ((_M_x[__k] & __upper_mask)
  22:	c4 e1 f9 6e ef       	vmovq  %rdi,%xmm5
			   | (_M_x[__k + 1] & __lower_mask));
  27:	bf ff ff ff 7f       	mov    $0x7fffffff,%edi
		       ^ ((__y & 0x01) ? __a : 0));
  2c:	c5 e9 6c f2          	vpunpcklqdq %xmm2,%xmm2,%xmm6
			   | (_M_x[__k + 1] & __lower_mask));
  30:	c4 e1 f9 6e e7       	vmovq  %rdi,%xmm4
		       ^ ((__y & 0x01) ? __a : 0));
  35:	bf 01 00 00 00       	mov    $0x1,%edi
	  _UIntType __y = ((_M_x[__k] & __upper_mask)
  3a:	c5 d1 6c ed          	vpunpcklqdq %xmm5,%xmm5,%xmm5
		       ^ ((__y & 0x01) ? __a : 0));
  3e:	c4 e1 f9 6e df       	vmovq  %rdi,%xmm3
			   | (_M_x[__k + 1] & __lower_mask));
  43:	c5 d9 6c e4          	vpunpcklqdq %xmm4,%xmm4,%xmm4
		       ^ ((__y & 0x01) ? __a : 0));
  47:	c5 e1 6c db          	vpunpcklqdq %xmm3,%xmm3,%xmm3
  4b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
			   | (_M_x[__k + 1] & __lower_mask));
  50:	c5 d9 db 48 08       	vpand  0x8(%rax),%xmm4,%xmm1
	  _UIntType __y = ((_M_x[__k] & __upper_mask)
  55:	c5 d1 db 00          	vpand  (%rax),%xmm5,%xmm0
  59:	48 83 c0 10          	add    $0x10,%rax
  5d:	c5 f9 eb c1          	vpor   %xmm1,%xmm0,%xmm0
	  _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)
  61:	c5 f1 73 d0 01       	vpsrlq $0x1,%xmm0,%xmm1
		       ^ ((__y & 0x01) ? __a : 0));
  66:	c5 f9 db c3          	vpand  %xmm3,%xmm0,%xmm0
	  _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)
  6a:	c5 f1 ef 88 58 0c 00 	vpxor  0xc58(%rax),%xmm1,%xmm1
  71:	00 
  72:	c4 e2 79 29 c7       	vpcmpeqq %xmm7,%xmm0,%xmm0
		       ^ ((__y & 0x01) ? __a : 0));
  77:	c5 f1 ef d6          	vpxor  %xmm6,%xmm1,%xmm2
  7b:	c4 e3 69 4c c1 00    	vpblendvb %xmm0,%xmm1,%xmm2,%xmm0
	  _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)
  81:	c5 fa 7f 40 f0       	vmovdqu %xmm0,-0x10(%rax)
      for (size_t __k = 0; __k < (__n - __m); ++__k)
  86:	48 39 d0             	cmp    %rdx,%rax
  89:	75 c5                	jne    50 <_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE11_M_gen_randEv+0x50>
	  _UIntType __y = ((_M_x[__k] & __upper_mask)
  8b:	48 8b 91 10 07 00 00 	mov    0x710(%rcx),%rdx
			   | (_M_x[__k + 1] & __lower_mask));
  92:	48 8b 81 18 07 00 00 	mov    0x718(%rcx),%rax
	  _UIntType __y = ((_M_x[__k] & __upper_mask)
  99:	48 81 e2 00 00 00 80 	and    $0xffffffff80000000,%rdx
			   | (_M_x[__k + 1] & __lower_mask));
  a0:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
	  _UIntType __y = ((_M_x[__k] & __upper_mask)
  a5:	48 09 c2             	or     %rax,%rdx
	  _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)
  a8:	48 89 d0             	mov    %rdx,%rax
  ab:	48 d1 e8             	shr    %rax
  ae:	48 33 81 78 13 00 00 	xor    0x1378(%rcx),%rax
		       ^ ((__y & 0x01) ? __a : 0));
  b5:	48 31 c6             	xor    %rax,%rsi
  b8:	83 e2 01             	and    $0x1,%edx
	  _UIntType __y = ((_M_x[__k] & __upper_mask)
  bb:	48 c7 c2 00 00 00 80 	mov    $0xffffffff80000000,%rdx
  c2:	c4 e1 f9 6e ea       	vmovq  %rdx,%xmm5
			   | (_M_x[__k + 1] & __lower_mask));
  c7:	ba ff ff ff 7f       	mov    $0x7fffffff,%edx
		       ^ ((__y & 0x01) ? __a : 0));
  cc:	48 0f 45 c6          	cmovne %rsi,%rax
			   | (_M_x[__k + 1] & __lower_mask));
  d0:	c4 e1 f9 6e f2       	vmovq  %rdx,%xmm6
	  _UIntType __y = ((_M_x[__k] & __upper_mask)
  d5:	c5 d1 6c dd          	vpunpcklqdq %xmm5,%xmm5,%xmm3
		       ^ ((__y & 0x01) ? __a : 0));
  d9:	ba 01 00 00 00       	mov    $0x1,%edx
  de:	c4 e1 f9 6e fa       	vmovq  %rdx,%xmm7
  e3:	ba df b0 08 99       	mov    $0x9908b0df,%edx
	  _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)
  e8:	48 89 81 10 07 00 00 	mov    %rax,0x710(%rcx)
			   | (_M_x[__k + 1] & __lower_mask));
  ef:	c5 c9 6c d6          	vpunpcklqdq %xmm6,%xmm6,%xmm2
		       ^ ((__y & 0x01) ? __a : 0));
  f3:	c4 e1 f9 6e ea       	vmovq  %rdx,%xmm5
  f8:	c5 c1 6c cf          	vpunpcklqdq %xmm7,%xmm7,%xmm1
  fc:	48 8d 81 18 07 00 00 	lea    0x718(%rcx),%rax
 103:	48 8d b1 78 13 00 00 	lea    0x1378(%rcx),%rsi
 10a:	c5 c1 ef ff          	vpxor  %xmm7,%xmm7,%xmm7
 10e:	c5 d1 6c f5          	vpunpcklqdq %xmm5,%xmm5,%xmm6
			   | (_M_x[__k + 1] & __lower_mask));
 112:	c5 e9 db 60 08       	vpand  0x8(%rax),%xmm2,%xmm4
	  _UIntType __y = ((_M_x[__k] & __upper_mask)
 117:	c5 e1 db 00          	vpand  (%rax),%xmm3,%xmm0
 11b:	48 83 c0 10          	add    $0x10,%rax
 11f:	c5 f9 eb c4          	vpor   %xmm4,%xmm0,%xmm0
	  _M_x[__k] = (_M_x[__k + (__m - __n)] ^ (__y >> 1)
 123:	c5 d9 73 d0 01       	vpsrlq $0x1,%xmm0,%xmm4
		       ^ ((__y & 0x01) ? __a : 0));
 128:	c5 f9 db c1          	vpand  %xmm1,%xmm0,%xmm0
	  _M_x[__k] = (_M_x[__k + (__m - __n)] ^ (__y >> 1)
 12c:	c5 d9 ef a0 d8 f8 ff 	vpxor  -0x728(%rax),%xmm4,%xmm4
 133:	ff 
 134:	c4 e2 79 29 c7       	vpcmpeqq %xmm7,%xmm0,%xmm0
		       ^ ((__y & 0x01) ? __a : 0));
 139:	c5 d9 ef ee          	vpxor  %xmm6,%xmm4,%xmm5
 13d:	c4 e3 51 4c c4 00    	vpblendvb %xmm0,%xmm4,%xmm5,%xmm0
	  _M_x[__k] = (_M_x[__k + (__m - __n)] ^ (__y >> 1)
 143:	c5 fa 7f 40 f0       	vmovdqu %xmm0,-0x10(%rax)
      for (size_t __k = (__n - __m); __k < (__n - 1); ++__k)
 148:	48 39 c6             	cmp    %rax,%rsi
 14b:	75 c5                	jne    112 <_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE11_M_gen_randEv+0x112>
      _UIntType __y = ((_M_x[__n - 1] & __upper_mask)
 14d:	48 8b b1 78 13 00 00 	mov    0x1378(%rcx),%rsi
		       | (_M_x[0] & __lower_mask));
 154:	48 8b 01             	mov    (%rcx),%rax
      _M_p = 0;
 157:	48 c7 81 80 13 00 00 	movq   $0x0,0x1380(%rcx)
 15e:	00 00 00 00 
		       | (_M_x[0] & __lower_mask));
 162:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
      _UIntType __y = ((_M_x[__n - 1] & __upper_mask)
 167:	48 81 e6 00 00 00 80 	and    $0xffffffff80000000,%rsi
 16e:	48 09 c6             	or     %rax,%rsi
      _M_x[__n - 1] = (_M_x[__m - 1] ^ (__y >> 1)
 171:	48 89 f0             	mov    %rsi,%rax
 174:	48 d1 e8             	shr    %rax
 177:	48 33 81 60 0c 00 00 	xor    0xc60(%rcx),%rax
		       ^ ((__y & 0x01) ? __a : 0));
 17e:	48 31 c2             	xor    %rax,%rdx
 181:	83 e6 01             	and    $0x1,%esi
 184:	48 0f 45 c2          	cmovne %rdx,%rax
      _M_x[__n - 1] = (_M_x[__m - 1] ^ (__y >> 1)
 188:	48 89 81 78 13 00 00 	mov    %rax,0x1378(%rcx)
    }
 18f:	c3                   	ret    

Disassembly of section .text.unlikely:

0000000000000000 <_Z8randMtrxRSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE.cold>:
   0:	48 8d bc 24 c0 13 00 	lea    0x13c0(%rsp),%rdi
   7:	00 
   8:	c5 f8 77             	vzeroupper 
   b:	e8 00 00 00 00       	call   10 <_Z8randMtrxRSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE.cold+0x10>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  10:	48 89 df             	mov    %rbx,%rdi
  13:	e8 00 00 00 00       	call   18 <_Z8randMtrxRSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE.cold+0x18>
  18:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  1d:	c5 f8 77             	vzeroupper 
  20:	e8 00 00 00 00       	call   25 <_Z8randMtrxRSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EE.cold+0x25>
  25:	48 89 df             	mov    %rbx,%rdi
  28:	e8 00 00 00 00       	call   2d <_Z15opMltply_dM_noVRKSt6vectorIS_IdSaIdEESaIS1_EES5_.cold>

000000000000002d <_Z15opMltply_dM_noVRKSt6vectorIS_IdSaIdEESaIS1_EES5_.cold>:
    doubleMtrx res (lhs.size(), vector<double>(rhs[0].size()));
  2d:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  32:	e8 00 00 00 00       	call   37 <_Z15opMltply_dM_noVRKSt6vectorIS_IdSaIdEESaIS1_EES5_.cold+0xa>
  37:	48 89 df             	mov    %rbx,%rdi
  3a:	e8 00 00 00 00       	call   3f <_Z15opMltply_dM_mnlRKSt6vectorIS_IdSaIdEESaIS1_EES5_.cold>

000000000000003f <_Z15opMltply_dM_mnlRKSt6vectorIS_IdSaIdEESaIS1_EES5_.cold>:
  3f:	48 89 df             	mov    %rbx,%rdi
  42:	c5 f8 77             	vzeroupper 
  45:	e8 00 00 00 00       	call   4a <_Z15opMltply_dM_mnlRKSt6vectorIS_IdSaIdEESaIS1_EES5_.cold+0xb>
      }
  4a:	4c 89 f7             	mov    %r14,%rdi
  4d:	e8 00 00 00 00       	call   52 <_Z15opMltply_dM_mnlRKSt6vectorIS_IdSaIdEESaIS1_EES5_.cold+0x13>
  52:	4c 89 e7             	mov    %r12,%rdi
  55:	e8 00 00 00 00       	call   5a <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_.cold>

000000000000005a <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_.cold>:
  5a:	4c 89 f7             	mov    %r14,%rdi
  5d:	c5 f8 77             	vzeroupper 
  60:	e8 00 00 00 00       	call   65 <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_.cold+0xb>
  65:	4c 89 ef             	mov    %r13,%rdi
  68:	e8 00 00 00 00       	call   6d <_Z11opMltply_dMRKSt6vectorIS_IdSaIdEESaIS1_EES5_.cold+0x13>
  6d:	48 89 df             	mov    %rbx,%rdi
  70:	e8 00 00 00 00       	call   75 <_Z15opMltply_mM_noVRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold>

0000000000000075 <_Z15opMltply_mM_noVRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold>:
    mtrxMtrx res (lhs.size(), vector<doubleMtrx>(rhs[0].size(),doubleMtrx(8, vector<double>(8,0))));
  75:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  7a:	e8 00 00 00 00       	call   7f <_Z15opMltply_mM_noVRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0xa>
  7f:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  84:	e8 00 00 00 00       	call   89 <_Z15opMltply_mM_noVRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0x14>
  89:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  8e:	e8 00 00 00 00       	call   93 <_Z15opMltply_mM_noVRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0x1e>
  93:	48 89 df             	mov    %rbx,%rdi
  96:	e8 00 00 00 00       	call   9b <_Z15opMltply_mM_noVRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0x26>
}
  9b:	4c 89 ff             	mov    %r15,%rdi
  9e:	e8 00 00 00 00       	call   a3 <_Z15opMltply_mM_noVRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0x2e>
  a3:	48 89 df             	mov    %rbx,%rdi
  a6:	e8 00 00 00 00       	call   ab <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold>

00000000000000ab <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold>:
      __catch(...)
  ab:	c5 f8 77             	vzeroupper 
  ae:	e8 00 00 00 00       	call   b3 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0x8>
  b3:	4c 39 eb             	cmp    %r13,%rbx
  b6:	74 2b                	je     e3 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0x38>
      __pointer->~_Tp();
  b8:	48 89 df             	mov    %rbx,%rdi
	  for (; __first != __last; ++__first)
  bb:	48 83 c3 18          	add    $0x18,%rbx
      __pointer->~_Tp();
  bf:	e8 00 00 00 00       	call   c4 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0x19>
	  for (; __first != __last; ++__first)
  c4:	eb ed                	jmp    b3 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0x8>
      { _M_fill_initialize(__n, __value); }
  c6:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  cb:	c5 f8 77             	vzeroupper 
  ce:	e8 00 00 00 00       	call   d3 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0x28>
      }
  d3:	4c 89 e7             	mov    %r12,%rdi
  d6:	e8 00 00 00 00       	call   db <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0x30>
  db:	48 89 df             	mov    %rbx,%rdi
  de:	e8 00 00 00 00       	call   e3 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0x38>
	  __throw_exception_again;
  e3:	e8 00 00 00 00       	call   e8 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0x3d>
      __catch(...)
  e8:	48 89 c3             	mov    %rax,%rbx
  eb:	c5 f8 77             	vzeroupper 
  ee:	e8 00 00 00 00       	call   f3 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0x48>
      { _M_fill_initialize(__n, __value); }
  f3:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
  fa:	00 
  fb:	e8 00 00 00 00       	call   100 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0x55>
    mtrxMtrx res (lhs.size(), vector<doubleMtrx>(rhs[0].size(),doubleMtrx(8, vector<double>(8,0))));
 100:	48 89 ef             	mov    %rbp,%rdi
 103:	e8 00 00 00 00       	call   108 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0x5d>
 108:	eb c9                	jmp    d3 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0x28>
 10a:	4c 89 ff             	mov    %r15,%rdi
 10d:	c5 f8 77             	vzeroupper 
 110:	e8 00 00 00 00       	call   115 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0x6a>
 115:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
 11a:	48 8d 6c 24 60       	lea    0x60(%rsp),%rbp
 11f:	e8 00 00 00 00       	call   124 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0x79>
 124:	eb da                	jmp    100 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0x55>
}
 126:	4c 89 ff             	mov    %r15,%rdi
 129:	c5 f8 77             	vzeroupper 
 12c:	e8 00 00 00 00       	call   131 <_Z11opMltply_mMRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0x86>
 131:	48 89 df             	mov    %rbx,%rdi
 134:	e8 00 00 00 00       	call   139 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold>

0000000000000139 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold>:
 139:	c5 f8 77             	vzeroupper 
 13c:	e8 00 00 00 00       	call   141 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0x8>
 141:	4c 39 eb             	cmp    %r13,%rbx
 144:	74 2b                	je     171 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0x38>
      __pointer->~_Tp();
 146:	48 89 df             	mov    %rbx,%rdi
	  for (; __first != __last; ++__first)
 149:	48 83 c3 18          	add    $0x18,%rbx
      __pointer->~_Tp();
 14d:	e8 00 00 00 00       	call   152 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0x19>
	  for (; __first != __last; ++__first)
 152:	eb ed                	jmp    141 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0x8>
 154:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
 159:	c5 f8 77             	vzeroupper 
 15c:	e8 00 00 00 00       	call   161 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0x28>
      }
 161:	4c 89 e7             	mov    %r12,%rdi
 164:	e8 00 00 00 00       	call   169 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0x30>
 169:	48 89 df             	mov    %rbx,%rdi
 16c:	e8 00 00 00 00       	call   171 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0x38>
	  __throw_exception_again;
 171:	e8 00 00 00 00       	call   176 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0x3d>
      __catch(...)
 176:	48 89 c3             	mov    %rax,%rbx
 179:	c5 f8 77             	vzeroupper 
 17c:	e8 00 00 00 00       	call   181 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0x48>
      { _M_fill_initialize(__n, __value); }
 181:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
 188:	00 
 189:	e8 00 00 00 00       	call   18e <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0x55>
    mtrxMtrx res (lhs.size(), vector<doubleMtrx>(rhs[0].size(),doubleMtrx(8, vector<double>(8,0))));
 18e:	48 89 ef             	mov    %rbp,%rdi
 191:	e8 00 00 00 00       	call   196 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0x5d>
 196:	eb c9                	jmp    161 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0x28>
 198:	4c 89 ff             	mov    %r15,%rdi
 19b:	c5 f8 77             	vzeroupper 
 19e:	e8 00 00 00 00       	call   1a3 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0x6a>
 1a3:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
 1a8:	48 8d 6c 24 60       	lea    0x60(%rsp),%rbp
 1ad:	e8 00 00 00 00       	call   1b2 <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0x79>
 1b2:	eb da                	jmp    18e <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0x55>
}
 1b4:	4c 89 ff             	mov    %r15,%rdi
 1b7:	c5 f8 77             	vzeroupper 
 1ba:	e8 00 00 00 00       	call   1bf <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0x86>
 1bf:	48 89 df             	mov    %rbx,%rdi
 1c2:	e8 00 00 00 00       	call   1c7 <main.cold>

00000000000001c7 <main.cold>:
    const int N = 150;
    const int M = 180;
    const int K = 300;
    // mtrxMtrx A (M, vector<doubleMtrx>(K, doubleMtrx(8, vector<double>(8, 2))));
    // mtrxMtrx B (K, vector<doubleMtrx>(N, doubleMtrx(8, vector<double>(8, 3))));
    mtrxMtrx A (M, vector<doubleMtrx>(K, doubleMtrx(8, vector<double>(8,0))));
 1c7:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
 1ce:	00 
 1cf:	c5 f8 77             	vzeroupper 
 1d2:	e8 00 00 00 00       	call   1d7 <main.cold+0x10>
 1d7:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
 1dc:	e8 00 00 00 00       	call   1e1 <main.cold+0x1a>
      }
 1e1:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
 1e6:	e8 00 00 00 00       	call   1eb <main.cold+0x24>
 1eb:	48 89 df             	mov    %rbx,%rdi
 1ee:	e8 00 00 00 00       	call   1f3 <main.cold+0x2c>
    cout << "Time: manual vectorization: " << time << " ms." << endl;

    cmpTest(vecM, mnlvecM);

    return 0;
}
 1f3:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
 1fa:	00 
 1fb:	c5 f8 77             	vzeroupper 
 1fe:	e8 00 00 00 00       	call   203 <main.cold+0x3c>
 203:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
 208:	e8 00 00 00 00       	call   20d <main.cold+0x46>
 20d:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
 212:	e8 00 00 00 00       	call   217 <main.cold+0x50>
 217:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
 21c:	e8 00 00 00 00       	call   221 <main.cold+0x5a>
 221:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
 226:	e8 00 00 00 00       	call   22b <main.cold+0x64>
 22b:	48 89 df             	mov    %rbx,%rdi
 22e:	e8 00 00 00 00       	call   233 <main.cold+0x6c>
    mtrxMtrx B (K, vector<doubleMtrx>(N, doubleMtrx(8, vector<double>(8,0))));
 233:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
 23a:	00 
 23b:	c5 f8 77             	vzeroupper 
 23e:	e8 00 00 00 00       	call   243 <main.cold+0x7c>
 243:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
 248:	e8 00 00 00 00       	call   24d <main.cold+0x86>
 24d:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
 252:	e8 00 00 00 00       	call   257 <main.cold+0x90>
 257:	eb c8                	jmp    221 <main.cold+0x5a>

Disassembly of section .text._ZSt18__do_uninit_fill_nIPSt6vectorIdSaIdEEmS2_ET_S4_T0_RKT1_:

0000000000000000 <_ZSt18__do_uninit_fill_nIPSt6vectorIdSaIdEEmS2_ET_S4_T0_RKT1_>:
    __do_uninit_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
   0:	41 57                	push   %r15
   2:	41 56                	push   %r14
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	55                   	push   %rbp
   9:	53                   	push   %rbx
   a:	48 83 ec 18          	sub    $0x18,%rsp
   e:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
	  for (; __n > 0; --__n, (void) ++__cur)
  13:	48 85 f6             	test   %rsi,%rsi
  16:	0f 84 a4 00 00 00    	je     c0 <_ZSt18__do_uninit_fill_nIPSt6vectorIdSaIdEEmS2_ET_S4_T0_RKT1_+0xc0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  1c:	4c 8b 32             	mov    (%rdx),%r14
  1f:	49 89 f5             	mov    %rsi,%r13
  22:	49 89 d4             	mov    %rdx,%r12
      _ForwardIterator __cur = __first;
  25:	48 89 fd             	mov    %rdi,%rbp
	if (__builtin_expect(__n > this->_M_max_size(), false))
  28:	49 bf f8 ff ff ff ff 	movabs $0x7ffffffffffffff8,%r15
  2f:	ff ff 7f 
  32:	eb 63                	jmp    97 <_ZSt18__do_uninit_fill_nIPSt6vectorIdSaIdEEmS2_ET_S4_T0_RKT1_+0x97>
  34:	0f 1f 40 00          	nopl   0x0(%rax)
  38:	49 39 df             	cmp    %rbx,%r15
  3b:	0f 82 9f 00 00 00    	jb     e0 <_ZSt18__do_uninit_fill_nIPSt6vectorIdSaIdEEmS2_ET_S4_T0_RKT1_+0xe0>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
  41:	48 89 df             	mov    %rbx,%rdi
  44:	e8 00 00 00 00       	call   49 <_ZSt18__do_uninit_fill_nIPSt6vectorIdSaIdEEmS2_ET_S4_T0_RKT1_+0x49>
  49:	48 89 c1             	mov    %rax,%rcx
	this->_M_impl._M_start = this->_M_allocate(__n);
  4c:	c4 e1 f9 6e c9       	vmovq  %rcx,%xmm1
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  51:	48 01 cb             	add    %rcx,%rbx
	this->_M_impl._M_start = this->_M_allocate(__n);
  54:	c5 f1 6c c1          	vpunpcklqdq %xmm1,%xmm1,%xmm0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  58:	48 89 5d 10          	mov    %rbx,0x10(%rbp)
	this->_M_impl._M_start = this->_M_allocate(__n);
  5c:	c5 fa 7f 45 00       	vmovdqu %xmm0,0x0(%rbp)
  61:	49 8b 44 24 08       	mov    0x8(%r12),%rax
  66:	4d 8b 34 24          	mov    (%r12),%r14
	  const ptrdiff_t _Num = __last - __first;
  6a:	48 89 c3             	mov    %rax,%rbx
  6d:	4c 29 f3             	sub    %r14,%rbx
	  if (_Num)
  70:	4c 39 f0             	cmp    %r14,%rax
  73:	74 11                	je     86 <_ZSt18__do_uninit_fill_nIPSt6vectorIdSaIdEEmS2_ET_S4_T0_RKT1_+0x86>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
  75:	48 89 cf             	mov    %rcx,%rdi
  78:	48 89 da             	mov    %rbx,%rdx
  7b:	4c 89 f6             	mov    %r14,%rsi
  7e:	e8 00 00 00 00       	call   83 <_ZSt18__do_uninit_fill_nIPSt6vectorIdSaIdEEmS2_ET_S4_T0_RKT1_+0x83>
  83:	48 89 c1             	mov    %rax,%rcx
	  return __result + _Num;
  86:	48 01 d9             	add    %rbx,%rcx
	  for (; __n > 0; --__n, (void) ++__cur)
  89:	48 83 c5 18          	add    $0x18,%rbp
  8d:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
  91:	49 83 ed 01          	sub    $0x1,%r13
  95:	74 2e                	je     c5 <_ZSt18__do_uninit_fill_nIPSt6vectorIdSaIdEEmS2_ET_S4_T0_RKT1_+0xc5>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  97:	49 8b 5c 24 08       	mov    0x8(%r12),%rbx
	: _M_start(), _M_finish(), _M_end_of_storage()
  9c:	c5 f9 ef c0          	vpxor  %xmm0,%xmm0,%xmm0
  a0:	48 c7 45 10 00 00 00 	movq   $0x0,0x10(%rbp)
  a7:	00 
  a8:	c5 fa 7f 45 00       	vmovdqu %xmm0,0x0(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  ad:	4c 29 f3             	sub    %r14,%rbx
  b0:	75 86                	jne    38 <_ZSt18__do_uninit_fill_nIPSt6vectorIdSaIdEEmS2_ET_S4_T0_RKT1_+0x38>
  b2:	31 c9                	xor    %ecx,%ecx
  b4:	eb 96                	jmp    4c <_ZSt18__do_uninit_fill_nIPSt6vectorIdSaIdEEmS2_ET_S4_T0_RKT1_+0x4c>
  b6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  bd:	00 00 00 
      _ForwardIterator __cur = __first;
  c0:	48 8b 6c 24 08       	mov    0x8(%rsp),%rbp
    }
  c5:	48 83 c4 18          	add    $0x18,%rsp
  c9:	48 89 e8             	mov    %rbp,%rax
  cc:	5b                   	pop    %rbx
  cd:	5d                   	pop    %rbp
  ce:	41 5c                	pop    %r12
  d0:	41 5d                	pop    %r13
  d2:	41 5e                	pop    %r14
  d4:	41 5f                	pop    %r15
  d6:	c3                   	ret    
  d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  de:	00 00 
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
  e0:	48 85 db             	test   %rbx,%rbx
  e3:	79 0b                	jns    f0 <_ZSt18__do_uninit_fill_nIPSt6vectorIdSaIdEEmS2_ET_S4_T0_RKT1_+0xf0>
	      std::__throw_bad_array_new_length();
  e5:	e8 00 00 00 00       	call   ea <_ZSt18__do_uninit_fill_nIPSt6vectorIdSaIdEEmS2_ET_S4_T0_RKT1_+0xea>
  ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	    std::__throw_bad_alloc();
  f0:	e8 00 00 00 00       	call   f5 <_ZSt18__do_uninit_fill_nIPSt6vectorIdSaIdEEmS2_ET_S4_T0_RKT1_+0xf5>
      __catch(...)
  f5:	48 89 c7             	mov    %rax,%rdi
  f8:	c5 f8 77             	vzeroupper 
  fb:	e8 00 00 00 00       	call   100 <_ZSt18__do_uninit_fill_nIPSt6vectorIdSaIdEEmS2_ET_S4_T0_RKT1_+0x100>
 100:	48 39 6c 24 08       	cmp    %rbp,0x8(%rsp)
 105:	74 1b                	je     122 <_ZSt18__do_uninit_fill_nIPSt6vectorIdSaIdEEmS2_ET_S4_T0_RKT1_+0x122>
      }
 107:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
 10c:	48 89 df             	mov    %rbx,%rdi
 10f:	e8 00 00 00 00       	call   114 <_ZSt18__do_uninit_fill_nIPSt6vectorIdSaIdEEmS2_ET_S4_T0_RKT1_+0x114>
 114:	48 89 d8             	mov    %rbx,%rax
 117:	48 83 c0 18          	add    $0x18,%rax
 11b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
 120:	eb de                	jmp    100 <_ZSt18__do_uninit_fill_nIPSt6vectorIdSaIdEEmS2_ET_S4_T0_RKT1_+0x100>
	  __throw_exception_again;
 122:	e8 00 00 00 00       	call   127 <_ZSt18__do_uninit_fill_nIPSt6vectorIdSaIdEEmS2_ET_S4_T0_RKT1_+0x127>
      __catch(...)
 127:	48 89 c3             	mov    %rax,%rbx
 12a:	c5 f8 77             	vzeroupper 
 12d:	e8 00 00 00 00       	call   132 <_ZSt18__do_uninit_fill_nIPSt6vectorIdSaIdEEmS2_ET_S4_T0_RKT1_+0x132>
 132:	48 89 df             	mov    %rbx,%rdi
 135:	e8 00 00 00 00       	call   13a <_Z15opMltply_mM_mnlRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_.cold+0x1>

Disassembly of section .text._ZNSt6vectorIS_IdSaIdEESaIS1_EEC2EmRKS1_RKS2_:

0000000000000000 <_ZNSt6vectorIS_IdSaIdEESaIS1_EEC1EmRKS1_RKS2_>:
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   0:	48 b8 55 55 55 55 55 	movabs $0x555555555555555,%rax
   7:	55 55 05 
      vector(size_type __n, const value_type& __value,
   a:	41 55                	push   %r13
   c:	41 54                	push   %r12
   e:	55                   	push   %rbp
   f:	53                   	push   %rbx
  10:	48 83 ec 08          	sub    $0x8,%rsp
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
  14:	48 39 f0             	cmp    %rsi,%rax
  17:	72 62                	jb     7b <_ZNSt6vectorIS_IdSaIdEESaIS1_EEC1EmRKS1_RKS2_+0x7b>
	: _M_start(), _M_finish(), _M_end_of_storage()
  19:	c5 f9 ef c0          	vpxor  %xmm0,%xmm0,%xmm0
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
  1d:	4c 8d 24 76          	lea    (%rsi,%rsi,2),%r12
  21:	48 89 fd             	mov    %rdi,%rbp
  24:	48 89 f3             	mov    %rsi,%rbx
  27:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
  2e:	00 
  2f:	49 89 d5             	mov    %rdx,%r13
  32:	49 c1 e4 03          	shl    $0x3,%r12
  36:	c5 fa 7f 07          	vmovdqu %xmm0,(%rdi)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  3a:	31 ff                	xor    %edi,%edi
  3c:	48 85 f6             	test   %rsi,%rsi
  3f:	74 0b                	je     4c <_ZNSt6vectorIS_IdSaIdEESaIS1_EEC1EmRKS1_RKS2_+0x4c>
  41:	4c 89 e7             	mov    %r12,%rdi
  44:	e8 00 00 00 00       	call   49 <_ZNSt6vectorIS_IdSaIdEESaIS1_EEC1EmRKS1_RKS2_+0x49>
  49:	48 89 c7             	mov    %rax,%rdi
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  4c:	49 01 fc             	add    %rdi,%r12
	this->_M_impl._M_start = this->_M_allocate(__n);
  4f:	c4 e1 f9 6e cf       	vmovq  %rdi,%xmm1
	{ return std::__do_uninit_fill_n(__first, __n, __x); }
  54:	4c 89 ea             	mov    %r13,%rdx
  57:	48 89 de             	mov    %rbx,%rsi
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  5a:	4c 89 65 10          	mov    %r12,0x10(%rbp)
	this->_M_impl._M_start = this->_M_allocate(__n);
  5e:	c5 f1 6c c1          	vpunpcklqdq %xmm1,%xmm1,%xmm0
  62:	c5 fa 7f 45 00       	vmovdqu %xmm0,0x0(%rbp)
  67:	e8 00 00 00 00       	call   6c <_ZNSt6vectorIS_IdSaIdEESaIS1_EEC1EmRKS1_RKS2_+0x6c>
	this->_M_impl._M_finish =
  6c:	48 89 45 08          	mov    %rax,0x8(%rbp)
      { _M_fill_initialize(__n, __value); }
  70:	48 83 c4 08          	add    $0x8,%rsp
  74:	5b                   	pop    %rbx
  75:	5d                   	pop    %rbp
  76:	41 5c                	pop    %r12
  78:	41 5d                	pop    %r13
  7a:	c3                   	ret    
	  __throw_length_error(
  7b:	bf 00 00 00 00       	mov    $0x0,%edi
  80:	e8 00 00 00 00       	call   85 <_ZNSt6vectorIS_IdSaIdEESaIS1_EEC1EmRKS1_RKS2_+0x85>
      { _M_fill_initialize(__n, __value); }
  85:	48 89 c3             	mov    %rax,%rbx
  88:	48 89 ef             	mov    %rbp,%rdi
  8b:	c5 f8 77             	vzeroupper 
  8e:	e8 00 00 00 00       	call   93 <_ZNSt6vectorIS_IdSaIdEESaIS1_EEC1EmRKS1_RKS2_+0x93>
  93:	48 89 df             	mov    %rbx,%rdi
  96:	e8 00 00 00 00       	call   9b <_ZNKSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EEixEm.isra.0+0xb>

Disassembly of section .text._ZNSt6vectorIS_IdSaIdEESaIS1_EEC2ERKS3_:

0000000000000000 <_ZNSt6vectorIS_IdSaIdEESaIS1_EEC1ERKS3_>:
      vector(const vector& __x)
   0:	41 57                	push   %r15
	: _M_start(), _M_finish(), _M_end_of_storage()
   2:	c5 f9 ef c0          	vpxor  %xmm0,%xmm0,%xmm0
      vector(const vector& __x)
   6:	41 56                	push   %r14
   8:	41 55                	push   %r13
   a:	49 89 fd             	mov    %rdi,%r13
   d:	41 54                	push   %r12
   f:	55                   	push   %rbp
  10:	48 89 f5             	mov    %rsi,%rbp
  13:	53                   	push   %rbx
  14:	48 83 ec 18          	sub    $0x18,%rsp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  18:	48 8b 5e 08          	mov    0x8(%rsi),%rbx
  1c:	48 2b 1e             	sub    (%rsi),%rbx
	: _M_start(), _M_finish(), _M_end_of_storage()
  1f:	c5 fa 7f 07          	vmovdqu %xmm0,(%rdi)
  23:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
  2a:	00 
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  2b:	0f 84 ff 00 00 00    	je     130 <_ZNSt6vectorIS_IdSaIdEESaIS1_EEC1ERKS3_+0x130>
	if (__builtin_expect(__n > this->_M_max_size(), false))
  31:	48 b8 f8 ff ff ff ff 	movabs $0x7ffffffffffffff8,%rax
  38:	ff ff 7f 
  3b:	48 39 d8             	cmp    %rbx,%rax
  3e:	0f 82 11 01 00 00    	jb     155 <_ZNSt6vectorIS_IdSaIdEESaIS1_EEC1ERKS3_+0x155>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
  44:	48 89 df             	mov    %rbx,%rdi
  47:	e8 00 00 00 00       	call   4c <_ZNSt6vectorIS_IdSaIdEESaIS1_EEC1ERKS3_+0x4c>
  4c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  51:	4c 8b 64 24 08       	mov    0x8(%rsp),%r12
	this->_M_impl._M_start = this->_M_allocate(__n);
  56:	c5 fb 12 44 24 08    	vmovddup 0x8(%rsp),%xmm0
  5c:	c4 c1 7a 7f 45 00    	vmovdqu %xmm0,0x0(%r13)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  62:	4c 01 e3             	add    %r12,%rbx
  65:	49 89 5d 10          	mov    %rbx,0x10(%r13)
  69:	4c 8b 75 08          	mov    0x8(%rbp),%r14
  6d:	48 8b 6d 00          	mov    0x0(%rbp),%rbp
	  for (; __first != __last; ++__first, (void)++__cur)
  71:	4c 39 f5             	cmp    %r14,%rbp
  74:	0f 84 9e 00 00 00    	je     118 <_ZNSt6vectorIS_IdSaIdEESaIS1_EEC1ERKS3_+0x118>
	if (__builtin_expect(__n > this->_M_max_size(), false))
  7a:	49 bf f8 ff ff ff ff 	movabs $0x7ffffffffffffff8,%r15
  81:	ff ff 7f 
  84:	eb 6b                	jmp    f1 <_ZNSt6vectorIS_IdSaIdEESaIS1_EEC1ERKS3_+0xf1>
  86:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  8d:	00 00 00 
  90:	49 39 df             	cmp    %rbx,%r15
  93:	0f 82 a7 00 00 00    	jb     140 <_ZNSt6vectorIS_IdSaIdEESaIS1_EEC1ERKS3_+0x140>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
  99:	48 89 df             	mov    %rbx,%rdi
  9c:	e8 00 00 00 00       	call   a1 <_ZNSt6vectorIS_IdSaIdEESaIS1_EEC1ERKS3_+0xa1>
  a1:	48 89 c1             	mov    %rax,%rcx
	this->_M_impl._M_start = this->_M_allocate(__n);
  a4:	c4 e1 f9 6e c9       	vmovq  %rcx,%xmm1
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  a9:	48 01 cb             	add    %rcx,%rbx
	this->_M_impl._M_start = this->_M_allocate(__n);
  ac:	c5 f1 6c c1          	vpunpcklqdq %xmm1,%xmm1,%xmm0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  b0:	49 89 5c 24 10       	mov    %rbx,0x10(%r12)
	this->_M_impl._M_start = this->_M_allocate(__n);
  b5:	c4 c1 7a 7f 04 24    	vmovdqu %xmm0,(%r12)
  bb:	48 8b 45 08          	mov    0x8(%rbp),%rax
  bf:	48 8b 75 00          	mov    0x0(%rbp),%rsi
	  const ptrdiff_t _Num = __last - __first;
  c3:	48 89 c3             	mov    %rax,%rbx
  c6:	48 29 f3             	sub    %rsi,%rbx
	  if (_Num)
  c9:	48 39 f0             	cmp    %rsi,%rax
  cc:	74 0e                	je     dc <_ZNSt6vectorIS_IdSaIdEESaIS1_EEC1ERKS3_+0xdc>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
  ce:	48 89 cf             	mov    %rcx,%rdi
  d1:	48 89 da             	mov    %rbx,%rdx
  d4:	e8 00 00 00 00       	call   d9 <_ZNSt6vectorIS_IdSaIdEESaIS1_EEC1ERKS3_+0xd9>
  d9:	48 89 c1             	mov    %rax,%rcx
	  return __result + _Num;
  dc:	48 01 d9             	add    %rbx,%rcx
  df:	48 83 c5 18          	add    $0x18,%rbp
  e3:	49 83 c4 18          	add    $0x18,%r12
  e7:	49 89 4c 24 f0       	mov    %rcx,-0x10(%r12)
  ec:	49 39 ee             	cmp    %rbp,%r14
  ef:	74 2c                	je     11d <_ZNSt6vectorIS_IdSaIdEESaIS1_EEC1ERKS3_+0x11d>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  f1:	48 8b 5d 08          	mov    0x8(%rbp),%rbx
	: _M_start(), _M_finish(), _M_end_of_storage()
  f5:	c5 f9 ef c0          	vpxor  %xmm0,%xmm0,%xmm0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  f9:	48 2b 5d 00          	sub    0x0(%rbp),%rbx
	: _M_start(), _M_finish(), _M_end_of_storage()
  fd:	49 c7 44 24 10 00 00 	movq   $0x0,0x10(%r12)
 104:	00 00 
 106:	c4 c1 7a 7f 04 24    	vmovdqu %xmm0,(%r12)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 10c:	75 82                	jne    90 <_ZNSt6vectorIS_IdSaIdEESaIS1_EEC1ERKS3_+0x90>
 10e:	31 c9                	xor    %ecx,%ecx
 110:	eb 92                	jmp    a4 <_ZNSt6vectorIS_IdSaIdEESaIS1_EEC1ERKS3_+0xa4>
 112:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      _ForwardIterator __cur = __result;
 118:	4c 8b 64 24 08       	mov    0x8(%rsp),%r12
	this->_M_impl._M_finish =
 11d:	4d 89 65 08          	mov    %r12,0x8(%r13)
      }
 121:	48 83 c4 18          	add    $0x18,%rsp
 125:	5b                   	pop    %rbx
 126:	5d                   	pop    %rbp
 127:	41 5c                	pop    %r12
 129:	41 5d                	pop    %r13
 12b:	41 5e                	pop    %r14
 12d:	41 5f                	pop    %r15
 12f:	c3                   	ret    
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 130:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
 137:	00 00 
 139:	e9 13 ff ff ff       	jmp    51 <_ZNSt6vectorIS_IdSaIdEESaIS1_EEC1ERKS3_+0x51>
 13e:	66 90                	xchg   %ax,%ax
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 140:	48 85 db             	test   %rbx,%rbx
 143:	79 0b                	jns    150 <_ZNSt6vectorIS_IdSaIdEESaIS1_EEC1ERKS3_+0x150>
	      std::__throw_bad_array_new_length();
 145:	e8 00 00 00 00       	call   14a <_ZNSt6vectorIS_IdSaIdEESaIS1_EEC1ERKS3_+0x14a>
 14a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	    std::__throw_bad_alloc();
 150:	e8 00 00 00 00       	call   155 <_ZNSt6vectorIS_IdSaIdEESaIS1_EEC1ERKS3_+0x155>
	      std::__throw_bad_array_new_length();
 155:	e8 00 00 00 00       	call   15a <_ZNSt6vectorIS_IdSaIdEESaIS1_EEC1ERKS3_+0x15a>
      __catch(...)
 15a:	48 89 c7             	mov    %rax,%rdi
 15d:	c5 f8 77             	vzeroupper 
 160:	e8 00 00 00 00       	call   165 <_ZNSt6vectorIS_IdSaIdEESaIS1_EEC1ERKS3_+0x165>
 165:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
 16a:	49 39 c4             	cmp    %rax,%r12
 16d:	74 1b                	je     18a <_ZNSt6vectorIS_IdSaIdEESaIS1_EEC1ERKS3_+0x18a>
      }
 16f:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
 174:	48 89 df             	mov    %rbx,%rdi
 177:	e8 00 00 00 00       	call   17c <_ZNSt6vectorIS_IdSaIdEESaIS1_EEC1ERKS3_+0x17c>
 17c:	48 89 d8             	mov    %rbx,%rax
 17f:	48 83 c0 18          	add    $0x18,%rax
 183:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
 188:	eb db                	jmp    165 <_ZNSt6vectorIS_IdSaIdEESaIS1_EEC1ERKS3_+0x165>
	  __throw_exception_again;
 18a:	e8 00 00 00 00       	call   18f <_ZNSt6vectorIS_IdSaIdEESaIS1_EEC1ERKS3_+0x18f>
      __catch(...)
 18f:	48 89 c3             	mov    %rax,%rbx
 192:	c5 f8 77             	vzeroupper 
 195:	e8 00 00 00 00       	call   19a <_ZNSt6vectorIS_IdSaIdEESaIS1_EEC1ERKS3_+0x19a>
      }
 19a:	4c 89 ef             	mov    %r13,%rdi
 19d:	e8 00 00 00 00       	call   1a2 <_ZNSt6vectorIS_IdSaIdEESaIS1_EEC1ERKS3_+0x1a2>
 1a2:	48 89 df             	mov    %rbx,%rdi
 1a5:	e8 00 00 00 00       	call   1aa <_Z7cmpTestRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x4a>

Disassembly of section .text._ZNSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EEC2EmRKS3_RKS4_:

0000000000000000 <_ZNSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EEC1EmRKS3_RKS4_>:
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   0:	48 b8 55 55 55 55 55 	movabs $0x555555555555555,%rax
   7:	55 55 05 
      vector(size_type __n, const value_type& __value,
   a:	41 56                	push   %r14
   c:	41 55                	push   %r13
   e:	41 54                	push   %r12
  10:	55                   	push   %rbp
  11:	53                   	push   %rbx
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
  12:	48 39 f0             	cmp    %rsi,%rax
  15:	0f 82 93 00 00 00    	jb     ae <_ZNSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EEC1EmRKS3_RKS4_+0xae>
	: _M_start(), _M_finish(), _M_end_of_storage()
  1b:	c5 f9 ef c0          	vpxor  %xmm0,%xmm0,%xmm0
  1f:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
  26:	00 
  27:	49 89 fd             	mov    %rdi,%r13
  2a:	48 89 f3             	mov    %rsi,%rbx
  2d:	c5 fa 7f 07          	vmovdqu %xmm0,(%rdi)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  31:	48 85 f6             	test   %rsi,%rsi
  34:	74 5a                	je     90 <_ZNSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EEC1EmRKS3_RKS4_+0x90>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
  36:	48 8d 2c 76          	lea    (%rsi,%rsi,2),%rbp
  3a:	49 89 d4             	mov    %rdx,%r12
  3d:	48 c1 e5 03          	shl    $0x3,%rbp
  41:	48 89 ef             	mov    %rbp,%rdi
  44:	e8 00 00 00 00       	call   49 <_ZNSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EEC1EmRKS3_RKS4_+0x49>
	this->_M_impl._M_start = this->_M_allocate(__n);
  49:	c4 e1 f9 6e c8       	vmovq  %rax,%xmm1
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  4e:	48 01 c5             	add    %rax,%rbp
  51:	49 89 c6             	mov    %rax,%r14
	this->_M_impl._M_start = this->_M_allocate(__n);
  54:	c5 f1 6c c1          	vpunpcklqdq %xmm1,%xmm1,%xmm0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  58:	49 89 6d 10          	mov    %rbp,0x10(%r13)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  5c:	48 89 c5             	mov    %rax,%rbp
	this->_M_impl._M_start = this->_M_allocate(__n);
  5f:	c4 c1 7a 7f 45 00    	vmovdqu %xmm0,0x0(%r13)
  65:	0f 1f 00             	nopl   (%rax)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
  68:	4c 89 e6             	mov    %r12,%rsi
  6b:	48 89 ef             	mov    %rbp,%rdi
  6e:	e8 00 00 00 00       	call   73 <_ZNSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EEC1EmRKS3_RKS4_+0x73>
	  for (; __n > 0; --__n, (void) ++__cur)
  73:	48 83 c5 18          	add    $0x18,%rbp
  77:	48 83 eb 01          	sub    $0x1,%rbx
  7b:	75 eb                	jne    68 <_ZNSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EEC1EmRKS3_RKS4_+0x68>
	this->_M_impl._M_finish =
  7d:	49 89 6d 08          	mov    %rbp,0x8(%r13)
      { _M_fill_initialize(__n, __value); }
  81:	5b                   	pop    %rbx
  82:	5d                   	pop    %rbp
  83:	41 5c                	pop    %r12
  85:	41 5d                	pop    %r13
  87:	41 5e                	pop    %r14
  89:	c3                   	ret    
  8a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  90:	31 ed                	xor    %ebp,%ebp
	this->_M_impl._M_start = this->_M_allocate(__n);
  92:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  99:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
  a0:	00 
	this->_M_impl._M_finish =
  a1:	49 89 6d 08          	mov    %rbp,0x8(%r13)
      { _M_fill_initialize(__n, __value); }
  a5:	5b                   	pop    %rbx
  a6:	5d                   	pop    %rbp
  a7:	41 5c                	pop    %r12
  a9:	41 5d                	pop    %r13
  ab:	41 5e                	pop    %r14
  ad:	c3                   	ret    
	  __throw_length_error(
  ae:	bf 00 00 00 00       	mov    $0x0,%edi
  b3:	e8 00 00 00 00       	call   b8 <_ZNSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EEC1EmRKS3_RKS4_+0xb8>
      __catch(...)
  b8:	48 89 c7             	mov    %rax,%rdi
  bb:	c5 f8 77             	vzeroupper 
  be:	e8 00 00 00 00       	call   c3 <_ZNSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EEC1EmRKS3_RKS4_+0xc3>
	  for (; __first != __last; ++__first)
  c3:	49 39 ee             	cmp    %rbp,%r14
  c6:	74 0e                	je     d6 <_ZNSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EEC1EmRKS3_RKS4_+0xd6>
      __pointer->~_Tp();
  c8:	4c 89 f7             	mov    %r14,%rdi
	  for (; __first != __last; ++__first)
  cb:	49 83 c6 18          	add    $0x18,%r14
      __pointer->~_Tp();
  cf:	e8 00 00 00 00       	call   d4 <_ZNSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EEC1EmRKS3_RKS4_+0xd4>
	  for (; __first != __last; ++__first)
  d4:	eb ed                	jmp    c3 <_ZNSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EEC1EmRKS3_RKS4_+0xc3>
	  __throw_exception_again;
  d6:	e8 00 00 00 00       	call   db <_ZNSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EEC1EmRKS3_RKS4_+0xdb>
      __catch(...)
  db:	48 89 c3             	mov    %rax,%rbx
  de:	c5 f8 77             	vzeroupper 
  e1:	e8 00 00 00 00       	call   e6 <_ZNSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EEC1EmRKS3_RKS4_+0xe6>
      { _M_fill_initialize(__n, __value); }
  e6:	4c 89 ef             	mov    %r13,%rdi
  e9:	e8 00 00 00 00       	call   ee <_ZNSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EEC1EmRKS3_RKS4_+0xee>
  ee:	48 89 df             	mov    %rbx,%rdi
  f1:	e8 00 00 00 00       	call   f6 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0+0x6>

Disassembly of section .text._ZSt18__do_uninit_fill_nIPSt6vectorIS0_IS0_IdSaIdEESaIS2_EESaIS4_EEmS6_ET_S8_T0_RKT1_:

0000000000000000 <_ZSt18__do_uninit_fill_nIPSt6vectorIS0_IS0_IdSaIdEESaIS2_EESaIS4_EEmS6_ET_S8_T0_RKT1_>:
    __do_uninit_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
   0:	41 57                	push   %r15
   2:	41 56                	push   %r14
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	55                   	push   %rbp
   9:	53                   	push   %rbx
   a:	48 83 ec 18          	sub    $0x18,%rsp
   e:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  13:	48 89 34 24          	mov    %rsi,(%rsp)
	  for (; __n > 0; --__n, (void) ++__cur)
  17:	48 85 f6             	test   %rsi,%rsi
  1a:	0f 84 c4 00 00 00    	je     e4 <_ZSt18__do_uninit_fill_nIPSt6vectorIS0_IS0_IdSaIdEESaIS2_EESaIS4_EEmS6_ET_S8_T0_RKT1_+0xe4>
  20:	49 89 d7             	mov    %rdx,%r15
      _ForwardIterator __cur = __first;
  23:	49 89 fd             	mov    %rdi,%r13
  26:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  2d:	00 00 00 
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  30:	49 8b 5f 08          	mov    0x8(%r15),%rbx
	: _M_start(), _M_finish(), _M_end_of_storage()
  34:	c5 f9 ef c0          	vpxor  %xmm0,%xmm0,%xmm0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  38:	49 2b 1f             	sub    (%r15),%rbx
	: _M_start(), _M_finish(), _M_end_of_storage()
  3b:	49 c7 45 10 00 00 00 	movq   $0x0,0x10(%r13)
  42:	00 
  43:	c4 c1 7a 7f 45 00    	vmovdqu %xmm0,0x0(%r13)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  49:	0f 84 81 00 00 00    	je     d0 <_ZSt18__do_uninit_fill_nIPSt6vectorIS0_IS0_IdSaIdEESaIS2_EESaIS4_EEmS6_ET_S8_T0_RKT1_+0xd0>
	if (__builtin_expect(__n > this->_M_max_size(), false))
  4f:	48 b8 f8 ff ff ff ff 	movabs $0x7ffffffffffffff8,%rax
  56:	ff ff 7f 
  59:	48 39 d8             	cmp    %rbx,%rax
  5c:	72 77                	jb     d5 <_ZSt18__do_uninit_fill_nIPSt6vectorIS0_IS0_IdSaIdEESaIS2_EESaIS4_EEmS6_ET_S8_T0_RKT1_+0xd5>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
  5e:	48 89 df             	mov    %rbx,%rdi
  61:	e8 00 00 00 00       	call   66 <_ZSt18__do_uninit_fill_nIPSt6vectorIS0_IS0_IdSaIdEESaIS2_EESaIS4_EEmS6_ET_S8_T0_RKT1_+0x66>
  66:	49 89 c6             	mov    %rax,%r14
	this->_M_impl._M_start = this->_M_allocate(__n);
  69:	c4 c1 f9 6e ce       	vmovq  %r14,%xmm1
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  6e:	4c 01 f3             	add    %r14,%rbx
	  for (; __first != __last; ++__first, (void)++__cur)
  71:	4c 89 f5             	mov    %r14,%rbp
	this->_M_impl._M_start = this->_M_allocate(__n);
  74:	c5 f1 6c c1          	vpunpcklqdq %xmm1,%xmm1,%xmm0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  78:	49 89 5d 10          	mov    %rbx,0x10(%r13)
	this->_M_impl._M_start = this->_M_allocate(__n);
  7c:	c4 c1 7a 7f 45 00    	vmovdqu %xmm0,0x0(%r13)
  82:	4d 8b 67 08          	mov    0x8(%r15),%r12
  86:	49 8b 1f             	mov    (%r15),%rbx
  89:	49 39 dc             	cmp    %rbx,%r12
  8c:	74 1a                	je     a8 <_ZSt18__do_uninit_fill_nIPSt6vectorIS0_IS0_IdSaIdEESaIS2_EESaIS4_EEmS6_ET_S8_T0_RKT1_+0xa8>
  8e:	66 90                	xchg   %ax,%ax
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
  90:	48 89 de             	mov    %rbx,%rsi
  93:	48 89 ef             	mov    %rbp,%rdi
  96:	e8 00 00 00 00       	call   9b <_ZSt18__do_uninit_fill_nIPSt6vectorIS0_IS0_IdSaIdEESaIS2_EESaIS4_EEmS6_ET_S8_T0_RKT1_+0x9b>
  9b:	48 83 c3 18          	add    $0x18,%rbx
  9f:	48 83 c5 18          	add    $0x18,%rbp
  a3:	49 39 dc             	cmp    %rbx,%r12
  a6:	75 e8                	jne    90 <_ZSt18__do_uninit_fill_nIPSt6vectorIS0_IS0_IdSaIdEESaIS2_EESaIS4_EEmS6_ET_S8_T0_RKT1_+0x90>
	this->_M_impl._M_finish =
  a8:	49 89 6d 08          	mov    %rbp,0x8(%r13)
	  for (; __n > 0; --__n, (void) ++__cur)
  ac:	49 83 c5 18          	add    $0x18,%r13
  b0:	48 83 2c 24 01       	subq   $0x1,(%rsp)
  b5:	0f 85 75 ff ff ff    	jne    30 <_ZSt18__do_uninit_fill_nIPSt6vectorIS0_IS0_IdSaIdEESaIS2_EESaIS4_EEmS6_ET_S8_T0_RKT1_+0x30>
    }
  bb:	48 83 c4 18          	add    $0x18,%rsp
  bf:	4c 89 e8             	mov    %r13,%rax
  c2:	5b                   	pop    %rbx
  c3:	5d                   	pop    %rbp
  c4:	41 5c                	pop    %r12
  c6:	41 5d                	pop    %r13
  c8:	41 5e                	pop    %r14
  ca:	41 5f                	pop    %r15
  cc:	c3                   	ret    
  cd:	0f 1f 00             	nopl   (%rax)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  d0:	45 31 f6             	xor    %r14d,%r14d
  d3:	eb 94                	jmp    69 <_ZSt18__do_uninit_fill_nIPSt6vectorIS0_IS0_IdSaIdEESaIS2_EESaIS4_EEmS6_ET_S8_T0_RKT1_+0x69>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
  d5:	48 85 db             	test   %rbx,%rbx
  d8:	79 05                	jns    df <_ZSt18__do_uninit_fill_nIPSt6vectorIS0_IS0_IdSaIdEESaIS2_EESaIS4_EEmS6_ET_S8_T0_RKT1_+0xdf>
	      std::__throw_bad_array_new_length();
  da:	e8 00 00 00 00       	call   df <_ZSt18__do_uninit_fill_nIPSt6vectorIS0_IS0_IdSaIdEESaIS2_EESaIS4_EEmS6_ET_S8_T0_RKT1_+0xdf>
	    std::__throw_bad_alloc();
  df:	e8 00 00 00 00       	call   e4 <_ZSt18__do_uninit_fill_nIPSt6vectorIS0_IS0_IdSaIdEESaIS2_EESaIS4_EEmS6_ET_S8_T0_RKT1_+0xe4>
      _ForwardIterator __cur = __first;
  e4:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
	  return __cur;
  e9:	eb d0                	jmp    bb <_ZSt18__do_uninit_fill_nIPSt6vectorIS0_IS0_IdSaIdEESaIS2_EESaIS4_EEmS6_ET_S8_T0_RKT1_+0xbb>
      __catch(...)
  eb:	48 89 c7             	mov    %rax,%rdi
  ee:	eb 18                	jmp    108 <_ZSt18__do_uninit_fill_nIPSt6vectorIS0_IS0_IdSaIdEESaIS2_EESaIS4_EEmS6_ET_S8_T0_RKT1_+0x108>
      __catch(...)
  f0:	48 89 c7             	mov    %rax,%rdi
  f3:	eb 3d                	jmp    132 <_ZSt18__do_uninit_fill_nIPSt6vectorIS0_IS0_IdSaIdEESaIS2_EESaIS4_EEmS6_ET_S8_T0_RKT1_+0x132>
  f5:	c5 f8 77             	vzeroupper 
  f8:	e8 00 00 00 00       	call   fd <_ZSt18__do_uninit_fill_nIPSt6vectorIS0_IS0_IdSaIdEESaIS2_EESaIS4_EEmS6_ET_S8_T0_RKT1_+0xfd>
      }
  fd:	4c 89 ef             	mov    %r13,%rdi
 100:	e8 00 00 00 00       	call   105 <_ZSt18__do_uninit_fill_nIPSt6vectorIS0_IS0_IdSaIdEESaIS2_EESaIS4_EEmS6_ET_S8_T0_RKT1_+0x105>
 105:	48 89 df             	mov    %rbx,%rdi
      __catch(...)
 108:	c5 f8 77             	vzeroupper 
 10b:	e8 00 00 00 00       	call   110 <_ZSt18__do_uninit_fill_nIPSt6vectorIS0_IS0_IdSaIdEESaIS2_EESaIS4_EEmS6_ET_S8_T0_RKT1_+0x110>
	  for (; __first != __last; ++__first)
 110:	4c 39 6c 24 08       	cmp    %r13,0x8(%rsp)
 115:	74 36                	je     14d <_ZSt18__do_uninit_fill_nIPSt6vectorIS0_IS0_IdSaIdEESaIS2_EESaIS4_EEmS6_ET_S8_T0_RKT1_+0x14d>
      __pointer->~_Tp();
 117:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
 11c:	48 89 df             	mov    %rbx,%rdi
 11f:	e8 00 00 00 00       	call   124 <_ZSt18__do_uninit_fill_nIPSt6vectorIS0_IS0_IdSaIdEESaIS2_EESaIS4_EEmS6_ET_S8_T0_RKT1_+0x124>
	  for (; __first != __last; ++__first)
 124:	48 89 d8             	mov    %rbx,%rax
 127:	48 83 c0 18          	add    $0x18,%rax
 12b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
 130:	eb de                	jmp    110 <_ZSt18__do_uninit_fill_nIPSt6vectorIS0_IS0_IdSaIdEESaIS2_EESaIS4_EEmS6_ET_S8_T0_RKT1_+0x110>
      __catch(...)
 132:	c5 f8 77             	vzeroupper 
 135:	e8 00 00 00 00       	call   13a <_ZSt18__do_uninit_fill_nIPSt6vectorIS0_IS0_IdSaIdEESaIS2_EESaIS4_EEmS6_ET_S8_T0_RKT1_+0x13a>
 13a:	49 39 ee             	cmp    %rbp,%r14
 13d:	74 18                	je     157 <_ZSt18__do_uninit_fill_nIPSt6vectorIS0_IS0_IdSaIdEESaIS2_EESaIS4_EEmS6_ET_S8_T0_RKT1_+0x157>
      __pointer->~_Tp();
 13f:	4c 89 f7             	mov    %r14,%rdi
	  for (; __first != __last; ++__first)
 142:	49 83 c6 18          	add    $0x18,%r14
      __pointer->~_Tp();
 146:	e8 00 00 00 00       	call   14b <_ZSt18__do_uninit_fill_nIPSt6vectorIS0_IS0_IdSaIdEESaIS2_EESaIS4_EEmS6_ET_S8_T0_RKT1_+0x14b>
	  for (; __first != __last; ++__first)
 14b:	eb ed                	jmp    13a <_ZSt18__do_uninit_fill_nIPSt6vectorIS0_IS0_IdSaIdEESaIS2_EESaIS4_EEmS6_ET_S8_T0_RKT1_+0x13a>
	  __throw_exception_again;
 14d:	e8 00 00 00 00       	call   152 <_ZSt18__do_uninit_fill_nIPSt6vectorIS0_IS0_IdSaIdEESaIS2_EESaIS4_EEmS6_ET_S8_T0_RKT1_+0x152>
      __catch(...)
 152:	48 89 c3             	mov    %rax,%rbx
 155:	eb 05                	jmp    15c <_ZSt18__do_uninit_fill_nIPSt6vectorIS0_IS0_IdSaIdEESaIS2_EESaIS4_EEmS6_ET_S8_T0_RKT1_+0x15c>
	  __throw_exception_again;
 157:	e8 00 00 00 00       	call   15c <_ZSt18__do_uninit_fill_nIPSt6vectorIS0_IS0_IdSaIdEESaIS2_EESaIS4_EEmS6_ET_S8_T0_RKT1_+0x15c>
      __catch(...)
 15c:	c5 f8 77             	vzeroupper 
 15f:	e8 00 00 00 00       	call   164 <_ZSt18__do_uninit_fill_nIPSt6vectorIS0_IS0_IdSaIdEESaIS2_EESaIS4_EEmS6_ET_S8_T0_RKT1_+0x164>
 164:	48 89 df             	mov    %rbx,%rdi
 167:	e8 00 00 00 00       	call   16c <_ZSt18__do_uninit_fill_nIPSt6vectorIS0_IS0_IdSaIdEESaIS2_EESaIS4_EEmS6_ET_S8_T0_RKT1_+0x16c>
      __catch(...)
 16c:	48 89 c3             	mov    %rax,%rbx
 16f:	eb 84                	jmp    f5 <_ZSt18__do_uninit_fill_nIPSt6vectorIS0_IS0_IdSaIdEESaIS2_EESaIS4_EEmS6_ET_S8_T0_RKT1_+0xf5>

Disassembly of section .text._ZNSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EEC2EmRKS5_RKS6_:

0000000000000000 <_ZNSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EEC1EmRKS5_RKS6_>:
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   0:	48 b8 55 55 55 55 55 	movabs $0x555555555555555,%rax
   7:	55 55 05 
      vector(size_type __n, const value_type& __value,
   a:	41 55                	push   %r13
   c:	41 54                	push   %r12
   e:	55                   	push   %rbp
   f:	53                   	push   %rbx
  10:	48 83 ec 08          	sub    $0x8,%rsp
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
  14:	48 39 f0             	cmp    %rsi,%rax
  17:	72 62                	jb     7b <_ZNSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EEC1EmRKS5_RKS6_+0x7b>
	: _M_start(), _M_finish(), _M_end_of_storage()
  19:	c5 f9 ef c0          	vpxor  %xmm0,%xmm0,%xmm0
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
  1d:	4c 8d 24 76          	lea    (%rsi,%rsi,2),%r12
  21:	48 89 fd             	mov    %rdi,%rbp
  24:	48 89 f3             	mov    %rsi,%rbx
  27:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
  2e:	00 
  2f:	49 89 d5             	mov    %rdx,%r13
  32:	49 c1 e4 03          	shl    $0x3,%r12
  36:	c5 fa 7f 07          	vmovdqu %xmm0,(%rdi)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  3a:	31 ff                	xor    %edi,%edi
  3c:	48 85 f6             	test   %rsi,%rsi
  3f:	74 0b                	je     4c <_ZNSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EEC1EmRKS5_RKS6_+0x4c>
  41:	4c 89 e7             	mov    %r12,%rdi
  44:	e8 00 00 00 00       	call   49 <_ZNSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EEC1EmRKS5_RKS6_+0x49>
  49:	48 89 c7             	mov    %rax,%rdi
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  4c:	49 01 fc             	add    %rdi,%r12
	this->_M_impl._M_start = this->_M_allocate(__n);
  4f:	c4 e1 f9 6e cf       	vmovq  %rdi,%xmm1
	{ return std::__do_uninit_fill_n(__first, __n, __x); }
  54:	4c 89 ea             	mov    %r13,%rdx
  57:	48 89 de             	mov    %rbx,%rsi
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  5a:	4c 89 65 10          	mov    %r12,0x10(%rbp)
	this->_M_impl._M_start = this->_M_allocate(__n);
  5e:	c5 f1 6c c1          	vpunpcklqdq %xmm1,%xmm1,%xmm0
  62:	c5 fa 7f 45 00       	vmovdqu %xmm0,0x0(%rbp)
  67:	e8 00 00 00 00       	call   6c <_ZNSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EEC1EmRKS5_RKS6_+0x6c>
	this->_M_impl._M_finish =
  6c:	48 89 45 08          	mov    %rax,0x8(%rbp)
      { _M_fill_initialize(__n, __value); }
  70:	48 83 c4 08          	add    $0x8,%rsp
  74:	5b                   	pop    %rbx
  75:	5d                   	pop    %rbp
  76:	41 5c                	pop    %r12
  78:	41 5d                	pop    %r13
  7a:	c3                   	ret    
	  __throw_length_error(
  7b:	bf 00 00 00 00       	mov    $0x0,%edi
  80:	e8 00 00 00 00       	call   85 <_ZNSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EEC1EmRKS5_RKS6_+0x85>
      { _M_fill_initialize(__n, __value); }
  85:	48 89 c3             	mov    %rax,%rbx
  88:	48 89 ef             	mov    %rbp,%rdi
  8b:	c5 f8 77             	vzeroupper 
  8e:	e8 00 00 00 00       	call   93 <_ZNSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EEC1EmRKS5_RKS6_+0x93>
  93:	48 89 df             	mov    %rbx,%rdi
  96:	e8 00 00 00 00       	call   9b <_ZNKSt6vectorIS_IS_IdSaIdEESaIS1_EESaIS3_EEixEm.isra.0+0xb>

Disassembly of section .text.startup:

0000000000000000 <main>:
int main() {
   0:	53                   	push   %rbx
    mtrxMtrx A (M, vector<doubleMtrx>(K, doubleMtrx(8, vector<double>(8,0))));
   1:	be 08 00 00 00       	mov    $0x8,%esi
int main() {
   6:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
    mtrxMtrx A (M, vector<doubleMtrx>(K, doubleMtrx(8, vector<double>(8,0))));
   d:	48 8d 4c 24 05       	lea    0x5(%rsp),%rcx
  12:	48 8d 54 24 30       	lea    0x30(%rsp),%rdx
  17:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  1e:	00 00 
  20:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  25:	e8 00 00 00 00       	call   2a <main+0x2a>
  2a:	48 8d 4c 24 06       	lea    0x6(%rsp),%rcx
  2f:	48 8d 54 24 50       	lea    0x50(%rsp),%rdx
  34:	be 08 00 00 00       	mov    $0x8,%esi
  39:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  3e:	e8 00 00 00 00       	call   43 <main+0x43>
  43:	48 8d 4c 24 07       	lea    0x7(%rsp),%rcx
  48:	48 8d 54 24 70       	lea    0x70(%rsp),%rdx
  4d:	be 2c 01 00 00       	mov    $0x12c,%esi
  52:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  59:	00 
  5a:	e8 00 00 00 00       	call   5f <main+0x5f>
  5f:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
  64:	be b4 00 00 00       	mov    $0xb4,%esi
  69:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  6e:	48 8d 94 24 90 00 00 	lea    0x90(%rsp),%rdx
  75:	00 
  76:	e8 00 00 00 00       	call   7b <main+0x7b>
  7b:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  82:	00 
  83:	e8 00 00 00 00       	call   88 <main+0x88>
  88:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  8d:	e8 00 00 00 00       	call   92 <main+0x92>
      }
  92:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  97:	e8 00 00 00 00       	call   9c <main+0x9c>
    mtrxMtrx B (K, vector<doubleMtrx>(N, doubleMtrx(8, vector<double>(8,0))));
  9c:	48 8d 4c 24 04       	lea    0x4(%rsp),%rcx
  a1:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
  a6:	be 08 00 00 00       	mov    $0x8,%esi
  ab:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  b2:	00 00 
  b4:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
  b9:	e8 00 00 00 00       	call   be <main+0xbe>
  be:	48 8d 4c 24 05       	lea    0x5(%rsp),%rcx
  c3:	48 8d 54 24 50       	lea    0x50(%rsp),%rdx
  c8:	be 08 00 00 00       	mov    $0x8,%esi
  cd:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  d2:	e8 00 00 00 00       	call   d7 <main+0xd7>
  d7:	48 8d 4c 24 06       	lea    0x6(%rsp),%rcx
  dc:	48 8d 54 24 70       	lea    0x70(%rsp),%rdx
  e1:	be 96 00 00 00       	mov    $0x96,%esi
  e6:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
  ed:	00 
  ee:	e8 00 00 00 00       	call   f3 <main+0xf3>
  f3:	48 8d 4c 24 07       	lea    0x7(%rsp),%rcx
  f8:	be 2c 01 00 00       	mov    $0x12c,%esi
  fd:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
 102:	48 8d 94 24 90 00 00 	lea    0x90(%rsp),%rdx
 109:	00 
 10a:	e8 00 00 00 00       	call   10f <main+0x10f>
 10f:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
 116:	00 
 117:	e8 00 00 00 00       	call   11c <main+0x11c>
 11c:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
 121:	e8 00 00 00 00       	call   126 <main+0x126>
 126:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
 12b:	e8 00 00 00 00       	call   130 <main+0x130>
    randMtrx(A);
 130:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
 135:	e8 00 00 00 00       	call   13a <main+0x13a>
    randMtrx(B);
 13a:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
 13f:	e8 00 00 00 00       	call   144 <main+0x144>
    auto start = high_resolution_clock::now();
 144:	e8 00 00 00 00       	call   149 <main+0x149>
    mtrxMtrx vecM = opMltply_mM(A, B);
 149:	48 8d 54 24 30       	lea    0x30(%rsp),%rdx
 14e:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
 153:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
    auto start = high_resolution_clock::now();
 158:	48 89 c3             	mov    %rax,%rbx
    mtrxMtrx vecM = opMltply_mM(A, B);
 15b:	e8 00 00 00 00       	call   160 <main+0x160>
    auto time = duration_cast<milliseconds>(high_resolution_clock::now() - start).count();
 160:	e8 00 00 00 00       	call   165 <main+0x165>
    cout << "Time: auto vectorization: " << time << " ms." << endl;
 165:	be 00 00 00 00       	mov    $0x0,%esi
 16a:	bf 00 00 00 00       	mov    $0x0,%edi
	  static constexpr _ToDur
	  __cast(const duration<_Rep, _Period>& __d)
	  {
	    typedef typename _ToDur::rep			__to_rep;
	    return _ToDur(static_cast<__to_rep>(
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
 16f:	48 ba db 34 b6 d7 82 	movabs $0x431bde82d7b634db,%rdx
 176:	de 1b 43 
		const duration<_Rep2, _Period2>& __rhs)
      {
	typedef duration<_Rep1, _Period1>			__dur1;
	typedef duration<_Rep2, _Period2>			__dur2;
	typedef typename common_type<__dur1,__dur2>::type	__cd;
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
 179:	48 29 d8             	sub    %rbx,%rax
 17c:	48 89 c1             	mov    %rax,%rcx
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
 17f:	48 f7 ea             	imul   %rdx
 182:	48 c1 f9 3f          	sar    $0x3f,%rcx
 186:	48 c1 fa 12          	sar    $0x12,%rdx
 18a:	48 89 d3             	mov    %rdx,%rbx
 18d:	48 29 cb             	sub    %rcx,%rbx
 190:	e8 00 00 00 00       	call   195 <main+0x195>
 195:	48 89 c7             	mov    %rax,%rdi
      { return _M_insert(__n); }
 198:	48 89 de             	mov    %rbx,%rsi
 19b:	e8 00 00 00 00       	call   1a0 <main+0x1a0>
 1a0:	48 89 c7             	mov    %rax,%rdi
 1a3:	be 00 00 00 00       	mov    $0x0,%esi
 1a8:	e8 00 00 00 00       	call   1ad <main+0x1ad>
 1ad:	48 89 c7             	mov    %rax,%rdi
	return __pf(*this);
 1b0:	e8 00 00 00 00       	call   1b5 <main+0x1b5>
    start = high_resolution_clock::now();
 1b5:	e8 00 00 00 00       	call   1ba <main+0x1ba>
    mtrxMtrx novectM = opMltply_mM_noV(A, B);
 1ba:	48 8d 54 24 30       	lea    0x30(%rsp),%rdx
 1bf:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
 1c4:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
    start = high_resolution_clock::now();
 1c9:	48 89 c3             	mov    %rax,%rbx
    mtrxMtrx novectM = opMltply_mM_noV(A, B);
 1cc:	e8 00 00 00 00       	call   1d1 <main+0x1d1>
    time = duration_cast<milliseconds>(high_resolution_clock::now() - start).count();
 1d1:	e8 00 00 00 00       	call   1d6 <main+0x1d6>
    cout << "Time: no auto vectorization: " << time << " ms." << endl;
 1d6:	be 00 00 00 00       	mov    $0x0,%esi
 1db:	bf 00 00 00 00       	mov    $0x0,%edi
 1e0:	48 ba db 34 b6 d7 82 	movabs $0x431bde82d7b634db,%rdx
 1e7:	de 1b 43 
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
 1ea:	48 29 d8             	sub    %rbx,%rax
 1ed:	48 89 c1             	mov    %rax,%rcx
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
 1f0:	48 f7 ea             	imul   %rdx
 1f3:	48 c1 f9 3f          	sar    $0x3f,%rcx
 1f7:	48 c1 fa 12          	sar    $0x12,%rdx
 1fb:	48 89 d3             	mov    %rdx,%rbx
 1fe:	48 29 cb             	sub    %rcx,%rbx
 201:	e8 00 00 00 00       	call   206 <main+0x206>
 206:	48 89 c7             	mov    %rax,%rdi
      { return _M_insert(__n); }
 209:	48 89 de             	mov    %rbx,%rsi
 20c:	e8 00 00 00 00       	call   211 <main+0x211>
 211:	48 89 c7             	mov    %rax,%rdi
 214:	be 00 00 00 00       	mov    $0x0,%esi
 219:	e8 00 00 00 00       	call   21e <main+0x21e>
 21e:	48 89 c7             	mov    %rax,%rdi
	return __pf(*this);
 221:	e8 00 00 00 00       	call   226 <main+0x226>
    start = high_resolution_clock::now();
 226:	e8 00 00 00 00       	call   22b <main+0x22b>
    mtrxMtrx mnlvecM = opMltply_mM_mnl(A, B);
 22b:	48 8d 54 24 30       	lea    0x30(%rsp),%rdx
 230:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
 235:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
 23c:	00 
    start = high_resolution_clock::now();
 23d:	48 89 c3             	mov    %rax,%rbx
    mtrxMtrx mnlvecM = opMltply_mM_mnl(A, B);
 240:	e8 00 00 00 00       	call   245 <main+0x245>
    time = duration_cast<milliseconds>(high_resolution_clock::now() - start).count();
 245:	e8 00 00 00 00       	call   24a <main+0x24a>
    cout << "Time: manual vectorization: " << time << " ms." << endl;
 24a:	be 00 00 00 00       	mov    $0x0,%esi
 24f:	bf 00 00 00 00       	mov    $0x0,%edi
 254:	48 ba db 34 b6 d7 82 	movabs $0x431bde82d7b634db,%rdx
 25b:	de 1b 43 
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
 25e:	48 29 d8             	sub    %rbx,%rax
 261:	48 89 c1             	mov    %rax,%rcx
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
 264:	48 f7 ea             	imul   %rdx
 267:	48 c1 f9 3f          	sar    $0x3f,%rcx
 26b:	48 c1 fa 12          	sar    $0x12,%rdx
 26f:	48 89 d3             	mov    %rdx,%rbx
 272:	48 29 cb             	sub    %rcx,%rbx
 275:	e8 00 00 00 00       	call   27a <main+0x27a>
 27a:	48 89 c7             	mov    %rax,%rdi
      { return _M_insert(__n); }
 27d:	48 89 de             	mov    %rbx,%rsi
 280:	e8 00 00 00 00       	call   285 <main+0x285>
 285:	48 89 c7             	mov    %rax,%rdi
 288:	be 00 00 00 00       	mov    $0x0,%esi
 28d:	e8 00 00 00 00       	call   292 <main+0x292>
 292:	48 89 c7             	mov    %rax,%rdi
	return __pf(*this);
 295:	e8 00 00 00 00       	call   29a <main+0x29a>
    cmpTest(vecM, mnlvecM);
 29a:	48 8d b4 24 90 00 00 	lea    0x90(%rsp),%rsi
 2a1:	00 
 2a2:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
 2a7:	e8 00 00 00 00       	call   2ac <main+0x2ac>
}
 2ac:	48 8d bc 24 90 00 00 	lea    0x90(%rsp),%rdi
 2b3:	00 
 2b4:	e8 00 00 00 00       	call   2b9 <main+0x2b9>
 2b9:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
 2be:	e8 00 00 00 00       	call   2c3 <main+0x2c3>
 2c3:	48 8d 7c 24 50       	lea    0x50(%rsp),%rdi
 2c8:	e8 00 00 00 00       	call   2cd <main+0x2cd>
 2cd:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
 2d2:	e8 00 00 00 00       	call   2d7 <main+0x2d7>
 2d7:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
 2dc:	e8 00 00 00 00       	call   2e1 <main+0x2e1>
 2e1:	48 81 c4 b0 00 00 00 	add    $0xb0,%rsp
 2e8:	31 c0                	xor    %eax,%eax
 2ea:	5b                   	pop    %rbx
 2eb:	c3                   	ret    
 2ec:	48 89 c3             	mov    %rax,%rbx
 2ef:	c5 f8 77             	vzeroupper 
 2f2:	e9 00 00 00 00       	jmp    2f7 <main+0x2f7>
 2f7:	48 89 c3             	mov    %rax,%rbx
 2fa:	e9 00 00 00 00       	jmp    2ff <main+0x2ff>
 2ff:	48 89 c3             	mov    %rax,%rbx
 302:	c5 f8 77             	vzeroupper 
 305:	e9 00 00 00 00       	jmp    30a <main+0x30a>
 30a:	48 89 c3             	mov    %rax,%rbx
 30d:	c5 f8 77             	vzeroupper 
 310:	e9 00 00 00 00       	jmp    315 <main+0x315>
 315:	48 89 c3             	mov    %rax,%rbx
 318:	c5 f8 77             	vzeroupper 
 31b:	e9 00 00 00 00       	jmp    320 <main+0x320>
    mtrxMtrx B (K, vector<doubleMtrx>(N, doubleMtrx(8, vector<double>(8,0))));
 320:	48 89 c3             	mov    %rax,%rbx
 323:	e9 00 00 00 00       	jmp    328 <main+0x328>
 328:	48 89 c3             	mov    %rax,%rbx
 32b:	c5 f8 77             	vzeroupper 
 32e:	e9 00 00 00 00       	jmp    333 <main+0x333>
 333:	48 89 c3             	mov    %rax,%rbx
 336:	c5 f8 77             	vzeroupper 
 339:	e9 00 00 00 00       	jmp    33e <main+0x33e>
}
 33e:	48 89 c3             	mov    %rax,%rbx
 341:	c5 f8 77             	vzeroupper 
 344:	e9 00 00 00 00       	jmp    349 <main+0x349>
    mtrxMtrx A (M, vector<doubleMtrx>(K, doubleMtrx(8, vector<double>(8,0))));
 349:	48 89 c3             	mov    %rax,%rbx
 34c:	e9 00 00 00 00       	jmp    351 <main+0x351>
 351:	48 89 c3             	mov    %rax,%rbx
 354:	c5 f8 77             	vzeroupper 
 357:	e9 00 00 00 00       	jmp    35c <main+0x35c>
 35c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000000360 <_GLOBAL__sub_I__Z7cmpTestRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_>:
}
 360:	48 83 ec 08          	sub    $0x8,%rsp
  extern wostream wclog;	/// Linked to standard error (buffered)
#endif
  ///@}

  // For construction of filebuffers for cout, cin, cerr, clog et. al.
  static ios_base::Init __ioinit;
 364:	bf 00 00 00 00       	mov    $0x0,%edi
 369:	e8 00 00 00 00       	call   36e <_GLOBAL__sub_I__Z7cmpTestRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0xe>
 36e:	ba 00 00 00 00       	mov    $0x0,%edx
 373:	be 00 00 00 00       	mov    $0x0,%esi
 378:	bf 00 00 00 00       	mov    $0x0,%edi
 37d:	48 83 c4 08          	add    $0x8,%rsp
 381:	e9 00 00 00 00       	jmp    386 <_GLOBAL__sub_I__Z7cmpTestRKSt6vectorIS_IS_IS_IdSaIdEESaIS1_EESaIS3_EESaIS5_EES9_+0x26>
